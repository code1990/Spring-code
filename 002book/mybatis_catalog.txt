>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MyBatis技术内幕
第1章　MyBatis快速入门
1.1　ORM简介
1.2　常见持久化框架
1.3　MyBatis示例
1.4　MyBatis整体架构
1.4.1　基础支持层
1.4.2　核心处理层
1.4.3　接口层
1.5　本章小结
第2章　基础支持层
2.1　解析器模块
2.1.1　XPath简介
2.1.2　XPathParser
2.2　反射工具箱
2.2.1　Reflector&ReflectorFactory
2.2.2　TypeParameterResolver
2.2.3　ObjectFactory
2.2.4　Property工具集
2.2.5　MetaClass
2.2.6　ObjectWrapper
2.2.7　MetaObject
2.3　类型转换
2.3.1　TypeHandler
2.3.2　TypeHandlerRegistry
2.3.3　TypeAliasRegistry
2.4　日志模块
2.4.1　适配器模式
2.4.2　日志适配器
2.4.3　代理模式与JDK动态代理
2.4.4　JDBC调试
2.5　资源加载
2.5.1　类加载器简介
2.5.2　ClassLoaderWrapper
2.5.3　ResolverUtil
2.5.4　单例模式
2.5.5　VFS
2.6　DataSource
2.6.1　工厂方法模式
2.6.2　DataSourceFactory
2.6.3　UnpooledDataSource
2.6.4　PooledDataSource
2.7　Transaction
2.8　binding模块
2.8.1　MapperRegistry&MapperProxyFactory
2.8.2　MapperProxy
2.8.3　MapperMethod
2.9　缓存模块
2.9.1　装饰器模式
2.9.2　Cache接口及其实现
2.9.3　CacheKey
2.10　本章小结
第3章　核心处理层
3.1　MyBatis初始化
3.1.1　建造者模式
3.1.2　BaseBuilder
3.1.3　XMLConfigBuilder
3.1.4　XMLMapperBuilder
3.1.5　XMLStatementBuilder
3.1.6　绑定Mapper接口
3.1.7　处理incomplete*集合
3.2　SqlNode&SqlSource
3.2.1　组合模式
3.2.2　OGNL表达式简介
3.2.3　DynamicContext
3.2.4　SqlNode
3.2.5　SqlSourceBuilder
3.2.6　DynamicSqlSource
3.2.7　RawSqlSource
3.3　ResultSetHandler
3.3.1　handleResultSets()方法
3.3.2　ResultSetWrapper
3.3.3　简单映射
3.3.4　嵌套映射
3.3.5　嵌套查询&延迟加载
3.3.6　多结果集处理
3.3.7　游标
3.3.8　输出类型的参数
3.4　KeyGenerator
3.4.1　Jdbc3KeyGenerator
3.4.2　SelectkeyGenerator
3.5　StatementHandler
3.5.1　RoutingStatementHandler
3.5.2　BaseStatementHandler
3.5.3　ParameterHandler
3.5.4　SimpleStatementHandler
3.5.5　PreparedStatementHandler
3.6　Executor
3.6.1　模板方法模式
3.6.2　BaseExecutor
3.6.3　SimpleExecutor
3.6.4　ReuseExecutor
3.6.5　BatchExecutor
3.6.6　CachingExecutor
3.7　接口层
3.7.1　策略模式
3.7.2　SqlSession
3.7.3　DefaultSqlSessionFactory
3.7.4　SqlSessionManager
3.8　本章小结
第4章　高级主题
4.1　插件模块
4.1.1　责任链模式
4.1.2　Interceptor
4.1.3　应用场景分析
4.2　MyBatis与Spring集成
4.2.1　Spring基本概念
4.2.2　Spring MVC介绍
4.2.3　集成环境搭建
4.2.4 Mybatis-Spring剖析
4.3　拾遗
4.3.1　应用节点
4.3.2　OgnlUtils工具类
4.3.3　SQL语句生成器
4.3.4　动态SQL脚本插件
4.3.5　MyBatis-Generator逆向工程
4.4　本章小结
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MyBatis技术内幕
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot实战派
目录
+++++++++入 门 篇
第1章  进入Spring Boot世界  /2
1.1  认识Spring Boot  /2
∣1.1.1  什么是Spring Boot  /2
∣1.1.2  Spring、Spring Boot、Spring Cloud的关系  /4
∣1.1.3  Spring Boot的特色  /5
∣1.1.4  Spring Boot支持的开发语言  /6
∣1.1.5  学习Spring Boot的前景展望  /6
1.2  学习Spring Boot的建议  /7
∣1.2.1  看透本书理论，模仿实战例子  /7
∣1.2.2  利用开发工具自动学习  /7
∣1.2.3  发现新功能的方法  /8
∣1.2.4  建立高阶的思维方式  /9
∣1.2.5  控制版本，降低犯错的代价  /10
∣1.2.6  获取最新、最全的资料  /11
∣1.2.7  学会自己发现和解决问题  /11
∣1.2.8  善于提问，成功一半  /12
第2章  准备开发环境  /14
2.1  搭建环境  /14
∣2.1.1  安装Java开发环境JDK  /14
∣2.1.2  配置JDK的环境变量  /15
2.2  熟悉Maven  /18
∣2.2.1  安装及配置Maven  /18
∣2.2.2  认识其中的pom.xml文件  /19
∣2.2.3  Maven的运作方式  /23
∣2.2.4  配置国内仓库  /23
第3章  使用开发工具  /25
3.1  安装开发工具IDEA及插件  /25
∣3.1.1  安装IDEA  /25
∣3.1.2  配置IDEA的Maven环境  /27
∣3.1.3  安装Spring Assistant插件  /27
∣3.1.4  安装插件Lombok  /28
3.2  【实例1】用Spring Boot输出“Hello World”  /30
∣3.2.1  构建Spring Boot项目  /30
∣3.2.2  编写控制器，实现输出功能  /31
∣3.2.3  在IDEA中运行程序  /33
∣3.2.4  打包成可执行的JAR包  /33
3.3  在Eclipse中开发Spring Boot应用程序  /35
∣3.3.1  安装Eclipse  /35
∣3.3.2  安装Spring Tools 4插件  /35
∣3.3.3  配置Eclipse的Maven环境  /36
∣3.3.4  创建Spring Boot项目  /37
3.4  了解Spring官方开发工具STS  /37
3.5  必会的IDEA实用技能  /38
∣3.5.1  智能提示代码  /38
∣3.5.2  自动提示参数  /39
∣3.5.3  实现自动转义  /39
∣3.5.4  自定义高复用代码块  /40
∣3.5.5  设置注释信息  /41
∣3.5.6  超能的“Alt+Enter”快捷键  /42
∣3.5.7  使用全局配置  /42
∣3.5.8  自动生成语句  /43
3.6  比较IDEA与Eclipse  /44
3.7  如何使用本书源代码  /47
∣3.7.1  在IDEA中使用  /47
∣3.7.2  在Eclipse（STS）中使用  /47
∣
+++++++++基 础 篇
第4章  Spring Boot基础  /50
4.1  了解Spring Boot  /50
∣4.1.1  了解Spring Boot项目结构  /50
∣4.1.2  了解Spring Boot的入口类  /51
∣4.1.3  了解Spring Boot的自动配置  /52
∣4.1.4  了解Spring Boot热部署  /52
∣4.1.5  【实例2】定制启动画面  /53
4.2  Spring Boot的常用注解  /54
∣4.2.1  什么是注解式编程  /55
∣4.2.2  了解系统注解  /55
∣4.2.3  Spring Boot的常用注解  /56
4.3  使用配置文件  /61
∣4.3.1  【实例3】演示如何使用application.yml文件  /62
∣4.3.2  【实例4】演示如何使用application.properties文件  /65
∣4.3.3  【实例5】用application.yml和application.properties配置多环境  /67
4.4  Spring Boot的Starter  /69
∣4.4.1  了解Starter  /69
∣4.4.2  使用Starter  /70
第5章  分层开发Web应用程序  /71
5.1  应用程序分层开发模式——MVC  /71
∣5.1.1  了解MVC模式  /71
∣5.1.2  MVC和三层架构的关系  /72
5.2  使用视图技术Thymeleaf  /73
∣5.2.1  认识Thymeleaf  /73
∣5.2.2  基础语法  /75
∣5.2.3  处理循环遍历  /78
∣5.2.4  处理公共代码块  /80
∣5.2.5  处理分页  /81
∣5.2.6  验证和提示错误消息  /82
∣5.2.7  【实例6】编写Thymeleaf视图以展示数据  /83
5.3  使用控制器  /85
∣5.3.1  常用注解  /85
∣5.3.2  将URL映射到方法  /86
∣5.3.3  处理HTTP请求的方法  /87
∣5.3.4  处理内容类型  /89
∣5.3.5  在方法中使用参数  /90
5.4  理解模型  /93
5.5  【实例7】实现MVC模式的Web应用程序  /94
∣5.5.1  添加依赖  /94
∣5.5.2  创建实体模型  /95
∣5.5.3  创建控制器  /95
∣5.5.4  创建用于展示的视图  /96
5.6  验证数据  /96
∣5.6.1  认识内置的验证器Hibernate∣validator  /96
∣5.6.2  自定义验证功能  /98
∣5.6.3  【实例8】验证表单数据并实现数据的自定义验证  /99
第6章  响应式编程  /103
6.1  认识响应式编程  /103
∣6.1.1  什么是WebFlux  /103
∣6.1.2  比较MVC和WebFlux  /103
∣6.1.3  认识Mono和Flux  /105
∣6.1.4  开发WebFlux的流程  /106
6.2  【实例9】用注解式开发实现Hello World  /107
∣6.2.1  配置WebFlux依赖  /107
∣6.2.2  编写控制器  /107
6.3  【实例10】用注解式开发实现数据的增、删、改、查  /108
∣6.3.1  创建实体类  /108
∣6.3.2  编写控制器  /108
∣6.3.3  测试API功能  /110
6.4  【实例11】用响应式开发方式开发WebFlux  /111
∣6.4.1  编写处理器类Handler  /111
∣6.4.2  编写路由器类Router  /112
6.5  【实例12】用WebFlux模式操作MongoDB数据库,实现数据的增、删、改、查功能  /112
∣6.5.1  添加依赖  /112
∣6.5.2  创建实体类  /113
∣6.5.3  编写接口  /113
6.5.4  编写增、删、改、查数据的API  /113
∣
+++++++++进 阶 篇
第7章  Spring Boot进阶  /118
7.1  面向切面编程  /118
∣7.1.1  认识Spring AOP  /118
∣7.1.2  【实例13】用AOP方式管理日志  /119
7.2  认识IoC容器和Servlet容器  /121
∣7.2.1  认识容器  /121
∣7.2.2  【实例14】用IoC管理Bean  /123
∣7.2.3  【实例15】用Servlet处理请求  /125
7.3  过滤器与监听器  /126
∣7.3.1  认识过滤器  /126
∣7.3.2  【实例16】实现过滤器  /128
∣7.3.3  认识监听器  /128
∣7.3.4  【实例17】实现监听器  /129
7.4  自动配置  /130
∣7.4.1  自定义入口类  /130
∣7.4.2  自动配置的原理  /131
∣7.4.3  【实例18】自定义Starter  /133
7.5  元注解  /136
∣7.5.1  了解元注解  /136
∣7.5.2  【实例19】自定义注解  /137
7.6  异常处理  /138
∣7.6.1  认识异常处理  /138
∣7.6.2  使用控制器通知  /141
∣7.6.3  【实例20】自定义错误处理控制器  /142
∣7.6.4  【实例21】自定义业务异常类  /143
7.7  单元测试  /145
∣7.7.1  了解单元测试  /145
∣7.7.2  Spring Boot 的测试库  /145
∣7.7.3  快速创建测试单元  /149
∣7.7.4  【实例22】Controller层的单元测试  /150
∣7.7.5  【实例23】Service层的单元测试  /153
∣7.7.6  【实例24】Repository层的单元测试  /154
第8章  用ORM操作SQL数据库  /156
8.1  认识Java的数据库连接模板JDBCTemplate  /156
∣8.1.1  认识JDBCTemplate  /156
∣8.1.2  【实例25】用JDBCTemplate实现数据的增、删、改、查  /157
∣8.1.3  认识ORM  /161
8.2  JPA——Java持久层API  /161
∣8.2.1  认识Spring Data  /161
∣8.2.2  认识JPA  /162
∣8.2.3  使用JPA  /164
∣8.2.4  了解JPA注解和属性  /165
∣8.2.5  【实例26】用JPA构建实体数据表  /167
8.3  认识JPA的接口  /169
∣8.3.1  JPA接口JpaRepository  /169
∣8.3.2  分页排序接口PagingAndSortingRepository  /169
∣8.3.3  数据操作接口CrudRepository  /170
∣8.3.4  分页接口Pageable和Page  /170
∣8.3.5  排序类Sort  /171
8.4  JPA的查询方式  /171
∣8.4.1  使用约定方法名  /171
∣8.4.2  用JPQL进行查询  /173
∣8.4.3  用原生SQL进行查询  /174
∣8.4.4  用Specifications进行查询  /175
∣8.4.5  用ExampleMatcher进行查询  /177
∣8.4.6  用谓语QueryDSL进行查询  /177
∣8.4.7  用NamedQuery进行查询  /177
8.5  【实例27】用JPA开发文章管理模块  /178
∣8.5.1  实现文章实体  /178
∣8.5.2  实现数据持久层  /179
∣8.5.3  实现服务接口和服务接口的实现类  /179
∣8.5.4  实现增、删、改、查的控制层API功能  /180
∣8.5.5  实现增、删、改、查功能的视图层  /182
8.6  实现自动填充字段  /185
8.7  掌握关系映射开发  /187
∣8.7.1  认识实体间关系映射  /187
∣8.7.2  【实例28】实现“一对一”映射  /188
∣8.7.3  【实例29】实现“一对多”映射  /192
∣8.7.4  【实例30】实现“多对多”映射  /195
8.8  认识MyBatis——Java数据持久层框架  /197
∣8.8.1  CRUD注解  /198
∣8.8.2  映射注解  /198
∣8.8.3  高级注解  /199
8.9  【实例31】用MyBatis实现数据的增加、删除、修改、查询和分页  /200
∣8.9.1  创建Spring Boot项目并引入依赖  /201
∣8.9.2  实现数据表的自动初始化  /201
∣8.9.3  实现实体对象建模  /202
∣8.9.4  实现实体和数据表的映射关系  /202
∣8.9.5  实现增、删、改、查功能  /203
∣8.9.6  配置分页功能  /204
∣8.9.7  实现分页控制器  /205
∣8.9.8  创建分页视图  /206
8.10  比较JPA与MyBatis  /207
第9章  接口架构风格——RESTful  /209
9.1  REST——前后台间的通信方式  /209
∣9.1.1  认识REST  /209
∣9.1.2  认识HTTP方法与CRUD动作映射  /210
∣9.1.3  实现RESTful风格的数据增、删、改、查  /210
9.2  设计统一的RESTful风格的数据接口  /212
∣9.2.1  版本控制  /212
∣9.2.2  过滤信息  /213
∣9.2.3  确定HTTP的方法  /213
∣9.2.4  确定HTTP的返回状态  /213
∣9.2.5  定义统一返回的格式  /214
9.3  【实例32】为手机APP、PC、H5网页提供统一风格的API  /214
∣9.3.1  实现响应的枚举类  /214
∣9.3.2  实现返回的对象实体  /215
∣9.3.3  封装返回结果  /215
∣9.3.4  统一处理异常  /215
∣9.3.5  编写测试控制器  /219
∣9.3.6  实现数据的增、删、改、查控制器  /220
∣9.3.7  测试数据  /221
9.4  【实例33】用Swagger实现接口文档  /222
∣9.4.1  配置Swagger  /222
∣9.4.2  编写接口文档  /224
9.5  用RestTemplate发起请求  /224
∣9.5.1  认识RestTemplate  /224
∣9.5.2  【实例34】用RestTemplate发送GET请求  /225
∣9.5.3  【实例35】用RestTemplate发送POST请求  /228
∣9.5.4  用RestTemplate发送PUT和DELETE请求  /231
第10章  集成安全框架，实现安全认证和授权  /233
10.1  Spring Security——Spring的安全框架  /233
∣10.1.1  认识Spring Security  /233
∣10.1.2  核心类  /235
10.2  配置Spring Security  /240
∣10.2.1  继承WebSecurityConfigurer Adapter  /240
∣10.2.2  配置自定义策略  /240
∣10.2.3  配置加密方式  /242
∣10.2.4  自定义加密规则  /242
∣10.2.5  配置多用户系统  /242
∣10.2.6  获取当前登录用户信息的几种方式  /244
10.3  【实例36】用Spring Security实现后台登录及权限认证功能  /246
∣10.3.1  引入依赖  /246
∣10.3.2  创建权限开放的页面  /246
∣10.3.3  创建需要权限验证的页面  /247
∣10.3.4  配置Spring Security  /247
∣10.3.5  创建登录页面  /248
∣10.3.6  测试权限  /249
10.4  权限控制方式  /249
∣10.4.1  Spring EL权限表达式  /249
∣10.4.2  通过表达式控制URL权限  /250
∣10.4.3  通过表达式控制方法权限  /252
∣10.4.4  【实例37】使用JSR∣250注解  /254
∣10.4.5  【实例38】实现RBAC权限模型  /256
10.5  认识JWT  /258
10.6  【实例39】用JWT技术为Spring Boot的API增加认证和授权保护  /260
∣10.6.1  配置安全类  /260
∣10.6.2  处理注册  /261
∣10.6.3  处理登录  /262
∣10.6.4  测试多方式注册和登录  /264
∣10.6.5  测试token方式登录和授权  /265
10.7  Shiro——Apache通用安全框架  /266
∣10.7.1  认识Shiro安全框架  /266
∣10.7.2  认识Shiro的核心组件  /267
10.8  【实例40】用Shiro实现管理后台的动态权限功能  /267
∣10.8.1  创建实体  /267
∣10.8.2  实现视图模板  /270
∣10.8.3  进行权限配置  /271
∣10.8.4  实现认证身份功能  /271
∣10.8.5  测试权限  /272
10.9   对比Spring Security与Shiro  /273
第11章  集成Redis，实现高并发  /275
11.1  认识Spring Cache  /275
∣11.1.1  声明式缓存注解  /276
∣11.1.2  【实例41】用Spring Cache进行缓存管理  /278
∣11.1.3  整合Ehcache  /281
∣11.1.4  整合Caffeine  /281
11.2  认识Redis  /282
∣11.2.1  对比Redis与Memcached  /282
∣11.2.2  Redis的适用场景  /285
11.3  Redis的数据类型  /285
11.4  用RedisTemplate操作Redis的5种数据类型  /287
∣11.4.1  认识opsFor方法  /287
∣11.4.2  【实例42】操作字符串  /287
∣11.4.3  【实例43】操作散列  /290
∣11.4.4  【实例44】操作列表  /294
∣11.4.5  【实例45】操作集合  /298
∣11.4.6  【实例46】操作有序集合  /301
∣11.4.7  比较RedisTemplate和StringRedisTemplate  /306
11.5  【实例47】用Redis和MyBatis完成缓存数据的增加、删除、修改、查询功能  /306
∣11.5.1  在Spring Boot中集成Redis  /306
∣11.5.2  配置Redis类  /307
∣11.5.3  创建测试实体类  /308
∣11.5.4  实现实体和数据表的映射关系  /309
∣11.5.5  创建Redis缓存服务层  /309
∣11.5.6  完成增、删、改、查测试API  /310
11.6  【实例48】用Redis和JPA实现缓存文章和点击量  /311
∣11.6.1  实现缓存文章  /311
∣11.6.2  实现统计点击量  /312
∣11.6.3  实现定时同步  /312
11.7  【实例49】实现分布式Session  /313
∣11.7.1  用Redis实现Session共享  /313
∣11.7.2  配置Nginx实现负载均衡  /314
第12章  集成RabbitMQ，实现系统间的数据交换  /316
12.1  认识RabbitMQ  /316
∣12.1.1  介绍RabbitMQ  /316
∣12.1.2  使用场景  /317
∣12.1.3  特性  /318
12.2  RabbitMQ的基本概念  /318
∣12.2.1  生产者、消费者和代理  /318
∣12.2.2  消息队列  /319
∣12.2.3  交换机  /319
∣12.2.4  绑定  /320
∣12.2.5  通道  /321
∣12.2.6  消息确认  /321
12.3  RabbitMQ的6种工作模式  /321
∣12.3.1  简单模式  /321
∣12.3.2  工作队列模式  /321
∣12.3.3  交换机模式  /322
∣12.3.4  Routing转发模式  /322
∣12.3.5  主题转发模式  /322
∣12.3.6  RPC模式  /323
12.4  认识AmqpTemplate接口  /323
∣12.4.1  发送消息  /324
∣12.4.2  接收消息  /324
∣12.4.3  异步接收消息  /325
12.5  在Spring Boot中集成RabbitMQ  /325
∣12.5.1  安装RabbitMQ  /325
∣12.5.2  界面化管理RabbitMQ  /326
∣12.5.3  在Spring Boot中配置RabbitMQ  /327
12.6  在Spring Boot中实现RabbitMQ的4种发送/接收模式  /328
∣12.6.1  【实例50】实现发送和接收队列  /328
∣12.6.2  【实例51】实现发送和接收对象  /330
∣12.6.3  【实例52】实现用接收器接收多个主题  /331
∣12.6.4  【实例53】实现广播模式  /334
12.7  【实例54】实现消息队列延迟功能  /336
第13章  集成NoSQL数据库，实现搜索引擎  /339
13.1  Elasticsearch——搜索应用服务器  /339
∣13.1.1  什么是搜索引擎  /339
∣13.1.2  用数据库实现搜索功能  /339
∣13.1.3  认识Elasticsearch  /343
∣13.1.4  Elasticsearch应用案例  /343
∣13.1.5  对比Elasticsearch与MySQL  /343
∣13.1.6  认识ElasticSearchRepository  /344
∣13.1.7  认识ElasticsearchTemplate  /345
∣13.1.8  认识注解@Document  /345
∣13.1.9  管理索引  /347
13.2  【实例55】用ELK管理Spring Boot应用程序的日志  /348
∣13.2.1  安装Elasticsearch  /348
∣13.2.2  安装Logstash  /349
∣13.2.3  安装Kibana  /350
∣13.2.4  配置Spring Boot项目  /350
∣13.2.5  创建日志计划任务  /351
∣13.2.6  用Kibana查看管理日志  /352
13.3  【实例56】在Spring Boot中集成Elasticsearch，实现增、删、改、查功能  /353
∣13.3.1  集成Elasticsearch  /353
∣13.3.2  创建实体  /353
∣13.3.3  实现增、删、改、查文档的功能  /355
13.4  Elasticsearch查询  /356
∣13.4.1  自定义方法  /356
∣13.4.2  精准查询  /357
∣13.4.3  模糊查询  /359
∣13.4.4  范围查询  /362
∣13.4.5  组合查询  /362
∣13.4.6  分页查询  /363
∣13.4.7  聚合查询  /364
13.5  【实例57】实现产品搜索引擎  /365
13.6  Solr——搜索应用服务器  /367
∣13.6.1  了解Solr  /367
∣13.6.2  安装配置Solr  /367
∣13.6.3  整合Spring Boot和Solr  /368
13.7  【实例58】在Sping Boot中集成Solr，实现数据的增、删、改和查  /369
∣13.7.1  创建User类  /369
∣13.7.2  测试增、删、改、查功能  /369
13.8  对比Elasticsearch和Solr  /372
∣
+++++++++项目实战篇
第14章  开发企业级通用的后台系统  /376
14.1  用JPA实现实体间的映射关系  /376
∣14.1.1  创建用户实体  /376
∣14.1.2  创建角色实体  /377
∣14.1.3  创建权限实体  /378
14.2  用Spring Security实现动态授权（RBAC）功能  /380
∣14.2.1  实现管理（增、删、改、查）管理员角色功能  /380
∣14.2.2  实现管理权限功能  /381
∣14.2.3  实现管理管理员功能  /383
∣14.2.4  配置安全类  /384
∣14.2.5  实现基于RBAC权限控制功能  /386
14.3  监控Spring Boot应用  /387
∣14.3.1  在Spring Boot中集成Actuator  /387
∣14.3.2  在Spring Boot中集成Spring Boot Admin应用监控  /390
∣14.3.3  在Spring Boot中集成Druid 连接池监控  /392
第15章  实现一个类似“京东”的电子商务商城  /394
15.1  用Spring Security实现会员系统  /394
∣15.1.1  实现会员实体  /394
∣15.1.2  实现会员接口  /395
∣15.1.3  实现用户名、邮箱、手机号多方式注册功能  /396
∣15.1.4  实现用RabbitMQ发送会员注册验证邮件  /398
∣15.1.5  实现用户名、邮箱、手机号多方式登录功能  /399
15.2  整合会员系统（Web、APP多端、多方式注册登录）和后台系统  /400
∣15.3  实现购物系统  /401
∣15.3.1  设计数据表  /401
∣15.3.2  实现商品展示功能  /402
∣15.3.3  实现购物车功能  /403
∣15.3.4  用Redis实现购物车数据持久化  /404
15.4  用Redis实现分布式秒杀系统  /406
∣15.4.1  实现抢购功能，解决并发超卖问题  /406
∣15.4.2  缓存页面和限流  /409
15.5  用RabbitMQ实现订单过期取消功能  /409
15.6  实现结算和支付功能  /411
∣15.6.1  实现结算生成订单功能  /411
∣15.6.2  集成支付  /412
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot实战派
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MyBatis从入门到精通
第1章  MyBatis入门	1
1.1  MyBatis简介	2
1.2  创建Maven项目	3
1.3　简单配置让MyBatis跑起来	7
1.3.1　准备数据库	8
1.3.2  配置MyBatis	8
1.3.3  创建实体类和Mapper.xml文件	10
1.3.4  配置Log4j以便查看MyBatis操作数据库的过程	11
1.3.5  编写测试代码让MyBatis跑起来	12
1.4  本章小结	14
第2章  MyBatis XML方式的基本用法	15
2.1  一个简单的权限控制需求	16
2.1.1  创建数据库表	16
2.1.2  创建实体类	19
2.2  使用XML方式	21
2.3  select用法	23
2.4  insert用法	35
2.4.1  简单的insert方法	35
2.4.2  使用JDBC方式返回主键自增的值	38
2.4.3  使用selectKey返回主键的值	40
2.5  update用法	42
2.6  delete用法	45
2.7  多个接口参数的用法	47
2.8  Mapper接口动态代理实现原理	50
2.9  本章小结	51
第3章  MyBatis注解方式的基本用法	53
3.1  @Select注解	54
3.1.1  使用mapUnderscoreToCamelCase配置	55
3.1.2  使用resultMap方式	55
3.2  @Insert注解	58
3.2.1  不需要返回主键	58
3.2.2  返回自增主键	58
3.2.3  返回非自增主键	59
3.3  @Update注解和@Delete注解	59
3.4  Provider注解	60
3.5  本章小结	61
第4章  MyBatis动态SQL	63
4.1  if用法	64
4.1.1  在WHERE条件中使用if	64
4.1.2  在UPDATE更新列中使用if	68
4.1.3  在INSERT动态插入列中使用if	70
4.2  choose用法	72
4.3  where、set、trim用法	75
4.3.1  where用法	75
4.3.2  set用法	76
4.3.3  trim用法	77
4.4  foreach用法	78
4.4.1  foreach实现in集合	78
4.4.2  foreach实现批量插入	81
4.4.3  foreach实现动态UPDATE	84
4.5  bind用法	86
4.6  多数据库支持	86
4.7  OGNL用法	89
4.8  本章小结	90
第5章  Mybatis代码生成器	91
5.1  XML配置详解	92
5.1.1  property标签	95
5.1.2  plugin标签	96
5.1.3  commentGenerator标签	97
5.1.4  jdbcConnection标签	99
5.1.5  javaTypeResolver标签	100
5.1.6  javaModelGenerator标签	101
5.1.7  sqlMapGenerator标签	102
5.1.8  javaClientGenerator标签	103
5.1.9  table标签	104
5.2  一个配置参考示例	109
5.3  运行MyBatis Generator	111
5.3.1  使用Java编写代码运行	111
5.3.2  从命令提示符运行	113
5.3.3  使用Maven Plugin运行	115
5.3.4  使用Eclipse插件运行	117
5.4  Example介绍	119
5.5  本章小结	124
第6章  MyBatis高级查询	125
6.1  高级结果映射	126
6.1.1  一对一映射	126
6.1.2  一对多映射	140
6.1.3  鉴别器映射	156
6.2  存储过程	159
6.2.1  第一个存储过程	162
6.2.2  第二个存储过程	164
6.2.3  第三个和第四个存储过程	166
6.2.4  在Oracle中使用游标参数的存储过程	168
6.3  使用枚举或其他对象	170
6.3.1  使用MyBatis提供的枚举处理器	170
6.3.2  使用自定义的类型处理器	172
6.3.3  对Java 8日期（JSR-310）的支持	175
6.4  本章小结	176
第7章  MyBatis缓存配置	177
7.1  一级缓存	178
7.2  二级缓存	181
7.2.1  配置二级缓存	181
7.2.2  使用二级缓存	184
7.3  集成EhCache缓存	187
7.4  集成Redis缓存	190
7.5  脏数据的产生和避免	191
7.6  二级缓存适用场景	194
7.7  本章小结	194
第8章  MyBatis插件开发	195
8.1  拦截器接口介绍	196
8.2  拦截器签名介绍	198
8.2.1  Executor接口	198
8.2.2  ParameterHandler接口	200
8.2.3  ResultSetHandler接口	201
8.2.4  StatementHandler接口	202
8.3  下画线键值转小写驼峰形式插件	203
8.4  分页插件	206
8.4.1  PageInterceptor拦截器类	207
8.4.2  Dialect接口	212
8.4.3  MySqlDialect实现	216
8.5  本章小结	220
第9章  Spring集成MyBatis	221
9.1  创建基本的Maven Web项目	222
9.2  集成Spring和Spring MVC	227
9.3  集成MyBatis	232
9.4  几个简单实例	234
9.4.1  基本准备	235
9.4.2  开发Mapper层（Dao层）	235
9.4.3  开发业务层（Service层）	238
9.4.4  开发控制层（Controller层）	240
9.4.5  开发视图层（View层）	242
9.4.6  部署和运行应用	245
9.5  本章小结	246
第10章  Spring Boot集成MyBatis	247
10.1  基本的Spring Boot项目	248
10.2  集成MyBatis	251
10.3  MyBatis Starter配置介绍	253
10.4  简单示例	255
10.4.1  引入simple依赖	255
10.4.2  开发业务（Service）层	258
10.4.3  开发控制（Controller）层	259
10.4.4  运行应用查看效果	259
10.5  本章小结	260
第11章  MyBatis开源项目	261
11.1  Git入门	262
11.1.1  初次运行配置	262
11.1.2  初始化和克隆仓库	263
11.1.3　本地操作	265
11.1.4  远程操作	267
11.2  GitHub入门	269
11.2.1  创建并提交到仓库	269
11.2.2  Fork仓库并克隆到本地	272
11.2.3  社交功能	275
11.3  MyBatis源码讲解	278
11.4  MyBatis测试用例	290
11.5  本章小结	293
附录  类型处理器（TypeHandler）	295
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MyBatis从入门到精通
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Java EE互联网轻量级框架整合开发
第1部分  入门和技术基础
第1章  认识SSM框架和Redis	2
1.1  Spring框架	2
1.1.1  Spring IoC简介	2
1.1.2  Spring AOP	4
1.2  MyBatis简介	6
1.2.1  Hibernate简介	7
1.2.2  MyBatis	8
1.2.3  Hibernate和MyBatis的区别	11
1.3  Spring MVC简介	11
1.4  最流行的NoSQL——Redis	12
1.5  SSM+Redis结构框图及概述	13
第2章  Java设计模式	15
2.1  Java反射技术	15
2.1.1  通过反射构建对象	15
2.1.2  反射方法	17
2.1.3  实例	18
2.2  动态代理模式和责任链模式	19
2.2.1  JDK动态代理	20
2.2.2  CGLIB动态代理	22
2.2.3  拦截器	24
2.2.4  责任链模式	28
2.3  观察者（Observer）模式	30
2.3.1  概述	31
2.3.2  实例	32
2.4  工厂模式和抽象工厂模式	35
2.4.1  普通工厂（Simple Factory）模式	35
2.4.2  抽象工厂（Abstract Factory）模式	36
2.5  建造者（Builder）模式	38
2.5.1  概述	38
2.5.2  Builder模式实例	39
2.6  总结	41
第2部分  互联网持久框架——MyBatis
第3章  认识MyBatis核心组件	44
3.1  持久层的概念和MyBatis的特点	44
3.2  准备MyBatis环境	45
3.3  MyBatis的核心组件	46
3.4  SqlSessionFactory（工厂接口）	47
3.4.1  使用XML构建SqlSessionFactory	48
3.4.2  使用代码创建SqlSessionFactory	50
3.5  SqlSession	50
3.6  映射器	51
3.6.1  用XML实现映射器	52
3.6.2  注解实现映射器	53
3.6.3  SqlSession发送SQL	54
3.6.4  用Mapper接口发送SQL	55
3.6.5  对比两种发送SQL方式	55
3.7  生命周期	55
3.7.1  SqlSessionFactoryBuilder	56
3.7.2  SqlSessionFactory	56
3.7.3  SqlSession	56
3.7.4  Mapper	56
3.8  实例	57
第4章  MyBatis配置	63
4.1  概述	63
4.2  properties属性	64
4.2.1  property子元素	64
4.2.2  使用properties文件	65
4.2.3  使用程序传递方式传递参数	66
4.2.4  总结	66
4.3  settings设置	66
4.4  typeAliases别名	69
4.4.1  系统定义别名	69
4.4.2  自定义别名	72
4.5  typeHandler类型转换器	72
4.5.1  系统定义的typeHandler	73
4.5.2  自定义typeHandler	78
4.5.3  枚举typeHandler	81
4.5.4  文件操作	86
4.6  ObjectFactory（对象工厂）	87
4.7  插件	89
4.8  environments（运行环境）	89
4.8.1  transactionManager（事务管理器）	90
4.8.2  environment数据源环境	92
4.9  databaseIdProvider数据库厂商标识	95
4.9.1  使用系统默认的databaseIdProvider	95
4.9.2  不使用系统规则	98
4.10  引入映射器的方法	99
第5章  映射器	102
5.1  概述	102
5.2  select元素——查询语句	103
5.2.1  简单的select元素的应用	104
5.2.2  自动映射和驼峰映射	105
5.2.3  传递多个参数	106
5.2.4  使用resultMap映射结果集	109
5.2.5  分页参数RowBounds	110
5.3  insert元素——插入语句	112
5.3.1  概述	112
5.3.2  简单的insert语句的应用	113
5.3.3  主键回填	113
5.3.4  自定义主键	114
5.4  update元素和delete元素	114
5.5  sql元素	115
5.6  参数	116
5.6.1  概述	116
5.6.2  存储过程参数支持	117
5.6.3  特殊字符串的替换和处理（#和$）	117
5.7  resultMap元素	118
5.7.1  resultMap元素的构成	118
5.7.2  使用map存储结果集	119
5.7.3  使用POJO存储结果集	119
5.8  级联	120
5.8.1  MyBatis中的级联	121
5.8.2  建立POJO	124
5.8.3  配置映射文件	127
5.8.4  N+1问题	133
5.8.5  延迟加载	133
5.8.6  另一种级联	137
5.8.7  多对多级联	140
5.9  缓存	143
5.9.1  一级缓存和二级缓存	144
5.9.2  缓存配置项、自定义和引用	147
5.10  存储过程	149
5.10.1  IN和OUT参数存储过程	150
5.10.2  游标的使用	152
第6章  动态SQL	155
6.1  概述	155
6.2  if元素	156
6.3  choose、when、otherwise元素	156
6.4  trim、where、set元素	157
6.5  foreach元素	159
6.6  用test的属性判断字符串	159
6.7  bind元素	160
第7章  MyBatis的解析和运行原理	162
7.1  构建SqlSessionFactory过程	163
7.1.1  构建Configuration	165
7.1.2  构建映射器的内部组成	165
7.1.3  构建SqlSessionFactory	167
7.2  SqlSession运行过程	168
7.2.1  映射器（Mapper）的动态代理	168
7.2.2  SqlSession下的四大对象	172
7.2.3  SqlSession运行总结	179
第8章  插件	181
8.1  插件接口	181
8.2  插件的初始化	182
8.3  插件的代理和反射设计	183
8.4  常用的工具类——MetaObject	186
8.5  插件开发过程和实例	187
8.5.1  确定需要拦截的签名	187
8.5.2  实现拦截方法	189
8.5.3  配置和运行	191
8.5.4  插件实例——分页插件	192
8.6  总结	205
第3部分  Spring基础
第9章  Spring IoC的概念	208
9.1  Spring的概述	208
9.2  Spring IoC概述	210
9.2.1  主动创建对象	211
9.2.2  被动创建对象	213
9.2.3  Spring IoC阐述	214
9.3  Spring IoC容器	215
9.3.1  Spring IoC容器的设计	215
9.3.2  Spring IoC容器的初始化和依赖注入	218
9.3.3  Spring Bean的生命周期	219
9.4  小结	223
第10章  装配Spring Bean	224
10.1  依赖注入的3种方式	224
10.1.1  构造器注入	224
10.1.2  使用setter注入	225
10.1.3  接口注入	226
10.2  装配Bean概述	227
10.3  通过XML配置装配Bean	228
10.3.1  装配简易值	228
10.3.2  装配集合	229
10.3.3  命名空间装配	233
10.4  通过注解装配Bean	235
10.4.1  使用@Component装配Bean	236
10.4.2  自动装配——@Autowired	239
10.4.3  自动装配的歧义性（@Primary和@Qualifier）	241
10.4.4  装载带有参数的构造方法类	244
10.4.5  使用@Bean装配Bean	245
10.4.6  注解自定义Bean的初始化和销毁方法	245
10.5  装配的混合使用	246
10.6  使用Profile	249
10.6.1  使用注解@Profile配置	249
10.6.2  使用XML定义Profile	250
10.6.3  启动Profile	252
10.7  加载属性（properties）文件	254
10.7.1  使用注解方式加载属性文件	254
10.7.2  使用XML方式加载属性文件	257
10.8  条件化装配Bean	258
10.9  Bean的作用域	259
10.10  使用Spring表达式（Spring EL）	261
10.10.1  Spring EL相关的类	261
10.10.2  Bean的属性和方法	264
10.10.3  使用类的静态常量和方法	265
10.10.4  Spring EL运算	265
第11章  面向切面编程	267
11.1  一个简单的约定游戏	267
11.1.1  约定规则	267
11.1.2  读者的代码	269
11.1.3  笔者的代码	271
11.2  Spring AOP的基本概念	274
11.2.1  AOP的概念和使用原因	274
11.2.2  面向切面编程的术语	278
11.2.3  Spring对AOP的支持	280
11.3  使用@AspectJ注解开发Spring AOP	280
11.3.1  选择切点	281
11.3.2  创建切面	281
11.3.3  连接点	283
11.3.4  测试AOP	285
11.3.5  环绕通知	287
11.3.6  织入	289
11.3.7  给通知传递参数	289
11.3.8  引入	290
11.4  使用XML配置开发Spring AOP	293
11.4.1  前置通知、后置通知、返回通知和异常通知	294
11.4.2  环绕通知	296
11.4.3  给通知传递参数	297
11.4.4  引入	298
11.5  经典Spring AOP应用程序	299
11.6  多个切面	301
11.7  小结	306
第12章  Spring和数据库编程	307
12.1  传统的JDBC代码的弊端	307
12.2  配置数据库资源	309
12.2.1  使用简单数据库配置	309
12.2.2  使用第三方数据库连接池	310
12.2.3  使用JNDI数据库连接池	310
12.3  JDBC代码失控的解决方案——jdbcTemplate	311
12.3.1  jdbcTemplate的增、删、查、改	312
12.3.2  执行多条SQL	314
12.3.3  jdbcTemplate的源码分析	315
12.4  MyBatis-Spring项目	317
12.4.1  配置SqlSessionFactoryBean	318
12.4.2  SqlSessionTemplate组件	322
12.4.3  配置MapperFactoryBean	324
12.4.4  配置MapperScannerConfigurer	324
12.4.5  测试Spring+MyBatis	327
第13章  深入Spring数据库事务管理	330
13.1  Spring数据库事务管理器的设计	331
13.1.1  配置事务管理器	333
13.1.2  用Java配置方式实现Spring数据库事务	334
13.2  编程式事务	336
13.3  声明式事务	337
13.3.1  Transactional的配置项	337
13.3.2  使用XML进行配置事务管理器	339
13.3.3  事务定义器	340
13.3.4  声明式事务的约定流程	341
13.4  数据库的相关知识	343
13.4.1  数据库事务ACID特性	343
13.4.2  丢失更新	343
13.4.3  隔离级别	344
13.5  选择隔离级别和传播行为	347
13.5.1  选择隔离级别	347
13.5.2  传播行为	348
13.6  在Spring+MyBatis组合中使用事务	350
13.7  @Transactional的自调用失效问题	358
13.8  典型错误用法的剖析	363
13.8.1  错误使用Service	363
13.8.2  过长时间占用事务	364
13.8.3  错误捕捉异常	366
第4部分  Spring MVC框架
第14章  Spring MVC的初始化和流程	370
14.1  MVC设计概述	370
14.1.1  Spring MVC的架构	372
14.1.2  Spring MVC组件与流程	372
14.1.3  Spring MVC入门的实例	374
14.2  Spring MVC初始化	378
14.2.1  初始化Spring IoC上下文	378
14.2.2  初始化映射请求上下文	379
14.2.3  使用注解配置方式初始化	386
14.3  Spring MVC开发流程详解	389
14.3.1  配置@RequestMapping	390
14.3.2  控制器的开发	391
14.3.3  视图渲染	396
14.4  小结	398
第15章  深入Spring MVC组件开发	399
15.1  控制器接收各类请求参数	399
15.1.1  接收普通请求参数	401
15.1.2  使用@RequestParam注解获取参数	402
15.1.3  使用URL传递参数	403
15.1.4  传递JSON参数	404
15.1.5  接收列表数据和表单序列化	406
15.2  重定向	409
15.3  保存并获取属性参数	412
15.3.1  注解@RequestAttribute	412
15.3.2  注解@SessionAttribute和注解@SessionAttributes	414
15.3.3  注解@CookieValue和注解@RequestHeader	417
15.4  拦截器	417
15.4.1  拦截器的定义	418
15.4.2  拦截器的执行流程	419
15.4.3  开发拦截器	419
15.4.4  多个拦截器执行的顺序	421
15.5  验证表单	424
15.5.1  使用JSR 303注解验证输入内容	425
15.5.2  使用验证器	429
15.6  数据模型	432
15.7  视图和视图解析器	434
15.7.1  视图	434
15.7.2  视图解析器	436
15.7.3  实例：Excel视图的使用	438
15.8  上传文件	441
15.8.1  MultipartResolver概述	442
15.8.2  提交上传文件表单	446
第16章  Spring MVC高级应用	449
16.1  Spring MVC的数据转换和格式化	449
16.1.1  HttpMessageConverter和JSON消息转换器	451
16.1.2  一对一转换器（Converter）	455
16.1.3  数组和集合转换器GenericConverter	458
16.1.4  使用格式化器（Formatter）	463
16.2  为控制器添加通知	466
16.3  处理异常	470
16.4  国际化	471
16.4.1  概述	471
16.4.2  MessageSource接口	473
16.4.3  CookieLocaleResolver和SessionLocaleResolver	475
16.4.4  国际化拦截器（LocaleChangeInterceptor）	477
16.4.5  开发国际化	477
第5部分  Redis应用
第17章  Redis概述	480
17.1  Redis在Java Web中的应用	481
17.1.1  缓存	481
17.1.2  高速读/写场合	482
17.2  Redis基本安装和使用	483
17.2.1  在Windows下安装Redis	483
17.2.2  在Linux下安装Redis	485
17.3  Redis的Java API	486
17.3.1  在Java程序中使用Redis	487
17.3.2  在Spring中使用Redis	488
17.4  简介Redis的6种数据类型	494
17.5  Redis和数据库的异同	495
第18章  Redis数据结构常用命令	496
18.1  Redis数据结构——字符串	497
18.2  Redis数据结构——哈希	502
18.3  Redis数据结构——链表（linked-list）	506
18.4  Redis数据结构——集合	513
18.5  Redis数据结构——有序集合	516
18.5.1  Redis基础命令	516
18.5.2  spring-data-redis对有序集合的封装	518
18.5.3  使用Spring操作有序集合	520
18.6  基数——HyperLogLog	522
18.7  小结	524
第19章  Redis的一些常用技术	525
19.1  Redis的基础事务	526
19.2  探索Redis事务回滚	528
19.3  使用watch命令监控事务	529
19.4  流水线（pipelined）	532
19.5  发布订阅	534
19.6  超时命令	538
19.7  使用Lua语言	540
19.7.1  执行输入Lua程序代码	541
19.7.2  执行Lua文件	544
19.8  小结	547
第20章  Redis配置	548
20.1  Redis基础配置文件	548
20.2  Redis备份（持久化）	549
20.3  Redis内存回收策略	552
20.4  复制	553
20.4.1  主从同步基础概念	553
20.4.2  Redis主从同步配置	554
20.4.3  Redis主从同步的过程	555
20.5  哨兵（Sentinel）模式	556
20.5.1  哨兵模式概述	557
20.5.2  搭建哨兵模式	558
20.5.3  在Java中使用哨兵模式	559
20.5.4  哨兵模式的其他配置项	563
第21章  Spring缓存机制和Redis的结合	565
21.1  Redis和数据库的结合	565
21.1.1  Redis和数据库读操作	566
21.1.2  Redis和数据库写操作	567
21.2  使用Spring缓存机制整合Redis	568
21.2.1  准备测试环境	568
21.2.2  Spring的缓存管理器	573
21.2.3  缓存注解简介	575
21.2.4  注解@Cacheable和@CachePut	576
21.2.5  注解@CacheEvict	580
21.2.6  不适用缓存的方法	581
21.2.7  自调用失效问题	582
21.3  RedisTemplate的实例	582
第6部分  SSM框架+Redis实践应用
第22章  高并发业务	586
22.1  互联系统应用架构基础分析	586
22.2  高并发系统的分析和设计	588
22.2.1  有效请求和无效请求	588
22.2.2  系统设计	590
22.2.3  数据库设计	591
22.2.4  动静分离技术	593
22.2.5  锁和高并发	594
22.3  搭建抢红包开发环境和超发现象	595
22.3.1  搭建Service层和DAO层	595
22.3.2  使用全注解搭建SSM开发环境	602
22.3.3  开发控制器和超发现象测试	609
22.4  悲观锁	611
22.5  乐观锁	614
22.5.1  CAS原理概述	614
22.5.2  ABA问题	615
22.5.3  乐观锁实现抢红包业务	616
22.5.4  乐观锁重入机制	618
22.6  使用Redis实现抢红包	621
22.6.1  使用注解方式配置Redis	621
22.6.2  数据存储设计	622
22.6.3  使用Redis实现抢红包	627
22.7  各类方式的优缺点	631
附录A  数据库表模型	633
附录B  DispatcherServlet流程源码分析	637
附录C  JSTL常用标签	648
附录D  spring data redis项目分析	660
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Java EE互联网轻量级框架整合开发
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入浅出MyBatis技术原理与实战
第1 章 MyBatis 简介   1
1.1 传统的JDBC 编程   1
1.2 ORM 模型 4
1.3 Hibernate   4
1.4 MyBatis     9
1.5 什么时候用MyBatis    12
第2 章 MyBaits 入门  13
2.1 开发环境准备.13
2.1.1 下载MyBatis   13
2.1.2 搭建开发环境  14
2.2 MyBatis 的基本构成    15
2.2.1 构建SqlSessionFactory    15
2.2.2 创建SqlSession19
2.2.3 映射器   21
2.3 生命周期.26
2.3.1 SqlSessionFactoryBuilder  27
2.3.2 SqlSessionFactory   27
2.3.3 SqlSession   27
2.3.4 Mapper   28
2.4 实例 28
第3 章 配置 37
3.1 properties 元素  38
3.1.1 property 子元素.38
3.1.2 properties 配置文件  39
3.1.3 程序参数传递  39
3.1.4 优先级   40
3.2 设置 41
3.3 别名 44
3.3.1 系统定义别名  44
3.3.2 自定义别名    47
3.4 typeHandler 类型处理器.48
3.4.1 系统定义的typeHandler   49
3.4.2 自定义typeHandler  51
3.4.3 枚举类型typeHandler55
3.5 ObjectFactory  62
3.6 插件 65
3.7 environments 配置环境  65
3.7.1 概述65
3.7.2 数据库事务    66
3.7.3 数据源   67
3.8 databaseIdProvider 数据库厂商标识   68
3.8.1 使用系统默认规则  68
3.8.2 不使用系统默认规则69
3.9 引入映射器的方法 71
第4 章 映射器    73
4.1 映射器的主要元素 73
4.2 select 元素    74
4.2.1 概述74
4.2.2 简易数据类型的例子75
4.2.3 自动映射.76
4.2.4 传递多个参数  78
4.2.5 使用resultMap 映射结果集    81
4.3 insert 元素    82
4.3.1 概述82
4.3.2 主键回填和自定义  83
4.4 update 元素和delete 元素    85
4.5 参数 85
4.5.1 参数配置.86
4.5.2 存储过程支持  86
4.5.3 特殊字符串替换和处理（#和$）    87
4.6 sql 元素  88
4.7 resultMap 结果映射集   89
4.7.1 resultMap 元素的构成    89
4.7.2 使用map 存储结果集91
4.7.3 使用POJO 存储结果集   91
4.7.4 级联92
4.8 缓存cache    113
4.8.1 系统缓存（一级缓存和二级缓存） 113
4.8.2 自定义缓存   117
第5 章 动态SQL     119
5.1 概述119
5.2 if 元素   120
5.3 choose、when、otherwise 元素  120
5.4 trim、where、set 元素 121
5.5 foreach 元素  123
5.6 test 的属性   124
5.7 bind 元素125
第6 章 MyBatis 的解析和运行原理 127
6.1 涉及的技术难点简介   128
6.1.1 反射技术129
6.1.2 JDK 动态代理.130
6.1.3 CGLIB 动态代理   133
6.2 构建SqlSessionFactory 过程134
6.2.1 构建Configuration  135
6.2.2 映射器的内部组成 136
6.2.3 构建SqlSessionFactory   138
6.3 SqlSession 运行过程   138
6.3.1 映射器的动态代理 138
6.3.2 SqlSession 下的四大对象.142
6.3.3 SqlSession 运行总结150
第7 章 插件.152
7.1 插件接口152
7.2 插件的初始化153
7.3 插件的代理和反射设计154
7.4 常用的工具类——MetaObject   157
7.5 插件开发过程和实例   159
7.5.1 确定需要拦截的签名    159
7.5.2 实现拦截方法.161
7.5.3 配置和运行   162
7.5.4 插件实例163
7.6 总结166
第8 章 MyBatis-Spring   168
8.1 Spring 的基础知识.168
8.1.1 Spring IOC 基础    169
8.1.2 Spring AOP 基础   171
8.1.3 Spring 事务管理    173
8.1.4 Spring MVC 基础   179
8.2 MyBatis-Spring 应用   181
8.2.1 概述    181
8.2.2 配置SqlSessionFactory   182
8.2.3 配置SqlSessionTemplate  184
8.2.4 配置Mapper  188
8.2.5 配置事务190
8.3 实例191
8.3.1 环境准备191
8.3.2 文件目录193
8.3.3 Spring 配置文件    194
8.3.4 MyBatis 框架相关配置   198
8.3.5 配置服务层   205
8.3.6 编写控制器   209
8.3.7 测试    210
8.4 总结210
第9 章 实用的场景   212
9.1 数据库BLOB 字段读写    212
9.2 批量更新215
9.3 调用存储过程217
9.3.1 存储过程in 和out 参数的使用217
9.3.2 存储过程游标.220
9.4 分表225
9.5 分页227
9.5.1 RowBounds 分页   227
9.5.2 插件分页229
9.6 上传文件到服务器239
9.7 在映射中使用枚举247
9.8 多对多级联  249
9.9 总结253
附录A 数据库模型描述与级联学生关系建表语句.254
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入浅出MyBatis技术原理与实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring+MyBatis企业应用实战
第1章　Java EE应用	1
1.1　Java EE应用概述	2
1.1.1　Java EE应用的分层模型	2
1.1.2　Java EE应用的组件	3
1.1.3　Java EE应用的结构和优势	4
1.2　轻量级Java EE应用相关技术	4
1.2.1　JSP、Servlet和JavaBean及替代技术	4
1.2.2　MyBatis3及替代技术	5
1.2.3　Spring4及替代技术	6
1.2.4　使用开源框架的好处	7
1.3　本章小结	7
第2章　Spring MVC简介	8
2.1　MVC思想概述	9
2.1.1　传统Model1和Model2	9
2.1.2　MVC思想及其优势	10
2.2　Struts2和Spring MVC	11
2.3　开发第一个Spring MVC应用	11
2.3.1　Spring的下载和安装	11
2.3.2　Spring MVC的DispatcherServlet	12
2.3.3　基于Controller接口的控制器	13
示例：第一个Spring MVC应用	13
示例：基于注解的控制器	17
2.4　详解DispatcherServlet	19
2.5　Spring MVC执行的流程	21
2.5.1　Spring MVC应用的开发步骤	22
2.5.2　Spring MVC执行的流程	23
2.6　本章小结	24
第3章　Spring MVC的常用注解	25
3.1　@Controller注解	26
示例：@Controller注解的使用	26
3.2　@RequestMapping注解	28
3.2.1　@RequestMapping注解	28
3.2.2　请求处理方法可出现的参数类型	30
3.2.3　请求处理方法可返回的类型	31
3.2.4　Model和ModelAndView	31
示例：Model和ModelMap的使用	32
示例：ModelAndView的使用	33
3.3　参数绑定注解	33
3.3.1　@RequestParam注解	33
示例：@RequestMapping和@RequestParam注解的使用	34
3.3.2　@PathVariable注解	38
3.3.3　@RequestHeader注解	38
3.3.4　@CookieValue注解	39
示例：@PathVariable、@RequestHeader和@CookieValue注解的使用	39
3.3.5　@SessionAttributes注解	41
示例：@SessionAttributes注解的使用	41
3.3.6　@ModelAttribute注解	42
示例：@ModelAttribute注解的使用	43
3.4　信息转换	49
3.4.1　HttpMessageConverter＜T＞接口	49
3.4.2　转换JSON数据	51
示例：接收JSON格式的数据	51
示例：自定义HttpMessageConverter接收JSON格式的数据	55
示例：返回JSON格式的数据	57
示例：自定义HttpMessageConverter返回JSON格式的数据	58
3.4.3　转换XML数据	59
示例：接收XML格式的数据	59
示例：返回XML格式的数据	61
3.5　本章小结	62
第4章　Spring MVC的标签库	64
4.1　表单标签库	65
4.1.1　form标签	65
4.1.2　input标签	66
示例：form和input标签的使用	66
4.1.3　password标签	68
4.1.4　hidden标签	69
4.1.5　textarea标签	69
4.1.6　checkbox标签	70
示例：checkbox标签的使用	70
4.1.7　checkboxes标签	71
示例：checkboxes标签的使用	72
4.1.8　radiobutton标签	76
示例：radiobutton标签的使用	76
4.1.9　radiobuttons标签	77
示例：radiobuttons标签的使用	77
4.1.10　select标签	79
4.1.11　option标签	79
4.1.12　options标签	79
示例：select、option和options标签的使用	80
4.1.13　errors标签	83
示例：errors标签的使用	84
4.2　本章小结	86
第5章　Spring MVC的国际化	87
5.1　Spring MVC国际化的相关知识	88
5.1.1　messageSource	88
5.1.2　localeResolver	88
5.1.3　message标签	89
5.2　AcceptHeaderLocaleResolver国际化	89
示例：基于浏览器请求的国际化实现	89
5.3　SessionLocaleResolver国际化	92
示例：基于HttpSession的国际化实现	93
5.4　CookieLocaleResolver国际化	95
示例：基于Cookie的国际化实现	95
5.5　本章小结	96
第6章　Spring MVC的数据转换、格式化和数据校验	97
6.1　数据绑定流程	98
6.2　数据转换	98
6.2.1　ConversionService	98
6.2.2　Spring支持的转换器	99
示例：使用ConversionService转换数据	100
示例：使用@InitBinder添加自定义编辑器转换数据	103
示例：使用WebBindingInitializer注册全局自定义编辑器转换数据	103
6.2.3 多种转换器的优先顺序	104
6.3　数据格式化	104
示例：使用Formatter格式化数据	105
示例：使用FormatterRegistrar注册Formatter	107
示例：使用AnnotationFormatterFactory＜A extends Annotation＞格式化数据	108
6.4　数据校验	110
6.4.1　Spring的Validation校验框架	111
示例：测试Spring的Validation校验	112
6.4.2　JSR 303校验	114
示例：测试JSR 303校验	115
6.5　本章小结	120
第7章　Spring MVC的文件上传和下载	121
7.1　文件上传	122
示例：Spring MVC的文件上传	122
示例：使用对象接收上传文件	124
7.2　文件下载	125
示例：Spring MVC的文件下载	125
7.3　拦截器	126
7.3.1　HandlerInterceptor接口	127
示例：拦截器实现用户权限验证	127
7.4　本章小结	131
第8章　MyBatis简介	132
8.1　ORM和MyBatis	133
8.1.1　对象/关系数据库映射（ORM）	133
8.1.2　基本映射方式	134
8.1.3　流行的ORM框架简介	135
8.1.4　MyBatis概述	135
8.2　MyBatis入门	136
8.2.1　MyBatis下载和安装	136
8.2.2　MyBatis的数据库操作	137
8.3　本章小结	142
第9章　MyBatis的基本用法	143
9.1　MyBatis的体系结构	144
9.1.1　SqlSessionFactory	144
9.1.2　SqlSession	144
9.2　深入MyBatis的配置文件	146
9.2.1　MyBatis的配置文件结构	147
9.2.2　properties属性	147
9.2.3　settings设置	148
9.2.4　typeAliases类型命名	150
9.2.5　typeHandlers类型处理器	151
9.2.6　objectFactory对象工厂	152
9.2.7　environments配置环境	152
9.2.8　mapper映射器	154
9.3　深入Mapper XML映射文件	155
9.3.1　select	155
9.3.2　insert、update和delete	157
9.3.3　sql	158
9.3.4　参数（Parameters）	159
示例：测试select、insert、update和delete操作	159
9.3.5　ResultMaps	163
示例：测试ResultMaps	163
9.4　本章小结	169
第10章　MyBatis的关联映射和动态SQL	170
10.1　MyBatis的关联映射	171
10.1.1　一对一	171
示例：OneToOneTest	171
10.1.2　一对多	174
示例：OneToManyTest	174
10.1.3　多对多	179
示例：ManyToManyTest	179
10.2　动态SQL	185
示例：DynamicSQLTest	185
10.2.1　if	186
10.2.2　choose（when、otherwise）	188
10.2.3　where	190
10.2.4　set	191
10.2.5　foreach	192
10.2.6　bind	193
10.3　本章小结	194
第11章　MyBatis的事务管理和缓存机制	195
11.1　MyBatis的事务管理	196
11.1.1　事务的概念	196
11.1.2　Transaction接口	196
11.1.3　事务的配置创建和使用	197
11.2　MyBatis的缓存机制	201
11.2.1　一级缓存（SqlSession级别）	201
示例OneLevelCacheTest	201
11.2.2　二级缓存（mapper级别）	204
示例：TwoLevelCacheTest	204
11.3　本章小结	207
第12章　MyBatis的注解配置	208
12.1　常用Annotation注解	209
12.2　Annotation注解的使用	209
示例：测试select、insert、update和delete操作	210
示例：AOneToOneTest	213
示例：AOneToManyTest	215
示例：AManyToManyTest	216
示例：ADynamicSQLTest	218
12.3　本章小结	224
第13章　Spring4整合MyBatis3	225
13.1　开发环境搭建	226
13.2　准备所需的jar包	226
13.3　准备数据库资源	226
13.4　完成配置文件	227
13.5　持久层功能实现	229
13.6　服务层功能实现	230
13.7　控制层功能实现	232
13.8　jsp页面	233
13.9　测试Spring4整合MyBatis3	234
13.10　本章小结	235
第14章　实战项目：人事管理系统	236
14.1　项目简介及系统结构	237
14.1.1　系统功能介绍	237
14.1.2　相关技术介绍	238
14.1.3　系统结构	238
14.1.4　系统的功能模块	239
14.2　数据表和持久化类	239
14.2.1　设计数据库表	239
14.2.2　设计持久化实体	241
14.2.3　创建持久化实体类	242
14.3　实现DAO持久层	248
14.3.1　公共常量类	249
14.3.2　定义DAO接口	249
14.3.3　部署DAO层	263
14.4　实现Service持久层	264
14.4.1　业务逻辑组件的设计	264
14.4.2　实现业务逻辑组件	264
14.4.3　事务管理	279
14.4.4　部署业务逻辑组件	279
14.5　实现Web层	280
14.5.1　控制器的处理顺序	280
14.5.2　用户管理	283
14.5.3　部门管理	287
14.5.4　职位管理	290
14.5.5　员工管理	292
14.5.6　公告管理	296
14.5.7　下载中心	299
14.6　本章小结	303
附录A　EL表达式和JSTL标签库	304
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring+MyBatis企业应用实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>互联网轻量级SSM框架解密
第1篇  深入剖析Spring源码
第1章  Spring基础介绍  2
1.1  Spring的核心结构  2
1.2  Spring的领域模型  6
第2章  Spring上下文和容器  7
2.1  Spring上下文的设计  7
2.2  Spring容器BeanFactory的设计  11
2.3  Spring父子上下文与容器  13
第3章  Spring加载机制的设计与实现  18
3.1  Spring ApplicationContext的加载及源码实现  18
3.2  Spring XML文件标签加载解析及自定义  27
3.3  Spring注解的加载及自动注入  31
第4章  Spring Bean探秘  45
4.1  Spring Bean的定义和注册设计  45
4.2  Spring Bean的定义模型  47
4.3  Spring Bean的运行（获取、创建）实现  48
4.4  Spring Bean的依赖注入的实现  59
4.5  Spring Bean的初始化  70
第5章  Spring代理与AOP  74
5.1  Spring代理的设计及JDK、CGLIB动态代理  75
5.2  Spring AOP的设计  82
5.3  Spring AOP的加载和执行机制  83
5.3.1  Spring AOP的加载及源码解析  83
5.3.2  Spring AOP的创建执行及源码解析  88
5.4  Spring事务管理设计及源码  101
5.5  Spring事务传播机制  115
第6章  Spring实战  118
6.1  对Spring重复AOP问题的分析  118
6.2  Spring Bean循环依赖的问题  125
第2篇  深入剖析Spring MVC源码
第7章  MVC简介  138
7.1  MVC的体系结构和工作原理  138
7.1.1  控制器  139
7.1.2  视图  139
7.1.3  模型  140
7.2  Web MVC的体系结构和工作原理  140
第8章  Spring Web MVC工作流  142
8.1  组件及其接口  142
8.1.1  DispatcherServlet  143
8.1.2  处理器映射  143
8.1.3  处理器适配器  144
8.1.4  处理器与控制器  145
8.1.5  视图解析器  145
8.1.6  视图  146
8.2  组件间的协调通信  146
第9章  DispatcherServlet的实现  148
9.1  深入剖析GenericServlet和HttpServlet  150
9.1.1  HTTP和Servlet规范简介  150
9.1.2  Servlet和GenericServlet详解  152
9.1.3  HttpServlet详解  152
9.2  深入剖析DispatcherServlet  159
9.2.1  HttpServletBean详解  161
9.2.2  FrameworkServlet详解  162
9.2.3  DispatchServlet详解  166
9.3  根共享环境的加载  182
9.3.1  基于Servlet环境监听器的实现结构  182
9.3.2  多级Spring环境的加载方式  189
第10章  基于简单控制器的流程实现  194
10.1  通过Bean名称URL处理器映射获取处理器执行链  194
10.1.1  抽象处理器映射  196
10.1.2  抽象URL处理器映射  199
10.1.3  抽象探测URL处理器映射  209
10.1.4  Bean名称URL处理器映射  210
10.2  通过处理器适配器把请求转接给处理器  211
10.2.1  简单控制处理适配器的设计  211
10.2.2  表单控制器处理HTTP请求的流程  212
10.3  对控制器类体系结构的深入剖析  214
10.3.1  Web内容产生器  215
10.3.2  抽象控制器类  217
10.3.3  基本命令控制器  218
10.3.4  抽象表单控制器  222
10.3.5  简单表单控制器  229
第11章  基于注解控制器的流程实现  230
11.1  默认注解处理器映射的实现  230
11.2  注解处理器适配器的架构设计  237
11.3  深入剖析注解控制器的处理流程  238
11.3.1  解析处理器方法  241
11.3.2  解析处理器方法的参数  253
11.3.3  绑定、初始化领域模型和管理领域模型  272
11.3.4  调用处理器方法  278
11.3.5  处理方法返回值和隐式模型到模型或视图的映射  281
11.3.6  如何更新模型数据  286
第12章  基于HTTP请求处理器实现RPC  288
12.1  深入剖析RPC客户端的实现  289
12.2  深入剖析RPC服务端的实现  299
第13章  深入剖析处理器映射、处理器适配器及处理器的实现  311
13.1  处理器映射的实现架构  311
13.1.1  处理器映射实现类  312
13.1.2  处理器映射抽象类  313
13.1.3  对处理器映射类的代码剖析  315
13.2  处理器适配器的实现架构  322
13.3  深入剖析处理器  325
13.3.1  简单控制器  325
13.3.2  注解控制器  339
13.3.3  HTTP请求处理器  342
13.4  拦截器的实现架构  344
第14章  视图解析和视图显示  353
14.1  基于URL的视图解析器和视图  353
14.1.1  内部资源视图解析器和内部资源视图  365
14.1.2  瓦块视图解析器和瓦块视图  371
14.1.3  模板视图解析器和模板视图  373
14.1.4  XSLT视图解析器和XSLT视图  377
14.2  更多的视图解析器  378
14.2.1  Bean名称视图解析器  378
14.2.2  内容选择视图解析器  379
14.2.3  资源绑定视图解析器  383
14.2.4  XML视图解析器  385
第3篇  深入剖析MyBatis源码
第15章  MyBatis介绍  388
15.1  MyBatis的历史  388
15.2  MyBatis子项目  389
15.3  MyBatis的自身定位  389
15.3.1  JPA持久化框架  390
15.3.2  MyBatis的功能  390
15.3.3  MyBatis与JPA的异同  390
15.4  MyBatis的架构  391
15.4.1  模块  391
15.4.2  MyBatis的项目包  392
第16章  构建阶段  394
16.1  关键类  394
16.2  关键时序  395
16.3  构建的入口：SqlSessionFactoryBuilder和SqlSessionFactory  396
16.4  配置（Configuration）和配置构造器（XmlConfigBuilder）  397
16.4.1  XmlConfigBuilder的初始化  397
16.4.2  完整的mybatis-3-config.dtd  399
16.4.3  解析配置文件构建Configuration配置  399
16.5  SQL简介  418
16.6  SQL映射的构建  419
16.6.1  通过XML定义的SQL Mapper  419
16.6.2  Configuration类中与SQL Mapping相关的类  420
16.6.3  XmlMapperBuilder是如何工作的  421
16.6.4  映射注解器定义的SQL Mapper  438
16.6.5  小结  440
第17章  执行阶段  441
17.1  关键类  441
17.2  关键接口及默认实现初始化  442
17.2.1  SqlSession及其关联类的构建过程  442
17.2.2  StatementHandler语句处理器  446
17.3  DQL语句是如何执行的  448
17.3.1  查询接口  448
17.3.2  关键时序  449
17.3.3  程序执行查询的入口：DefaultSqlSession#selectList(statement)  450
17.3.4  生成执行语句：getMappedStatement()  450
17.3.5  执行器查询：Executor#query()  451
17.3.6  JDBC执行语句：SimpleStatementHandler#query()  455
17.3.7  结果集处理：DefaultResultSetHandler#handlerResultSets()  455
17.4  DML语句是如何执行的  460
17.4.1  操作接口  460
17.4.2  关键时序  460
17.4.3  程序执行更新的入口：DefaultSqlSession#update()  461
17.4.4  执行器执行方法：Executor#update()  461
17.4.5  SQL语句执行：SimpleStatementHandler#update()  464
17.4.6  结果集主键逻辑：Jdbc3KeyGenerator#processAfter()  464
17.5  小结  466
第18章  专题特性解析  467
18.1  动态SQL支持  467
18.1.1  XmlScriptBuilder解析配置  467
18.1.2  NodeHandler构建SqlNode树  468
18.1.3  SqlNode处理SQL语句  471
18.2  MyBatis的缓存支持  477
18.2.1  本地缓存  478
18.2.2  二级缓存  482
18.3  结果集支持：Object、List、Map和Cursor  491
18.4  自定义扩展点及接口  496
第19章  作为中间件如何承上启下  498
19.1  MyBatis与底层的JDBC  498
19.1.1  java.sql.DataSource  498
19.1.2  java.sql.Connection  499
19.1.3  java.sql.Statement  500
19.1.4  java.sql.Resultset  502
19.2  MyBatis的主流集成方式  502
19.2.1  mybatis-spring简介  502
19.2.2  Spring对JDBC的支持  502
19.2.3  mybatis-spring与Spring  504
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>互联网轻量级SSM框架解密
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MyBatis 3源码深度解析
目   录
第1篇   MyBatis 3源码
第1章  搭建MyBatis源码环境 3
1.1  MYBATIS 3简介 3
1.2  环境准备 4
1.3  获取MYBATIS源码 4
1.4  导入MYBATIS源码到IDE 6
1.5  HSQLDB数据库简介 9
1.6  本章小结 11
第2章  JDBC规范详解 13
2.1  JDBC API简介 13
2.1.1  建立数据源连接 14
2.1.2  执行SQL语句 15
2.1.3  处理SQL执行结果 16
2.1.4  使用JDBC操作数据库 16
2.2  JDBC API中的类与接口 17
2.2.1  java.sql包详解 17
2.2.2  javax.sql包详解 20
2.3  CONNECTION详解 24
2.3.1  JDBC驱动类型 24
2.3.2  java.sql.Driver接口 26
2.3.3  Java SPI机制简介 27
2.3.4  java.sql.DriverAction接口 29
2.3.5  java.sql.DriverManager类 29
2.3.6  javax.sql.DataSource接口 31
2.3.7  使用JNDI API增强应用的可移植性 32
2.3.8  关闭Connection对象 34
2.4  STATEMENT详解 35
2.4.1  java.sql.Statement接口 35
2.4.2  java.sql.PreparedStatement接口 39
2.4.3  java.sql.CallableStatement接口 43
2.4.4  获取自增长的键值 44
2.5  RESULTSET详解 45
2.5.1  ResultSet类型 45
2.5.2  ResultSet并行性 46
2.5.3  ResultSet可保持性 46
2.5.4  ResultSet属性设置 47
2.5.5  ResultSet游标移动 47
2.5.6  修改ResultSet对象 48
2.5.7  关闭ResultSet对象 50
2.6  DATABASEMETADATA详解 51
2.6.1  创建DatabaseMetaData对象 51
2.6.2  获取数据源的基本信息 51
2.6.3  获取数据源支持特性 53
2.6.4  获取数据源限制 53
2.6.5  获取SQL对象及属性 54
2.6.6  获取事务支持 54
2.7  JDBC事务 54
2.7.1  事务边界与自动提交 55
2.7.2  事务隔离级别 55
2.7.3  事务中的保存点 56
2.8  本章小结 57
第3章  MyBatis常用工具类 58
3.1  使用SQL类生成语句 58
3.2  使用SCRIPTRUNNER执行脚本 64
3.3  使用SQLRUNNER操作数据库 67
3.4  METAOBJECT详解 71
3.5  METACLASS详解 72
3.6  OBJECTFACTORY详解 73
3.7  PROXYFACTORY详解 74
3.8  本章小结 75
第4章  MyBatis核心组件介绍 76
4.1  使用MYBATIS操作数据库 76
4.2  MYBATIS核心组件 80
4.3  CONFIGURATION详解 82
4.4  EXECUTOR详解 88
4.5  MAPPEDSTATEMENT详解 90
4.6  STATEMENTHANDLER详解 92
4.7  TYPEHANDLER详解 94
4.8  PARAMETERHANDLER详解 97
4.9  RESULTSETHANDLER详解 98
4.10  本章小结 100
第5章  SqlSession的创建过程 101
5.1  XPATH方式解析XML文件 101
5.2  CONFIGURATION实例创建过程 104
5.3  SQLSESSION实例创建过程 108
5.4  本章小结 109
第6章  SqlSession执行Mapper过程 110
6.1  MAPPER接口的注册过程 110
6.2  MAPPEDSTATEMENT注册过程 114
6.3  MAPPER方法调用过程详解 119
6.4  SQLSESSION执行MAPPER过程 126
6.5  本章小结 130
第7章  MyBatis缓存 131
7.1  MYBATIS缓存的使用 131
7.2  MYBATIS缓存实现类 132
7.3  MYBATIS一级缓存实现原理 135
7.4  MYBATIS二级缓存实现原理 138
7.5  MYBATIS使用REDIS缓存 142
7.6  本章小结 145
第8章  MyBatis日志实现 146
8.1  JAVA日志体系 146
8.2  MYBATIS日志实现 149
8.3  本章小结 155
第9章  动态SQL实现原理 156
9.1  动态SQL的使用 156
9.2  SQLSOURCE与BOUNDSQL详解 159
9.3  LANGUAGEDRIVER详解 161
9.4  SQLNODE详解 164
9.5  动态SQL解析过程 169
9.6  从源码角度分析#{}和${}的区别 179
9.7  本章小结 182
第10章  MyBatis插件原理及应用 184
10.1  MYBATIS插件实现原理 184
10.2  自定义一个分页插件 193
10.3  自定义慢SQL统计插件 198
10.4  本章小结 200
第11章  MyBatis级联映射与懒加载 201
11.1  MYBATIS级联映射详解 201
11.1.1  准备工作 201
11.1.2  一对多关联映射 205
11.1.3  一对一关联映射 206
11.1.4  Discriminator详解 209
11.2  MYBATIS懒加载机制 210
11.3  MYBATIS级联映射实现原理 212
11.3.1  ResultMap详解 212
11.3.2  ResultMap解析过程 213
11.3.3  级联映射实现原理 218
11.4  懒加载实现原理 225
11.5  本章小结 230
第2篇  MyBatis Spring源码
第12章  MyBatis与Spring整合案例 233
12.1  准备工作 233
12.2  MYBATIS与SPRING整合 234
12.3  用户注册案例 236
12.4  本章小结 239
第13章  MyBatis Spring的实现原理 240
13.1  SPRING中的一些概念 240
13.2  SPRING容器启动过程 243
13.3  MAPPER动态代理对象注册过程 244
13.4  MYBATIS整合SPRING事务管理 248
13.5  本章小结 253
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MyBatis 3源码深度解析
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring+MyBatis企业应用实战（第2版）
第1章  Java EE应用  1
1.1  Java EE应用概述  2
1.1.1  Java EE应用的分层模型  2
1.1.2  Java EE应用的组件  3
1.1.3  Java EE应用的结构和优势  4
1.2  轻量级Java EE应用相关技术  4
1.2.1  JSP、Servlet和JavaBean及替代技术  4
1.2.2  MyBatis 3及替代技术  5
1.2.3  Spring 5及替代技术  6
1.2.4  使用开源框架的好处  7
1.3  本章小结  7
第2章  Spring MVC简介  8
2.1  MVC思想概述  9
2.1.1  传统Model1和Model2  9
2.1.2  MVC思想及其优势  10
2.2  Struts 2和Spring MVC  11
2.2.1  Spring MVC的优势  11
2.2.2  Spring MVC和Struts 2的区别  11
2.3  开发第一个Spring MVC应用  12
2.3.1  Spring的下载和安装  12
2.3.2  Spring MVC的DispatcherServlet  13
2.3.3  基于Controller接口的控制器  14
示例：第一个Spring MVC应用  14
示例：基于注解的控制器  18
2.4  详解DispatcherServlet  20
2.5  Spring MVC执行的流程  22
2.5.1  Spring MVC应用的开发步骤  22
2.5.2  Spring MVC执行的流程  24
2.6  本章小结  25
第3章  Spring MVC的常用注解  26
3.1  @Controller注解  27
示例：@Controller注解的使用  27
3.2  @RequestMapping注解  29
3.2.1  @RequestMapping注解简介  29
3.2.2  请求处理方法中可出现的参数类型  32
3.2.3  请求处理方法可返回的类型  33
3.2.4  Model和ModelMap  33
示例：Model和ModelMap的使用  34
3.2.5  ModelAndView  35
示例：ModelAndView的使用  35
3.2.6  页面转发  35
3.3  @RequestParam注解  36
示例：@RequestMapping和@RequestParam注解的使用  37
3.4  @PathVariable注解  41
3.5  @MatrixVariable注解  42
3.6  @CrossOrigin注解  42
示例：@PathVariable注解和@MatrixVariable注解的使用  43
示例：@CrossOrigin注解的使用  45
3.7  @RequestHeader注解  46
示例：@RequestHeader注解的使用  47
3.8  @CookieValue注解  48
示例：@CookieValue注解的使用  49
3.9  @RequestAttribute注解  50
3.10  @SessionAttribute注解  50
示例：@RequestAttribute注解和@SessionAttribute注解的使用  51
3.11  @SessionAttributes注解  53
示例：@SessionAttributes注解的使用  53
3.12  @ModelAttribute注解  55
示例：@ModelAttribute注解的使用  55
3.13  @RequestBody注解  62
3.13.1  HttpMessageConverter<T>接口  62
3.13.2  转换JSON数据  64
示例：@RequestBody接收JSON格式的数据  65
示例：自定义HttpMessageConverter接收JSON格式的数据  68
3.14  @ResponseBody注解  70
示例：@ResponseBody返回JSON格式的数据  70
示例：自定义HttpMessageConverter返回JSON格式的数据  72
3.15  转换XML数据  72
示例：接收XML格式的数据  72
示例：返回XML格式的数据  75
3.16  @RestController注解  76
示例：@RestController注解的使用  76
3.17  Spring MVC的异常处理  77
3.17.1  Spring MVC异常处理接口以及实现类  77
示例：SimpleMappingExceptionResolver处理异常  78
3.17.2  @ResponseStatus注解  82
示例：@ResponseStatus处理异常  82
3.17.3  @ExceptionHandle注解  84
示例：@ExceptionHandler处理异常  84
3.17.4  @ControllerAdvice注解  87
示例：@ControllerAdvice处理异常  87
3.17.5  @RestControllerAdvice注解  91
示例：@RestControllerAdvice注解的使用  91
3.18  本章小结  92
第4章  Spring MVC的标签库  93
4.1  表单标签库  94
4.1.1  form标签  94
4.1.2  input标签  95
示例：form和input标签的使用  95
4.1.3  password标签  97
4.1.4  hidden标签  98
4.1.5  textarea标签  98
4.1.6  checkbox标签  99
示例：checkbox标签的使用  99
4.1.7  checkboxes标签  101
示例：checkboxes标签的使用  101
4.1.8  radiobutton标签  105
示例：radiobutton标签的使用  105
4.1.9  radiobuttons标签  106
示例：radiobuttons标签的使用  107
4.1.10  select标签  108
4.1.11  option标签  109
4.1.12  options标签  109
示例：select、option和options标签的使用  109
4.1.13  errors标签  113
示例：errors标签的使用  114
4.2  本章小结  116
第5章  Spring MVC的国际化  117
5.1  Spring MVC国际化的相关知识  118
5.1.1  messageSource接口  118
5.1.2  localeResolver接口  118
5.1.3  message标签  119
5.2  Spring MVC的国际化处理  119
5.2.1  AcceptHeaderLocaleResolver  119
示例：基于浏览器请求的国际化实现  119
5.2.2  SessionLocaleResolver  122
示例：基于HttpSession的国际化实现  123
5.2.3  CookieLocaleResolver  125
示例：基于Cookie的国际化实现  125
5.3  本章小结  127
第6章  Spring MVC的数据转换、格式化和
数据校验  128
6.1  数据绑定流程  129
6.2  数据转换  129
6.2.1  ConversionService  129
6.2.2  Spring支持的转换器  130
示例：使用ConversionService转换数据  131
示例：使用@InitBinder添加自定义编辑器转换数据  134
示例：使用WebBindingInitializer注册全局自定义编辑器转换数据  135
6.2.3  多种转换器的优先顺序  135
6.3  数据格式化  136
示例：使用Formatter格式化数据  137
示例：使用FormatterRegistrar注册Formatter  138
示例：使用AnnotationFormatterFactory<A extends Annotation>格式化数据  139
6.4  数据校验  142
6.4.1  Spring的Validation校验框架  143
示例：测试Spring的Validation校验  143
6.4.2  JSR 303校验  146
示例：测试JSR 303校验  147
6.5  本章小结  152
第7章  Spring MVC的文件上传下载和
拦截器机制  153
7.1  文件上传  154
示例：Spring MVC的文件上传  154
示例：使用对象接收上传文件  157
7.2  文件下载  158
示例：Spring MVC的文件下载  158
7.3  拦截器  160
7.3.1  HandlerInterceptor接口  160
示例：拦截器实现用户权限验证  161
7.4  本章小结  164
第8章  MyBatis简介  165
8.1  ORM和MyBatis  166
8.1.1  对象/关系数据库映射（ORM）  166
8.1.2  基本映射方式  167
8.1.3  流行的ORM框架简介  168
8.1.4  MyBatis概述  168
8.2  MyBatis入门  169
8.2.1  MyBatis下载和安装  169
示例：MyBatis的数据库操作入门  170
8.3  本章小结  175
第9章  MyBatis的基本用法  176
9.1  MyBatis体系结构  177
9.1.1  SqlSessionFactory  177
9.1.2  SqlSession  177
9.2  深入MyBatis的配置文件  179
9.2.1  MyBatis的配置文件结构  180
9.2.2  properties属性  180
9.2.3  settings设置  181
9.2.4  typeAliases类型命名  183
9.2.5  typeHandlers类型处理器  184
9.2.6  objectFactory对象工厂  185
9.2.7  environments配置环境  185
9.2.8  mapper映射器  187
9.3  MyBatis日志信息配置  188
9.3.1  log4j.properties配置日志  188
9.3.2  log4j.xml配置日志  189
9.4  深入Mapper XML映射文件  190
9.4.1  select  191
9.4.2  insert、update和delete  192
9.4.3  sql  194
9.4.4  参数（Parameters）  195
示例：测试select、insert、update和delete操作  195
9.4.5  ResultMaps  200
示例：测试ResultMaps  201
9.5  本章小结  208
第10章  深入使用MyBatis  209
10.1  MyBatis关联映射  210
10.1.1  一对一  210
示例：OneToOneTest  210
10.1.2  一对多  213
示例：OneToManyTest  213
10.1.3  多对多  218
示例：ManyToManyTest  218
10.2  MyBatis动态SQL  225
示例：DynamicSQLTest  225
10.2.1  if  226
10.2.2  choose（when、otherwise）  229
10.2.3  where  230
10.2.4  set  232
10.2.5  foreach  233
10.2.6  bind  234
10.3  MyBatis调用存储过程  234
示例：MyBatis调用存储过程  235
10.3.1  插入数据  235
10.3.2  查询数据返回集合  237
10.3.3  根据id查询数据返回对象  238
10.3.4  修改数据  239
10.3.5  删除数据  241
10.4  MyBatis事务管理  242
10.4.1  事务的概念  242
10.4.2  Transaction接口  243
10.4.3  事务的配置创建和使用  243
10.5  MyBatis缓存机制  247
10.5.1  一级缓存（SqlSession级别）  247
示例：OneLevelCacheTest  247
10.5.2  二级缓存（mapper级别）  251
示例：TwoLevelCacheTest  251
10.6  本章小结  254
第11章  MyBatis的注解配置  255
11.1  常用注解  256
11.2  注解的使用  256
示例：测试select、insert、update和delete操作  257
示例：测试一对一关联  262
示例：测试一对多关联  263
示例：测试多对多关联  265
示例：测试动态SQL  267
示例：测试调用存储过程  274
示例：测试二级缓存  276
11.3  本章小结  278
第12章  Spring 5整合MyBatis 3  279
12.1  开发环境搭建  280
12.2  准备所需的jar包  280
12.3  准备数据库资源  280
12.4  完成配置文件  281
12.5  持久层功能实现  283
12.6  服务层功能实现  284
12.7  控制层功能实现  286
12.8  JSP页面  288
12.9  测试Spring 5整合MyBatis 3  289
12.10  本章小结  290
第13章  实战项目：人事管理系统  291
13.1  项目简介及系统结构  292
13.1.1  系统功能介绍  292
13.1.2  相关技术介绍  293
13.1.3  系统结构  293
13.1.4  系统的功能模块  294
13.2  数据表和持久化类  294
13.2.1  设计数据库表  294
13.2.2  设计持久化实体  296
13.2.3  创建持久化实体类  297
13.3  实现DAO持久层  303
13.3.1  公共常量类  304
13.3.2  定义DAO接口  304
13.3.3  部署DAO层  318
13.4  实现Service持久层  319
13.4.1  业务逻辑组件的设计  319
13.4.2  实现业务逻辑组件  320
13.4.3  事务管理  335
13.4.4  部署业务逻辑组件  335
13.5  实现Web层  335
13.5.1  控制器的处理顺序  335
13.5.2  用户管理  339
13.5.3  部门管理  342
13.5.4  职位管理  345
13.5.5  员工管理  348
13.5.6  公告管理  351
13.5.7  下载中心  355
13.6  本章小结  359
附录A  EL表达式和JSTL标签库  360
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring+MyBatis企业应用实战（第2版）
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring MVC+MyBatis开发从入门到项目实战
第1篇  准备工作
第1章  开发环境搭建	2
1.1  JDK安装与配置	2
1.1.1  下载JDK	3
1.1.2  安装JDK	4
1.1.3  JDK环境变量配置	4
1.1.4  验证Java环境是否搭建成功	6
1.2　MyEclipse的安装与使用	7
1.2.1  MyEclipse的下载	7
1.2.2  MyEclipse的配置	8
1.3　第一个Java类	10
第2篇  MyBatis技术入门
第2章　了解MyBatis	14
2.1  传统JDBC开发模式的缺陷	14
2.1.1  JDBC连接数据库模式分析	14
2.1.2  JDBC操作SQL语句模式分析	16
2.1.3  待优化的问题	17
2.2  初识MyBatis	18
2.2.1  MyBatis介绍	18
2.2.2  MyBatis整体架构	18
2.2.3  MyBatis运行流程	21
第3章  搭建MyBatis工作环境	23
3.1  入门程序搭建与测试	23
3.1.1  数据库准备	23
3.1.2  搭建工程环境	24
3.1.3  编写日志输出环境配置文件	26
3.1.4  编写数据库连接池配置文件	27
3.1.5  编写SQL映射配置文件	29
3.1.6  编写数据交互类与测试用例	30
3.2  入门程序数据操作	33
3.2.1  模糊查询样例	33
3.2.2  新增样例	34
3.2.3  删除与修改样例	37
第4章  MyBatis配置文件详解	40
4.1  SqlMapConfig配置文件详解	40
4.1.1  properties配置分析	43
4.1.2  setting配置分析	44
4.1.3  typeAliases配置分析	48
4.1.4  typeHandlers配置分析	50
4.1.5  objectFactory配置分析	53
4.1.6  plugins配置分析	56
4.1.7  environments配置分析	58
4.1.8  mappers配置分析	60
4.2  Mapper映射文件	61
4.2.1  映射文件总体介绍	61
4.2.2  Mapper配置输入映射	64
4.2.3  Mapper输入映射样例	65
4.2.4  Mapper配置输出映射	68
4.2.5  Mapper自动映射	75
4.2.6  Mapper配置动态SQL语句	76
第5章  MyBatis高级映射	80
5.1  建立测试数据模型	80
5.1.1  业务模型分析	80
5.1.2  根据业务创建测试表	81
5.2  一对一查询	83
5.2.1  使用resultType实现	83
5.2.2  使用resultMap实现	85
5.3  一对多查询	87
5.3.1  实体类定义与Mapper编写	87
5.3.2  测试查询结果	89
5.4  多对多查询	90
5.4.1  实体类定义与Mapper编写	91
5.4.2  测试查询结果	94
5.5  延迟加载	96
5.5.1  Mapper映射配置编写	96
5.5.2  测试延迟加载效果	97
5.6  Mapper动态代理	99
5.6.1  Mapper代理实例编写	99
5.6.2  测试动态代理效果	100
第6章  MyBatis缓存结构	102
6.1  一级查询缓存	103
6.1.1  一级缓存原理阐述	103
6.1.2  一级缓存测试示例	103
6.2  二级查询缓存	105
6.2.1  二级缓存原理阐述	105
6.2.2  二级缓存测试实例	106
6.2.3  验证二级缓存清空	108
第7章  MyBatis技术拓展	110
7.1  MyBatis与Spring的整合	110
7.1.1  创建测试工程	110
7.1.2  引入依赖jar包	111
7.1.3  编写Spring配置文件	112
7.1.4  编写MyBatis配置文件	114
7.1.5  编写Mapper及其他配置文件	115
7.1.6  编写DAO层	116
7.1.7  编写Service测试类	117
7.1.8  使用Mapper代理	118
7.2  MyBatis逆向工程	121
7.2.1  逆向工程配置	121
7.2.2  逆向数据文件生成类	123
7.2.3  运行测试方法	124
7.2.4  测试生成的数据文件	126
第3篇   Spring MVC技术入门
第8章　Spring MVC	132
8.1  Spring MVC基础	133
8.1.1  Spring体系结构	133
8.1.2   Spring MVC请求流程	134
8.2  Spring MVC与Struts的区别	135
8.3  Spring MVC环境搭建	136
8.3.1　依赖jar包的添加和前端控制器配置	137
8.3.2　编写核心配置文件springmvc.xml	138
8.3.3　编写Handler处理器与视图	140
第9章  处理器映射器和适配器	144
9.1  非注解的处理器映射器和适配器	144
9.1.1　非注解的处理器映射器	144
9.1.2　非注解的处理器适配器	146
9.2  注解的处理器映射器和适配器	151
第10章  前端控制器和视图解析器	154
10.1  前端控制器源码分析	154
10.2  视图解析器	162
10.2.1　AbstractCachingViewResolver	162
10.2.2　UrlBasedViewResolver	162
10.2.3　InternalResourceViewResolver	163
10.2.4　XmlViewResolver	163
10.2.5　BeanNameViewResolver	164
10.2.6　ResourceBundleViewResolver	165
10.2.7　FreeMarkerViewResolver与VelocityViewResolver	167
10.2.8　ViewResolver链	168
第11章  请求映射与参数绑定	169
11.1  Controller与RequestMapping	169
11.2  参数绑定过程	173
11.2.1　简单类型参数绑定	174
11.2.2　包装类型参数绑定	176
11.2.3　集合类型参数绑定	182
第12章  Validation校验	187
12.1  Bean Validation数据校验	188
12.1.1  搭建validation校验框架	188
12.1.2  添加校验注解信息	189
12.1.3  测试validation校验效果	191
12.1.4  validation注解全面介绍	192
12.2  分组校验	193
12.2.1  设置分组校验	193
12.2.2  测试分组校验效果	195
12.3  Spring Validator接口校验	195
12.3.1  Validator接口的使用	195
12.3.2  Validator接口验证测试	199
第13章  异常处理和拦截器	201
13.1  全局异常处理器	201
13.2  拦截器定义与配置	207
13.2.1　HandlerInterceptor接口	207
13.2.2　WebRequestInterceptor接口	209
13.2.3　拦截器链	210
13.2.4　拦截器登录控制	213
第14章　Spring MVC其他操作	217
14.1　利用 Spring MVC上传文件	217
14.2　利用Spring MVC实现JSON交互	223
14.3　利用Spring MVC实现RESTful风格	231
14.3.1　RESTful	231
14.3.2　使用Spring MVC实现RESTful风格	232
14.3.3　静态资源访问问题	235
第4篇　Spring MVC与MyBatis项目实战
第15章  项目分析与建模	238
15.1  项目需求分析	238
15.1.1  系统主要使用者业务关系分析	239
15.1.2  系统主要使用者经济关系分析	239
15.2  项目UML图例	240
15.2.1  UML图的类型	240
15.2.2  绘制系统用例图	241
15.2.3  绘制系统模块图	241
15.3  项目数据库建模	242
15.3.1  系统数据关系分析	243
15.3.2  系统主要表设计	243
第16章  开发框架环境搭建	250
16.1  搭建工程的Maven环境	250
16.1.1  Maven下载配置	250
16.1.2  创建Maven工程	252
16.1.3  为工程添加依赖	254
16.2  开发框架基础配置与测试	259
16.2.1  开发框架环境配置	259
16.2.2　测试环境配置结果	266
第17章　核心代码以及登录模块编写	277
17.1  各层核心基础代码	277
17.1.1  编写DAO层核心代码	277
17.1.2  编写Controller层核心代码	279
17.2  登录注册管理模块	280
17.2.1  编写登录模块	280
17.2.2　编写登录验证服务	283
17.2.3  编写注册模块	288
17.2.4  编写注册服务	290
第18章  零售商及货物管理模块	292
18.1  零售商管理模块	292
18.1.1  添加主导航栏	292
18.1.2  编写基础Controller及实体类	294
18.1.3  创建Mapper映射文件	295
18.1.4  编写DAO层处理逻辑	297
18.1.5  编写Service层处理逻辑	297
18.1.6  完善Controller类	298
18.1.7  编写相关视图页面	300
18.1.8  分页操作逻辑编写	302
18.1.9  测试分页效果	305
18.1.10  编写编辑功能	307
18.1.11  测试编辑功能	310
18.1.12  编写删除功能	311
18.1.13  测试删除功能	312
18.1.14  编写添加功能	312
18.1.15  测试添加功能	314
18.2  货物信息管理模块	315
18.2.1  导航栏与Controller基础准备	315
18.2.2  创建Mapper映射文件	316
18.2.3  编写DAO层处理逻辑	318
18.2.4  编写Service层处理逻辑	319
18.2.5  完善Controller类	320
18.2.6  编写相关视图页面	322
18.3  附属品管理模块	325
18.3.1  导航栏与Controller基础准备	325
18.3.2  创建Mapper映射文件	326
18.3.3  完善Controller类	327
18.3.4  编写相关视图页面	329
18.3.5  验证页面效果	331
18.3.6  批量删除实现	332
第19章  购销合同管理模块	335
19.1  购销合同管理模块	335
19.1.1  购销合同Mapper实现	335
19.1.2  编写DAO层处理逻辑	341
19.1.3  编写Service层处理逻辑	342
19.1.4  编写Controller基础类	344
19.1.5  编写相关视图页面	345
19.2  关联零售商	347
19.2.1  编写添加逻辑	347
19.2.2  实现零售商关联浮出框	349
19.2.3  测试零售商关联	354
19.3  关联水果货物	354
19.3.1  货物关联展示与浮出框编写	354
19.3.2  勾选货物功能编写	358
19.3.3  测试货物关联	360
19.4  完善购销合同	360
19.4.1  合同关联信息合并提交	360
19.4.2  测试合并提交	365
19.4.3  合同打印以及删除实现	369
19.5　总结	372
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring MVC+MyBatis开发从入门到项目实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>轻量级Java Web企业应用实战――Spring MVC+Spring+MyBatis整合开发
第1章　Java EE应用和开发环境	1
1.1　Java EE应用概述	2
1.1.1  Java EE应用的分层模型	2
1.1.2  Java EE应用的组件	3
1.1.3　Java EE应用的结构和优势	4
1.1.4　常用的Java EE服务器	4
1.2　轻量级Java EE应用相关技术	5
1.2.1　JSP、Servlet 4.x和JavaBean及替代技术	5
1.2.2　Spring MVC及替代技术	6
1.2.3　MyBatis及替代技术	6
1.2.4　Spring及替代技术	7
1.3　Tomcat的下载和安装	8
1.3.1　安装Tomcat服务器	8
1.3.2　配置Tomcat的服务端口	9
1.3.3　进入控制台	10
1.3.4　部署Web应用	12
1.3.5　配置Tomcat的数据源	13
1.4　Eclipse的安装和使用	15
1.4.1　Eclipse的下载和安装	15
1.4.2  在线安装Eclipse插件	15
1.4.3　从本地压缩包安装插件	17
1.4.4　手动安装Eclipse插件	18
1.4.5　使用Eclipse开发Java Web应用	18
1.4.6　导入Eclipse项目	21
1.4.7　导入非Eclipse项目	22
1.5　Ant的安装和使用	23
1.5.1　Ant的下载和安装	24
1.5.2　使用Ant工具	25
1.5.3　定义生成文件	26
1.5.4　Ant的任务（task）	30
1.6　Maven的安装和使用	32
1.6.1　下载和安装Maven	33
1.6.2　设置Maven	34
1.6.3　创建、构建简单的项目	35
1.6.4  Maven的核心概念	39
1.6.5　依赖管理	44
1.6.6　POM文件的元素	46
1.7　使用Git进行软件配置管理（SCM）	47
1.7.1　下载和安装Git、TortoiseGit	47
1.7.2  创建本地资源库	49
1.7.3  添加文件和文件夹	51
1.7.4  提交修改	52
1.7.5　查看文件或文件夹的版本变更	53
1.7.6　删除文件或文件夹	54
1.7.7  从以前版本重新开始	55
1.7.8  克隆项目	56
1.7.9  创建分支	56
1.7.10　沿着分支开发	57
1.7.11　合并分支	58
1.7.12  使用Eclipse作为Git客户端	59
1.7.13　配置远程中央资源库	61
1.7.14  推送项目	64
1.7.15  获取项目和拉取项目	64
1.8　本章小结	66
第2章　MyBatis的基础用法	67
2.1　MyBatis是ORM框架吗	68
2.1.1　何谓ORM	68
2.1.2  ORM的映射方式	69
2.1.3  MyBatis的映射方式	70
2.2　MyBatis入门	71
2.2.1　MyBatis的下载和安装	72
2.2.2　MyBatis的数据库操作	72
2.2.3  使用MyBatis执行CRUD	78
2.2.4  利用Mapper对象	80
2.2.5  在Eclipse中使用MyBatis	84
2.3  MyBatis核心API及作用域	90
2.3.1  SqlSessionFactoryBuilder的作用域	90
2.3.2  SqlSessionFactory的作用域	91
2.3.3  SqlSession及其作用域	92
2.3.4  Mapper组件的作用域	94
2.4  MyBatis配置详解	94
2.4.1  属性配置	95
2.4.2  设置配置	98
2.4.3  为类型配置别名	101
2.4.4  对象工厂	103
2.4.5  加载Mapper	105
2.5  类型处理器	106
2.5.1  内置的类型处理器	106
2.5.2  自定义类型处理器	107
2.5.3　枚举的类型处理器	111
2.5.4  存储枚举值的序号	112
2.5.5  同时存储枚举值的名称和序号	113
2.6  数据库环境配置	116
2.6.1  环境配置与默认环境配置	116
2.6.2  事务管理器	117
2.6.3  数据源配置	121
2.6.4  配置第三方C3P0数据源	122
2.7  支持不同类型的数据库	124
2.8  Mapper基础	127
2.8.1  select的用法	128
2.8.2  insert的用法	130
2.8.3  使用useGeneratedKeys返回	自增长的主键值	131
2.8.4  使用selectKey生成主键值	132
2.8.5  update和delete元素的用法	134
2.8.6  使用sql元素定义可复用的SQL片段	134
2.8.7  参数处理	136
2.8.8  参数的额外声明	142
2.8.9  字符串替换	142
2.9  MyBatis代码生成器	144
2.9.1  提供配置文件	145
2.9.2  运行MBG	146
2.10  本章小结	149
第3章　深入使用MyBatis	151
3.1  结果集映射	152
3.1.1  简单resultMap映射	152
3.1.2  构造器映射	154
3.1.3  自动映射	157
3.2  调用存储过程	159
3.2.1  调用返回结果集的存储过程	159
3.2.2  调用带out模式参数的存储过程	160
3.2.3  调用传出参数为游标引用的存储过程	162
3.3  关联映射	165
3.3.1  基于嵌套select的一对一映射	165
3.3.2  基于嵌套select映射策略的性能缺陷	171
3.3.3  延迟加载的原理	175
3.3.4  基于多表连接查询的一对一映射	176
3.3.5  基于多结果集的一对一映射	182
3.3.6  基于嵌套select的一对多映射	184
3.3.7  基于多表连接查询的一对多映射	191
3.3.8  基于多结果集的一对多映射	192
3.3.9  多对多映射的三种策略	194
3.4  基于辨别者列的继承映射	201
3.4.1  继承映射的简单示例	201
3.4.2  继承映射的复杂示例	205
3.5  动态SQL	210
3.5.1  if元素的用法	210
3.5.2  在update更新列中使用if	216
3.5.3　在insert动态插入列中使用if	219
3.5.4  choose、when、otherwise元素的	用法	222
3.5.5  where与trim的用法	225
3.5.6  set与trim的用法	228
3.5.7  使用trim实现动态插入	230
3.5.8  foreach元素的基本用法	232
3.5.9  foreach实现批量插入	234
3.5.10  foreach实现批量更新	236
3.5.11  bind元素的用法	239
3.6  缓存	240
3.6.1  一级缓存	240
3.6.2  一级缓存的脏数据与避免方法	243
3.6.3  二级缓存	246
3.6.4  二级缓存的脏数据与避免方法	248
3.6.5  整合Ehcache实现二级缓存	252
3.7  用插件扩展MyBatis	254
3.7.1  拦截器接口及作用原理	254
3.7.2  可拦截的目标	256
3.7.3  为MyBatis开发分页插件	260
3.8  本章小结	266
第4章　Spring的基础用法	267
4.1  Spring简介和Spring 5的变化	268
4.1.1  Spring简介	268
4.1.2  Spring 5.x的变化	269
4.2  Spring入门	269
4.2.1  Spring的下载和安装	270
4.2.2  使用Spring管理Bean	270
4.2.3  在Eclipse中使用Spring	274
4.3  Spring的核心机制：依赖注入	276
4.3.1  理解依赖注入	277
4.3.2  设值注入	278
4.3.3  构造注入	282
4.3.4  两种注入方式的对比	284
4.4  使用Spring容器	284
4.4.1  Spring容器	284
4.4.2  使用ApplicationContext	286
4.4.3  ApplicationContext的国际化支持	287
4.4.4  ApplicationContext的事件机制	289
4.4.5  让Bean获取Spring容器	292
4.5  Spring容器中的Bean	294
4.5.1  Bean的基本定义和Bean别名	294
4.5.2  容器中Bean的作用域	295
4.5.3  配置依赖	299
4.5.4  设置普通属性值	300
4.5.5  配置合作者Bean	302
4.5.6  使用自动装配注入合作者Bean	302
4.5.7  注入嵌套Bean	305
4.5.8  注入集合值	306
4.5.9  组合属性	311
4.5.10  Spring的Bean和JavaBean	312
4.6  Spring的Java配置管理	313
4.7  创建Bean的三种方式	316
4.7.1  使用构造器创建Bean	316
4.7.2  使用静态工厂方法创建Bean	317
4.7.3  使用实例工厂方法创建Bean	319
4.8  深入理解容器中的Bean	321
4.8.1  抽象Bean与子Bean	322
4.8.2  Bean继承与Java继承的区别	323
4.8.3  容器中的工厂Bean	323
4.8.4  获得Bean本身的id	326
4.8.5  强制初始化Bean	327
4.9  容器中Bean的生命周期	327
4.9.1  依赖关系注入之后的行为	328
4.9.2  Bean销毁之前的行为	330
4.9.3  协调作用域不同步的Bean	332
4.10  高级依赖关系配置	336
4.10.1  获取其他Bean的属性值	336
4.10.2  获取Field值	339
4.10.3  获取方法的返回值	341
4.11  基于XML Schema的简化配置方式	344
4.11.1  使用p:命名空间简化配置	344
4.11.2  使用c:命名空间简化配置	345
4.11.3  使用util:命名空间简化配置	347
4.12  Spring表达式语言	349
4.12.1  使用Expression接口进行表达式求值	350
4.12.2  Bean定义中的表达式语言支持	352
4.12.3  SpEL语法详述	353
4.13  本章小结	358
第5章　深入使用Spring	359
5.1  两种后处理器	360
5.1.1  Bean后处理器	360
5.1.2  Bean后处理器的用处	364
5.1.3  容器后处理器	364
5.1.4  属性占位符配置器	366
5.1.5  重写占位符配置器	367
5.2  “零配置”支持	368
5.2.1  搜索Bean类	368
5.2.2  指定Bean的作用域	371
5.2.3  使用@Resource、@Value配置依赖	372
5.2.4  使用@PostConstruct和@PreDestroy定制生命周期行为	373
5.2.5  @DependsOn和@Lazy	374
5.2.6  自动装配和精确装配	374
5.2.7  Spring 5新增的注解	379
5.3  资源访问	380
5.3.1  Resource实现类	381
5.3.2  ResourceLoader接口和	ResourceLoaderAware接口	385
5.3.3  使用Resource作为属性	388
5.3.4  在ApplicationContext中使用资源	389
5.4  Spring的AOP	392
5.4.1  为什么需要AOP	393
5.4.2  使用AspectJ实现AOP	394
5.4.3  AOP的基本概念	401
5.4.4  Spring的AOP支持	402
5.4.5  基于注解的“零配置”方式	403
5.4.6  基于XML配置文件的管理方式	418
5.5  Spring的缓存机制	424
5.5.1  启用Spring缓存	425
5.5.2  使用@Cacheable执行缓存	427
5.5.3  使用@CacheEvict清除缓存数据	431
5.6  Spring的事务	433
5.6.1  Spring支持的事务策略	433
5.6.2  使用XML Schema配置事务策略	436
5.6.3  使用@Transactional	442
5.7  Spring整合MyBatis	443
5.7.1  整合MyBatis的关键点及快速入门	443
5.7.2  配置SqlSessionFactory	448
5.7.3  通过工厂Bean配置Mapper组件	449
5.7.4  通过扫描自动配置Mapper组件	450
5.7.5  基于SqlSession实现DAO组件	452
5.7.6  继承SqlSessionDaoSupport实现DAO组件	455
5.7.7  事务管理	457
5.8  本章小结	458
第6章　Spring MVC的基础用法	459
6.1  MVC概述	460
6.1.1  MVC模式及其优势	460
6.1.2  Spring MVC与Struts 2的区别	461
6.2  Spring MVC入门	463
6.2.1  在Web应用中启动Spring容器	463
6.2.2  配置核心控制器	466
6.2.3  开发控制器	468
6.2.4  提供视图资源	470
6.2.5  使用Eclipse开发Spring MVC应用	471
6.3  Spring MVC的流程	472
6.3.1  Spring MVC应用的开发步骤	472
6.3.2  Spring MVC的运行流程	474
6.3.3  DispatcherServlet详解	475
6.3.4  mvc:annotation-driven详解	480
6.4  静态资源处理	481
6.4.1  静态资源映射	481
6.4.2  配置默认Servlet	483
6.5  视图解析器	485
6.5.1  UrlBasedViewResolver的功能与用法	486
6.5.2  InternalResourceViewResolver的功能与用法	491
6.5.3  XmlViewResolver及视图解析器的链式处理	492
6.5.4  ResourceBundleViewResolver的功能与用法	496
6.5.5  BeanNameViewResolver的功能与用法	497
6.5.6  重定向视图	499
6.5.7  将数据传给重定向目标	500
6.5.8  ContentNegotiatingViewResolver的功能与用法	503
6.6  请求映射与参数处理	510
6.6.1  HandlerMapping与处理映射	510
6.6.2  SimpleUrlHandlerMapping的功能与用法	511
6.6.3  @RequestMapping注解及其变体	512
6.6.4  处理方法允许的返回值类型	515
6.6.5  @RequestParam注解与MultiValueMap	516
6.6.6  使用@PathVariable获取路径变量的值	520
6.6.7  使用@PathVariable处理正则	表达式	523
6.6.8  路径模式	524
6.6.9  使用@MatrixVariable处理Matrix变量	526
6.6.10  使用@RequestHeader获取请求头的值	529
6.6.11  异步处理	530
6.6.12  使用DeferredResult支持异步处理	534
6.6.13  使用@ModelAttribute修饰方法本身	536
6.6.14  使用@ModelAttribute修饰方法参数	539
6.7  将数据传给视图页面	541
6.7.1  Model、ModelMap和RedirectAttributes	541
6.7.2  使用@SessionAttributes添加session属性	542
6.8  RESTful服务支持	544
6.8.1  RESTful简介	544
6.8.2  @RequestBody与@ResponseBody注解	546
6.8.3  HttpMessageConverter与消息转换	550
6.8.4  转换XML数据	553
6.8.5  使用@RestController修饰RESTful控制器	557
6.8.6  @CrossOrigin注解与跨域请求	557
6.9  访问Servlet API相关数据	561
6.9.1  处理方法可接受的形参类型	561
6.9.2  使用@RequestAttribute获取请求属性	562
6.9.3  使用@SessionAttribute获取session属性	563
6.9.4  直接访问Servlet API	566
6.9.5  使用WebRequest和NativeWebRequest伪访问	567
6.9.6  使用@CookieValue获取cookie值	569
6.9.7  在处理方法中使用IO流	571
6.10  本章小结	573
第7章　深入使用Spring MVC	574
7.1  国际化	575
7.1.1  国际化到底怎么做	575
7.1.2  根据浏览器请求头确定Locale	577
7.1.3  根据session确定Locale	582
7.1.4  根据cookie值确定Locale	586
7.2  异常处理	587
7.2.1  Spring MVC异常处理	587
7.2.2  传统的异常处理机制	590
7.2.3  使用@ResponseStatus修饰异常类	594
7.2.4  使用@ExceptionHandler修饰异常	处理方法	596
7.2.5  使用@ControllerAdvice定义异常Aspect	599
7.2.6  使用@RestControllerAdvice定义异常Aspect	600
7.3  标签库	602
7.3.1  form标签与普通表单域标签	602
7.3.2  radiobutton和radiobuttons标签	605
7.3.3  checkbox和checkboxes标签	607
7.3.4  select和option、options标签	610
7.3.5  htmlEscape和escapeBody标签	612
7.3.6  url和param标签	613
7.4  类型转换与绑定	615
7.4.1  BeanWrapper简介	616
7.4.2  PropertyEditor与内置实现类	618
7.4.3  自定义PropertyEditor	619
7.4.4  使用WebBindingInitializer注册全局PropertyEditor	621
7.4.5  使用ConversionService执行转换	623
7.4.6  处理转换错误	626
7.5  格式化	629
7.5.1  使用格式化器	630
7.5.2  使用FormatterRegistrar注册	格式化器	633
7.6  数据校验	634
7.6.1  使用Validation执行校验	634
7.6.2  基于JSR 303执行校验	638
7.7  文件上传与下载	641
7.7.1  使用MultipartFile处理文件上传	641
7.7.2  基于Commons FileUpload组件	上传文件	646
7.7.3  使用@RequestPart注解	647
7.7.4  文件下载	650
7.7.5  下载前的授权控制	652
7.8  拦截器	653
7.9  SSM整合开发	656
7.9.1  搭建项目	657
7.9.2  开发Mapper组件	659
7.9.3  开发Service组件	660
7.9.4  控制器与视图	661
7.10  本章小结	666
第8章　简单工作流系统	667
8.1  项目背景及系统结构	668
8.1.1  应用背景	668
8.1.2  系统功能介绍	668
8.1.3  相关技术介绍	669
8.1.4  系统结构	670
8.1.5  系统的功能模块	670
8.2  领域对象层	671
8.2.1  设计领域对象	671
8.2.2  创建领域对象类	672
8.3  实现Mapper（DAO）层	677
8.3.1  Mapper组件的定义	677
8.3.2  实现Mapper组件	681
8.3.3  部署Mapper层	685
8.4  实现Service层	686
8.4.1  业务逻辑组件的设计	686
8.4.2  实现业务逻辑组件	687
8.4.3  事务管理	692
8.4.4  部署业务逻辑组件	693
8.5  实现任务的自动调度	693
8.5.1  使用Quartz	693
8.5.2  在Spring中使用Quartz	698
8.6  实现系统Web层	700
8.6.1  配置核心控制器和启动Spring容器	700
8.6.2  控制器的处理顺序	701
8.6.3  员工登录	702
8.6.4  进入打卡	705
8.6.5  处理打卡	707
8.6.6  进入申请	708
8.6.7  提交申请	709
8.6.8  使用拦截器完成权限管理	710
8.7  本章小结	712
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>轻量级Java Web企业应用实战――Spring MVC+Spring+MyBatis整合开发
