package java8;

/**
 * @author issuser
 * @date 2019-09-08 10:58
 *
 * 为了最大限度发挥Lambda 表达式的优势，大家需要将其
 * 引入已有代码中。作为一名职业Java 程序员，Lambda 表达式没有什么特别的，和接口、
 * 类一样，它只是程序员工具箱中的一件新工具。
 *
 * 本章将探索如何使用Lambda 表达式实现SOLID 原则，该原则是开发良好面向对象程序的
 * 准则。使用Lambda 表达式，还能改进一些现有的设计模式，本章也会为大家简要介绍几
 * 个这样的例子。
 *
 * 我会给出一些良好的设计原则和模式，在此基础之上，就能开发出可维护且十分可靠的程序
 *
 * 命令者是一个对象，它封装了调用另一个方法的所有细节，命令者模式使用该对象，可以
 * 编写出根据运行期条件，顺序调用方法的一般化代码
 *
 * 命令者模式只是一个可怜的程序员使用Lambda 表达式的起点。使用Lambda 表达式或是
 * 方法引用，能让代码更简洁，去除了大量样板代码，让代码意图更加明显。
 *
 * 现在可以动手实现Compressor 类了，这里就是使用策略模式的地方。该类有一个compress
 * 方法，读入文件，压缩后输出。
 *
 * 观察者模式是另一种可被Lambda 表达式简化和改进的行为模式。在观察者模式中，被观
 * 察者持有一个观察者列表。当被观察者的状态发生改变，会通知观察者。
 *
 * 将大量代码塞进一个方法会让可读性变差是决定如何使用
 * Lambda 表达式的黄金法则
 *
 *
 * 整体算法的设计是一个抽象类，它有一系列抽象方
 * 法，代表算法中可被定制的步骤，同时这个类中包含了一些通用代码。算法的每一个变种
 * 由具体的类实现，它们重写了抽象方法，提供了相应的实现。
 *
 *
 * 领域专用语言（DSL）是针对软件系统中某特定部分的编程语言。它们通常比较小巧，表
 * 达能力也不如Java 这样能应对大多数编程任务的通用语言强。DSL 高度专用：不求面面
 * 俱到，但求有所专长。
 * 人们通常将DSL 分为两类：内部DSL 和外部DSL。外部DSL 脱离程序源码编写，然后单
 * 独解析和实现。比如级联样式表（CSS）和正则表达式，就是常用的外部DSL。
 *
 * BDD 是测试驱动开发（TDD）的一个变种，它的重点是描述程序的行为，而非一组需要
 * 通过的单元测试
 *
 * 单一功能原则不止于此：一个类不仅要功能单一，而且还需将功能封装好
 *
 * 这是强内聚性设计的一部分。说一个类是内聚的，是指它的方法和属性需要统一对待，因
 * 为它们紧密相关。如果你试着将一个内聚的类拆分，可能会得到刚才创建的那两个类。
 *
 * 开闭原则的首要目标和单一功能原则类似：让软件易于修改
 *
 * 高阶函数也展示出了同样的特性：对扩展开放，对修改闭合
 *
 * “不可变性”一词有两种解释：观测不可变性和实现不可变性。观测不可变性是指在其他
 * 对象看来，该类是不可变的；实现不可变性是指对象本身不可变。实现不可变性意味着观
 * 测不可变性，反之则不一定成立。
 *
 * 抽象不应依赖细节，细节应该依赖抽象。
 *
 *
 *
 */
public class ch08StylePrinciple {



}
