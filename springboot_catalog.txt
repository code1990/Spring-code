>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>SpringBoot 揭秘
推荐序1
推荐序2
序言
前言
第1章了解微服务
1.1什么是微服务
1.2微服务因何而生
1.3微服务会带来哪些好处
1.3.1独立，独立，还是独立
1.3.2多语言生态
1.4微服务会带来哪些挑战
1.5本章小结
第2章饮水思源：回顾与探索Spring框架的本质
2.1Spring框架的起源
2.2Spring IoC其实很简单
2.3了解一点儿JavaConfig
2.3.1那些高曝光率的Annotation
2.4本章小结
第3章SpringBoot的工作机制
3.1SpringBoot初体验
3.2@SpringBootApplication背后的秘密
3.2.1@Configuration创世纪
3.2.2@EnableAutoConfiguration的功效
3.2.3可有可无的@ComponentScan
3.3SpringApplication：SpringBoot程序启动的一站式解决方案
3.3.1深入探索SpringApplication执行流程
3.3.2SpringApplicationRunListener
3.3.3ApplicationListener
3.3.4ApplicationContextInitializer
3.3.5CommandLineRunner
3.4再谈自动配置
3.4.1基于条件的自动配置
3.4.2调整自动配置的顺序
3.5本章小结
第4章了解纷杂的spring—boot—starter
4.1应用日志和spring—boot—starter—logging
4.2快速Web应用开发与spring—boot—starter—web
4.2.1项目结构层面的约定
4.2.2SpringMVC框架层面的约定和定制
4.2.3嵌入式Web容器层面的约定和定制
4.3数据访问与spring—boot—starter—jdbc
4.3.1SpringBoot应用的数据库版本化管理
4.4spring—boot—starter—aop及其使用场景说明
4.4.1spring—boot—starter—aop在构建spring—boot—starter—metrics自定义模块中的应用
4.5应用安全与spring—boot—starter—security
4.5.1了解SpringSecurity基本设计
4.5.2进一步定制spring—boot—starter—security
4.6应用监控与spring—boot—starter—actuator
4.6.1自定义应用的健康状态检查
4.6.2开放的endpoints才真正“有用”
4.6.3用还是不用，这是个问题
4.7本章小结
第5章SpringBoot微服务实践探索
5.1使用SpringBoot构建微服务
5.1.1创建基于Dubbo框架的SpringBoot微服务
5.1.2使用SpringBoot快速构建Web API
5.1.3使用SpringBoot构建其他形式的微服务
5.2SpringBoot微服务的发布与部署
5.2.1spring—boot—starter的发布与部署方式
5.2.2基于RPM的发布与部署方式
5.2.3基于Docker的发布与部署方式
5.3SpringBoot微服务的注册与发现
5.4SpringBoot微服务的监控与运维
5.4.1推还是拉，这一直是个问题
5.4.2从局部性触发式报警到系统性智能化报警
5.5SpringBoot微服务的安全与防护
5.6SpringBoot微服务体系的脊梁：发布与部署平台
5.7本章小结
第6章SpringBoot与Scala
6.1使用Maven构建和发布基于SpringBoot的Scala应用
6.1.1进一步简化基于Maven的Scala项目创建
6.1.2进一步简化基于Scala的Web API开发
6.2使用SBT构建和发布基于SpringBoot的Scala应用
6.2.1探索基于SBT的SpringBoot应用开发模式
6.2.2探索基于SBT的SpringBoot应用发布策略
6.3本章小结
第7章SpringBoot总结与展望
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>SpringBoot 揭秘
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot实战
第1章　入门　　1
1.1　Spring风云再起　　1
1.1.1　重新认识Spring　　2
1.1.2　Spring Boot精要　　3
1.1.3　Spring Boot不是什么　　6
1.2　Spring Boot入门　　6
1.2.1　安装Spring Boot CLI　　7
1.2.2　使用Spring Initializr初始化Spring Boot项目　　10
1.3　小结　　18
第2章　开发第一个应用程序　　19
2.1　运用Spring Boot　　19
2.1.1　查看初始化的Spring Boot新项目　　21
2.1.2　Spring Boot项目构建过程解析　　24
2.2　使用起步依赖　　27
2.2.1　指定基于功能的依赖　　28
2.2.2　覆盖起步依赖引入的传递依赖　　29
2.3　使用自动配置　　30
2.3.1　专注于应用程序功能　　31
2.3.2　运行应用程序　　36
2.3.3　刚刚发生了什么　　38
2.4　小结　　41
第3章　自定义配置　　42
3.1　覆盖Spring Boot自动配置　　42
3.1.1　保护应用程序　　43
3.1.2　创建自定义的安全配置　　44
3.1.3　掀开自动配置的神秘面纱　　48
3.2　通过属性文件外置配置　　49
3.2.1　自动配置微调　　50
3.2.2　应用程序Bean的配置外置　　55
3.2.3　使用Profile进行配置　　59
3.3　定制应用程序错误页面　　62
3.4　小结　　64
第4章　测试　　66
4.1　集成测试自动配置　　66
4.2　测试Web应用程序　　68
4.2.1　模拟Spring MVC　　69
4.2.2　测试Web安全　　72
4.3　测试运行中的应用程序　　74
4.3.1　用随机端口启动服务器　　75
4.3.2　使用Selenium测试HTML页面　　76
4.4　小结　　78
第5章　Groovy与Spring Boot CLI　　80
5.1　开发Spring Boot CLI应用程序　　80
5.1.1　设置CLI项目　　81
5.1.2　通过Groovy消除代码噪声　　81
5.1.3　发生了什么　　85
5.2　获取依赖　　86
5.2.1　覆盖默认依赖版本　　87
5.2.2　添加依赖仓库　　88
5.3　用CLI运行测试　　89
5.4　创建可部署的产物　　91
5.5　小结　　91
第6章　在Spring Boot中使用Grails　　93
6.1　使用GORM进行数据持久化　　93
6.2　使用Groovy Server Pages定义视图　　98
6.3　结合Spring Boot与Grails 3　　100
6.3.1　创建新的Grails项目　　100
6.3.2　定义领域模型　　103
6.3.3　开发Grails控制器　　104
6.3.4　创建视图　　105
6.4　小结　　107
第7章　深入Actuator　　108
7.1　揭秘Actuator的端点　　108
7.1.1　查看配置明细　　109
7.1.2　运行时度量　　115
7.1.3　关闭应用程序　　121
7.1.4　获取应用信息　　121
7.2　连接Actuator的远程shell　　122
7.2.1　查看autoconfig报告　　123
7.2.2　列出应用程序的Bean　　124
7.2.3　查看应用程序的度量信息　　124
7.2.4　调用Actuator端点　　125
7.3　通过JMX监控应用程序　　126
7.4　定制Actuator　　128
7.4.1　修改端点ID　　128
7.4.2　启用和禁用端点　　129
7.4.3　添加自定义度量信息　　129
7.4.4　创建自定义跟踪仓库　　132
7.4.5　插入自定义健康指示器　　134
7.5　保护Actuator端点　　136
7.6　小结　　138
第8章　部署Spring Boot应用程序　　139
8.1　衡量多种部署方式　　139
8.2　部署到应用服务器　　140
8.2.1　构建WAR文件　　141
8.2.2　创建生产Profile　　142
8.2.3　开启数据库迁移　　145
8.3　推上云端　　150
8.3.1　部署到Cloud Foundry　　150
8.3.2　部署到Heroku　　153
8.4　小结　　155
附录A　Spring Boot开发者工具　　157
附录B　Spring Boot起步依赖　　163
附录C　配置属性　　169
附录D　Spring Boot依赖　　202
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>JavaEE开发的颠覆者
第一部分 点睛Spring 4.x
第1 章 Spring 基础 2
1.1 Spring 概述  2
1.1.1 Spring 的简史  2
1.1.2 Spring 概述  3
1.2 Spring 项目快速搭建 5
1.2.1 Maven 简介  6
1.2.2 Maven 安装  6
1.2.3 Maven 的pom.xml 7
1.2.4 Spring 项目的搭建  9
1.3 Spring 基础配置 17
1.3.1 依赖注入  18
1.3.2 Java 配置  21
1.3.3 AOP 24
第2 章 Spring 常用配置 30
2.1 Bean 的Scope  30
2.1.1 点睛 30
2.1.2 示例 31
2.2 Spring EL 和资源调用. 33
2.2.1 点睛 33
2.2.2 示例 33
2.3 Bean 的初始化和销毁 37
2.3.1 点睛 37
2.3.2 演示 38
2.4 Profile  40
2.4.1 点睛 40
2.4.2 演示 41
2.5 事件（Application Event）  44
2.5.1 点睛 44
2.5.2 示例 44
第3 章 Spring 高级话题 48
3.1 Spring Aware 48
3.1.1 点睛 48
3.1.2 示例 49
3.2 多线程  51
3.2.1 点睛 51
3.2.2 示例 51
3.3 计划任务 54
3.3.1 点睛 54
3.3.2 示例 54
3.4 条件注解@Conditional  56
3.4.1 点睛 56
3.4.2 示例 57
3.5 组合注解与元注解  60
3.5.1 点睛 60
3.5.2 示例 60
3.6 @Enable*注解的工作原理  63
3.6.1 第一类：直接导入配置类 63
3.6.2 第二类：依据条件选择配置类  64
3.6.3 第三类：动态注册Bean 65
3.7 测试  66
3.7.1 点睛 66
3.7.2 示例 67
第二部分 点睛Spring MVC 4.x
第4 章 Spring MVC 基础  72
4.1 Spring MVC 概述  73
4.2 Spring MVC 项目快速搭建 74
4.2.1 点睛 74
4.2.2 示例 74
4.3 Spring MVC 的常用注解  82
4.3.1 点睛 82
4.3.2 示例 83
4.4 Spring MVC 基本配置  87
4.4.1 静态资源映射  88
4.4.2 拦截器配置 89
4.4.3 @ControllerAdvice 91
4.4.4 其他配置  94
4.5 Spring MVC 的高级配置  98
4.5.1 文件上传配置  98
4.5.2 自定义HttpMessageConverter  101
4.5.3 服务器端推送技术  106
4.6 Spring MVC 的测试  113
4.6.1 点睛  113
4.6.2 示例  114
第三部分 实战Spring Boot
第5 章 Spring Boot 基础 122
5.1 Spring Boot 概述  122
5.1.1 什么是Spring Boot  122
5.1.2 Spring Boot 核心功能 122
5.1.3 Spring Boot 的优缺点 124
5.1.4 关于本书的Spring Boot 版本  124
5.2 Spring Boot 快速搭建  124
5.2.1 http://start.spring.io  124
5.2.2 Spring Tool Suite  127
5.2.3 IntelliJ IDEA  129
5.2.4 Spring Boot CLI 132
5.2.5 Maven 手工构建  134
5.2.6 简单演示  136
第6 章 Spring Boot 核心 138
6.1 基本配置  138
6.1.1 入口类和@SpringBootApplication 138
6.1.2 关闭特定的自动配置 139
6.1.3 定制Banner 139
6.1.4 Spring Boot 的配置文件  140
6.1.5 starter pom 141
6.1.6 使用xml 配置 143
6.2 外部配置  143
6.2.1 命令行参数配置  143
6.2.2 常规属性配置 144
6.2.3 类型安全的配置（基于properties）  145
6.3 日志配置  148
6.4 Profile 配置 148
实战  148
6.5 Spring Boot 运行原理  150
6.5.1 运作原理  153
6.5.2 核心注解  154
6.5.3 实例分析  157
6.5.4 实战  160
第7 章 Spring Boot 的Web 开发  170
7.1 Spring Boot 的Web 开发支持 170
7.2 Thymeleaf 模板引擎  171
7.2.1 Thymeleaf 基础知识  171
7.2.2 与Spring MVC 集成  174
7.2.3 Spring Boot 的Thymeleaf 支持  175
7.2.4 实战  177
7.3 Web 相关配置  182
7.3.1 Spring Boot 提供的自动配置 182
7.3.2 接管Spring Boot 的Web 配置  185
7.3.3 注册Servlet、Filter、Listener  186
7.4 Tomcat 配置  187
7.4.1 配置Tomcat 187
7.4.2 代码配置Tomcat  188
7.4.3 替换Tomcat 190
7.4.4 SSL 配置  191
7.5 Favicon 配置  196
7.5.1 默认的Favicon  196
7.5.2 关闭Favicon  196
7.5.3 设置自己的Favicon  197
7.6 WebSocket  197
7.6.1 什么是WebSocket  197
7.6.2 Spring Boot 提供的自动配置 197
7.6.3 实战  198
7.7 基于Bootstrap 和AngularJS 的现代Web 应用 212
7.7.1 Bootstrap  213
7.7.2 AngularJS  216
7.7.3 实战  222
第8 章 Spring Boot 的数据访问  233
8.1 引入Docker  237
8.1.1 Docker 的安装  238
8.1.2 Docker 常用命令及参数  242
8.1.3 下载本书所需的Docker 镜像  247
8.1.4 异常处理  247
8.2 Spring Data JPA  248
8.2.1 点睛Spring Data JPA  248
8.2.2 Spring Boot 的支持  258
8.2.3 实战  260
8.3 Spring Data REST  284
8.3.1 点睛Spring Data REST 284
8.3.2 Spring Boot 的支持  285
8.3.3 实战  286
8.4 声名式事务 297
8.4.1 Spring 的事务机制  297
8.4.2 声名式事务  298
8.4.3 注解事务行为 299
8.4.4 类级别使用@Transactional 300
8.4.5 Spring Data JPA 的事务支持  300
8.4.6 Spring Boot 的事务支持  302
8.4.7 实战  303
8.5 数据缓存Cache  309
8.5.1 Spring 缓存支持  309
8.5.2 Spring Boot 的支持  310
8.5.3 实战  312
8.5.4 切换缓存技术 319
8.6 非关系型数据库NoSQL 320
8.6.1 MongoDB  320
8.6.2 Redis 329
第9 章 Spring Boot 企业级开发  340
9.1 安全控制Spring Security  340
9.1.1 Spring Security 快速入门 340
9.1.2 Spring Boot 的支持  347
9.1.3 实战  348
9.2 批处理Spring Batch  362
9.2.1 Spring Batch 快速入门  362
9.2.2 Spring Boot 的支持  370
9.2.3 实战  371
9.3 异步消息  385
9.3.1 企业级消息代理  386
9.3.2 Spring 的支持 386
9.3.3 Spring Boot 的支持  386
9.3.4 JMS 实战  387
9.3.5 AMQP 实战 391
9.4 系统集成Spring Integration  395
9.4.1 Spring Integration 快速入门  395
9.4.2 Message  395
9.4.3 Channel  395
9.4.4 Message EndPoint 398
9.4.5 Spring Integration Java DSL  400
9.4.6 实战  400
第10 章 Spring Boot 开发部署与测试  407
10.1 开发的热部署 407
10.1.1 模板热部署  407
10.1.2 Spring Loaded  407
10.1.3 JRebel  409
10.1.4 spring-boot-devtools  413
10.2 常规部署  413
10.2.1 jar 形式 413
10.2.2 war 形式  417
10.3 云部署——基于Docker 的部署 419
10.3.1 Dockerfile  419
10.3.2 安装Docker  421
10.3.3 项目目录及文件 421
10.3.4 编译镜像 423
10.3.5 运行  424
10.4 Spring Boot 的测试  424
10.4.1 新建Spring Boot 项目 425
10.4.2 业务代码 425
10.4.3 测试用例 427
10.4.4 执行测试 429
第11 章 应用监控  431
11.1 http 431
11.1.1 新建Spring Boot 项目 432
11.1.2 测试端点 432
11.1.3 定制端点 439
11.1.4 自定义端点  440
11.1.5 自定义HealthIndicator  444
11.2 JMX  447
11.3 SSH  449
11.3.1 新建Spring Boot 项目 449
11.3.2 运行  449
11.3.3 常用命令 451
11.3.4 定制登录用户  452
11.3.5 扩展命令 452
第12 章 分布式系统开发  456
12.1 微服务、原生云应用 456
12.2 Spring Cloud 快速入门  457
12.2.1 配置服务 457
12.2.2 服务发现 457
12.2.3 路由网关 457
12.2.4 负载均衡 457
12.2.5 断路器  458
12.3 实战  458
12.3.1 项目构建 458
12.3.2 服务发现——Discovery（Eureka Server）  459
12.3.3 配置——Config（Config Server）  461
12.3.4 服务模块——Person 服务  463
12.3.5 服务模块——Some 服务  466
12.3.6 界面模块——UI（Ribbon,Feign） 468
12.3.7 断路器监控——Monitor（DashBoard） 473
12.3.8 运行  474
12.4 基于Docker 部署 478
12.4.1 Dockerfile 编写  478
12.4.2 Docker Compose 480
12.4.3 Docker-compose.yml 编写 481
12.4.4 运行  483
附录A 485
A.1 基于JHipster 的代码生成 485
A.2 常用应用属性配置列表 488
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>JavaEE开发的颠覆者
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>全栈技能修炼：使用Angular和SpringBoot打造全栈应用
第 1 章  技术的选型和环境搭建 .................................................................. 1
1.1  技术选型 ................................................................................ 1
1.1.1  前端框架选型 ........................................................................ 2
1.1.2  后端框架选型 ................................................................................ 3
1.1.3  数据库选型 ................................................................. 3
1.2  环境搭建 .................................................................................. 5
1.2.1  基础开发环境安装 ......................................................... 5
1.2.2  IDE 的选择 ....................................................................... 7
1.2.3  字体的选择 .............................................................................. 8
1.2.4  定义通用的代码格式 .................................................................. 9
1.3  工程项目的结构 ......................................................................... 10
1.3.1  前端项目 ............................................................................10
1.3.2  后端项目 ............................................................13
1.3.3  整体项目工程的文件结构 ...........................................14
第 2 章  使用 Angular 快速构造前端原型 .............................. 17
2.1  Angular 基础概念................................................................. 17
2.1.1  安装 Angular CLI ...............................................17
2.1.2  依赖性注入 ..............................................................22
2.1.3  组件 ...........................................................27
2.1.4  指令 .....................................................28
2.1.5  管道 .......................................................30
2.1.6  模块 .................................................................31
2.1.7  模板驱动型表单 ................................................................33
2.1.8  响应式表单 .......................................................................................46
2.2  Angular Material 介绍 ...................................................................... 55
2.2.1  组件类别 ...............................................................................55
2.2.2  布局控件：Sidenav ..............................................................57
2.2.3  Flex 布局和 Angular Flex-layout ...................................................60
2.2.4  封装 Header/Footer/Sidebar ...........................................................62
2.3  添加主题支持 ............................................................................................ 78
2.3.1  Material Design 中对于主题的约束 ...................................................79
2.3.2  主题的明与暗 .........................................................................79
2.3.3  Angular Material 中的主题 ............................................................80
2.4  容器化 Angular 应用 ............................................................................ 83
2.4.1  什么是容器 ....................................................................83
2.4.2  安装 Docker .....................................................84
2.4.3  镜像仓库加速 ......................................................................85
2.4.4  创建 Angular 的 Docker 镜像 ..........................................85
2.4.5  启动容器 .........................................................................................87
2.4.6  使用 docker-compose 组织复杂的环境配置 ................................................88
2.4.7  使用 .dockerignore 文件 ....................................................................91
第 3 章  何谓后端.............................................................................................. 92
3.1  创建一个 Spring Boot 工程 ................................................................... 93
3.1.1  通过 Gradle 创建 .........................................................93
3.1.2  通过 Maven 创建 ..............................................................99
3.1.3  通过 IDE 创建 .................................................................... 103
3.1.4  工程项目的组织 ............................................................ 105
3.2  API 的构建可以如此简单 .......................................................... 109
3.2.1  API 工程结构 ................................................................. 109
3.2.2  领域对象 ....................................................... 111
3.2.3  构造 Controller ....................................................... 112
3.2.4  启动服务 ................................................... 113
3.2.5  测试 API .......................................... 115
3.3  MongoDB 支撑的 API ........................................... 116
3.3.1  什么是 NoSQL ........................................................ 116
3.3.2  MongoDB 的集成 ............................................................ 119
3.3.3  HATEOAS ................................................................................. 124
3.3.4  “魔法”的背后 ......................................................................... 129
3.3.5  让后端也能热更新 ................................................................................... 132
3.4  容器化后端 .............................................................................................. 135  3.4.1
手动创建镜像 ................................................................................... 135
3.4.2  使用 Gradle 自动化 Docker 任务 ................................................. 137
3.4.3  使用 docker-compose 组合服务 ..................................................... 141
3.4.4  IDEA 中的 Gradle 支持 .................................................. 142
3.4.5  在容器中调试 ........................................................ 143
第 4 章  登录鉴权功能的构建 .................................................. 145
4.1  模块化和组件化 ..................................................................... 145
4.1.1  登录的领域模型构建 ............................................................. 145
4.1.2  前端页面设计 .................................................................... 147
4.2  响应式编程初探 ............................................................. 166
4.2.1  不同的视角 ...................................................................... 166
4.2.2  实现一个计数器 ................................................... 169
4.2.3  为什么要使用 Rx ................................................... 177
4.2.4  Observable 的性质 .......................................................... 178
4.2.5  RxJS 的调试 ......................................................................... 180
4.3  前端服务层 .................................................................................... 184
4.3.1  构建“伪”服务 ...................................................................................... 184
4.3.2  构建“聪明组件” ..................................................................... 188
4.3.3  路由处理 ................................................................................ 192
4.4  完成忘记密码前端设计 .............................................................. 194
4.4.1  使用 RxJS 打造短信验证码控件 ................................................ 194
4.4.2  忘记密码向导“笨组件” ................................................... 199
4.4.3  忘记密码的“聪明组件” .............................................. 203
第 5 章  构建后端 API ............................................................. 205
5.1  HyperMedia API 与传统 API .......................................................... 205
5.1.1  领域对象 ........................................................................ 205
5.1.2  API 的可见控制 ............................................................. 211
5.1.3  传统的 API 实现模式 ...................................................... 218
5.2  Spring Data 中的查询 ........................................................ 221
5.2.1  基础概念——Repository ................................................... 221
5.2.2  查询方式 ..................................................................... 223
5.2.3  复杂类型查询 ........................................................... 226
5.2.4  自定义查询 .......................................................................... 228
5.2.5  自定义 Repository ............................................................. 229
5.3  Controller 的构建 ....................................................... 230
5.3.1  改造 TaskRepo 和 UserRepo ............................................... 230
5.3.2  实现 Controller ................................................... 231
5.3.3  登录 .................................................................................... 234
5.3.4  注册 ........................................................................ 235
5.3.5  忘记密码第一步：验证手机........................................................ 236
5.3.6  忘记密码第二步：重置密码................................................................ 244
5.3.7  API 的异常处理 ................................................................... 246
5.4  构建安全的 API 接口 .................................................... 255
5.4.1  为什么要保护 API ....................................................... 256
5.4.2  什么是 JWT ............................................................................... 256
5.4.3  JWT 的生成和解析 .............................................................. 259
5.4.4  权限的设计 .......................................................................... 260
5.4.5  使用 Spring Security 规划角色安全 ................................................ 261
5.4.6  在 Spring Boot 中启用 Spring Security ................................................. 265
5.4.7  改造用户对象 ............................................................................. 266
5.4.8  构建 JWT token 工具类 ............................................................. 268
5.4.9  如何检查任何请求的授权信息 .......................................... 272
5.4.10  得到用户信息 .............................................................. 275
5.4.11  配置 Spring Security....................................................... 277
5.4.12  使用 JWT 进行 API 访问 .................................................. 292
5.5  跨域和 API 文档 ...................................................... 305
5.5.1  跨域解决方案——CORS ........................................ 305
5.5.2  API 文档 ................................................................ 309
第 6 章  前端和 API 的配合 .................................... 322
6.1  响应式的 HTTP API 处理 ................................................ 322
6.1.1  Angular 中的 HTTP 服务 ........................................................... 322
6.1.2  Angular 的开发环境配置 ........................................................ 323
6.1.3  在前端服务中使用 HttpClient ...................................... 327
6.1.4  更改注册表单控件 ............................................. 331
6.2  RxJs 进阶 ........................................................................... 332
6.2.1  改造登录表单 ................................................................. 332
6.2.2  RxJs 的高阶操作符 ...................................................... 333
6.2.3  合并操作符 ........................................................................... 339
6.3  HTTP 拦截 ........................................................................ 342
6.3.1  实现一个简单的 HttpInterceptor ................................................. 342
6.3.2  鉴权 HttpInterceptor ..................................................... 343
6.3.3  一个日志拦截器 ................................................................ 345
6.4  Angular 路由 ............................................................... 346
6.4.1  基准锚链接 ................................................................... 346
6.4.2  Router 模块的简介 ....................................................... 347
6.4.3  获取父路由的参数 ................................................. 354
6.4.4  获得前一个路由 ............................................................ 354
6.4.5  Activated Route ......................................................... 354
6.5  安全守卫 ............................................................... 355
6.5.1  激活守卫 .................................................................................. 356
6.5.2  激活子路由守卫 ................................................................. 357
6.5.3  加载守卫 ...................................................... 358
6.5.4  退出守卫 ............................................................................... 359
6.5.5  数据预获取守卫 .............................................................. 359
第 7 章  后端不只是 API ......................................................... 361
7.1  缓存 ................................................................................... 361
7.1.1  配置 Cache ..................................................................... 362
7.1.2  常用的缓存注解 .............................................................. 364
7.1.3  测试缓存是否生效 ......................................................... 366
7.2  Redis 作为缓存框架 ................................................................... 368
7.2.1  Redis 的安装配置 .................................................................. 369
7.2.2  在 Spring Boot 中集成 Redis ........................................................ 370
7.2.3  Redisson ......................................................................... 373
7.3  使用 ElasticSearch 提升搜索性能 ............................................... 375
7.3.1  配置 ................................................................ 375
7.3.2  构建用户查询 API .......................................................... 379
7.4  Spring Boot Actuator 和数据审计 .................................................... 390
7.4.1  初窥审计事件 ......................................................... 390
7.4.2  实现应用的数据审计 ................................................... 394
7.4.3  JaVers 和 Spring Boot 集成 ....................................................... 396
7.5  WebSocket 实时通信服务 ................................................................ 401
7.5.1  HTTP 和 WebSocket 的区别和联系 ................................................ 402
7.5.2  何时使用 WebSocket ............................................................. 403
7.5.3  STOMP ............................................................................. 403
7.5.4  WebSocket 配置 ............................................................ 404
7.5.5  WebScoket 安全 ............................................................................ 406
7.5.6  建立一个实时消息 Controller ............................................... 409
7.5.7  测试 WebSocket ......................................................... 409
7.6  Spring Boot 的自动化测试 ...................................................... 411
第 8 章  前端的工程化 ..................................................................... 422
8.1  使用 Redux 管理状态 ....................................................................... 423
8.1.1  何时需要使用 Redux ............................................................ 423
8.1.2  Redux 的核心概念 .................................................................... 424
8.1.3  在 Angular 中使用 Redux ..................................................... 429
8.1.4  Selector——状态选择器 ................................................................. 434
8.2  使用 Effects 管理的副作用 ................................................................ 437
8.3  使用 @ngrx/entity 提升生产效率 ........................................................ 441
8.4  服务端渲染 ..................................................................................................... 446
8.4.1  Angular Universal 的工作机理 ...................................................... 447
8.4.2  安装依赖 ....................................................................... 447
8.4.3  添加服务器端渲染模块 ......................................................... 448
8.4.4  使用 Node.js Express 构建服务器 ............................................. 450
8.4.5  服务器端渲染中出现重复请求的处理 ............................................ 453
第 9 章  Spring Cloud 打造微服务 ......................................................... 455
9.1  微服务的体系架构 .................................................................. 455
9.1.1  服务即组件 ......................................................................... 456
9.1.2  微服务架构下的组织机构变化 ........................................................... 456
9.1.3  产品化服务 .............................................................................. 458
9.1.4  持续集成和持续发布 .............................................................. 458
9.1.5  监控和报警 ........................................................................... 458
9.1.6  Spring Cloud 项目依赖 ................................................ 459
9.2  配置服务和发现服务 ...................................................... 461
9.2.1  配置中心是什么 .......................................................... 461
9.2.2  发现服务 ............................................................................... 465
9.3  监控服务和路由服务 .............................................................. 472
9.3.1  Spring Boot Admin .............................................................. 473
9.3.2  路由服务 .................................................................................. 478
9.4  微服务的远程调用 ..................................................................................... 485
9.4.1  Feign Client ....................................................................... 485
9.4.2  负载均衡 ......................................................................................... 490
附录 A  常见云服务使用问题汇总 .............................................. 492
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>全栈技能修炼：使用Angular和SpringBoot打造全栈应用
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot实战派
目录
+++++++++入 门 篇
第1章  进入Spring Boot世界  /2
1.1  认识Spring Boot  /2
∣1.1.1  什么是Spring Boot  /2
∣1.1.2  Spring、Spring Boot、Spring Cloud的关系  /4
∣1.1.3  Spring Boot的特色  /5
∣1.1.4  Spring Boot支持的开发语言  /6
∣1.1.5  学习Spring Boot的前景展望  /6
1.2  学习Spring Boot的建议  /7
∣1.2.1  看透本书理论，模仿实战例子  /7
∣1.2.2  利用开发工具自动学习  /7
∣1.2.3  发现新功能的方法  /8
∣1.2.4  建立高阶的思维方式  /9
∣1.2.5  控制版本，降低犯错的代价  /10
∣1.2.6  获取最新、最全的资料  /11
∣1.2.7  学会自己发现和解决问题  /11
∣1.2.8  善于提问，成功一半  /12
第2章  准备开发环境  /14
2.1  搭建环境  /14
∣2.1.1  安装Java开发环境JDK  /14
∣2.1.2  配置JDK的环境变量  /15
2.2  熟悉Maven  /18
∣2.2.1  安装及配置Maven  /18
∣2.2.2  认识其中的pom.xml文件  /19
∣2.2.3  Maven的运作方式  /23
∣2.2.4  配置国内仓库  /23
第3章  使用开发工具  /25
3.1  安装开发工具IDEA及插件  /25
∣3.1.1  安装IDEA  /25
∣3.1.2  配置IDEA的Maven环境  /27
∣3.1.3  安装Spring Assistant插件  /27
∣3.1.4  安装插件Lombok  /28
3.2  【实例1】用Spring Boot输出“Hello World”  /30
∣3.2.1  构建Spring Boot项目  /30
∣3.2.2  编写控制器，实现输出功能  /31
∣3.2.3  在IDEA中运行程序  /33
∣3.2.4  打包成可执行的JAR包  /33
3.3  在Eclipse中开发Spring Boot应用程序  /35
∣3.3.1  安装Eclipse  /35
∣3.3.2  安装Spring Tools 4插件  /35
∣3.3.3  配置Eclipse的Maven环境  /36
∣3.3.4  创建Spring Boot项目  /37
3.4  了解Spring官方开发工具STS  /37
3.5  必会的IDEA实用技能  /38
∣3.5.1  智能提示代码  /38
∣3.5.2  自动提示参数  /39
∣3.5.3  实现自动转义  /39
∣3.5.4  自定义高复用代码块  /40
∣3.5.5  设置注释信息  /41
∣3.5.6  超能的“Alt+Enter”快捷键  /42
∣3.5.7  使用全局配置  /42
∣3.5.8  自动生成语句  /43
3.6  比较IDEA与Eclipse  /44
3.7  如何使用本书源代码  /47
∣3.7.1  在IDEA中使用  /47
∣3.7.2  在Eclipse（STS）中使用  /47
∣
+++++++++基 础 篇
第4章  Spring Boot基础  /50
4.1  了解Spring Boot  /50
∣4.1.1  了解Spring Boot项目结构  /50
∣4.1.2  了解Spring Boot的入口类  /51
∣4.1.3  了解Spring Boot的自动配置  /52
∣4.1.4  了解Spring Boot热部署  /52
∣4.1.5  【实例2】定制启动画面  /53
4.2  Spring Boot的常用注解  /54
∣4.2.1  什么是注解式编程  /55
∣4.2.2  了解系统注解  /55
∣4.2.3  Spring Boot的常用注解  /56
4.3  使用配置文件  /61
∣4.3.1  【实例3】演示如何使用application.yml文件  /62
∣4.3.2  【实例4】演示如何使用application.properties文件  /65
∣4.3.3  【实例5】用application.yml和application.properties配置多环境  /67
4.4  Spring Boot的Starter  /69
∣4.4.1  了解Starter  /69
∣4.4.2  使用Starter  /70
第5章  分层开发Web应用程序  /71
5.1  应用程序分层开发模式——MVC  /71
∣5.1.1  了解MVC模式  /71
∣5.1.2  MVC和三层架构的关系  /72
5.2  使用视图技术Thymeleaf  /73
∣5.2.1  认识Thymeleaf  /73
∣5.2.2  基础语法  /75
∣5.2.3  处理循环遍历  /78
∣5.2.4  处理公共代码块  /80
∣5.2.5  处理分页  /81
∣5.2.6  验证和提示错误消息  /82
∣5.2.7  【实例6】编写Thymeleaf视图以展示数据  /83
5.3  使用控制器  /85
∣5.3.1  常用注解  /85
∣5.3.2  将URL映射到方法  /86
∣5.3.3  处理HTTP请求的方法  /87
∣5.3.4  处理内容类型  /89
∣5.3.5  在方法中使用参数  /90
5.4  理解模型  /93
5.5  【实例7】实现MVC模式的Web应用程序  /94
∣5.5.1  添加依赖  /94
∣5.5.2  创建实体模型  /95
∣5.5.3  创建控制器  /95
∣5.5.4  创建用于展示的视图  /96
5.6  验证数据  /96
∣5.6.1  认识内置的验证器Hibernate∣validator  /96
∣5.6.2  自定义验证功能  /98
∣5.6.3  【实例8】验证表单数据并实现数据的自定义验证  /99
第6章  响应式编程  /103
6.1  认识响应式编程  /103
∣6.1.1  什么是WebFlux  /103
∣6.1.2  比较MVC和WebFlux  /103
∣6.1.3  认识Mono和Flux  /105
∣6.1.4  开发WebFlux的流程  /106
6.2  【实例9】用注解式开发实现Hello World  /107
∣6.2.1  配置WebFlux依赖  /107
∣6.2.2  编写控制器  /107
6.3  【实例10】用注解式开发实现数据的增、删、改、查  /108
∣6.3.1  创建实体类  /108
∣6.3.2  编写控制器  /108
∣6.3.3  测试API功能  /110
6.4  【实例11】用响应式开发方式开发WebFlux  /111
∣6.4.1  编写处理器类Handler  /111
∣6.4.2  编写路由器类Router  /112
6.5  【实例12】用WebFlux模式操作MongoDB数据库,实现数据的增、删、改、查功能  /112
∣6.5.1  添加依赖  /112
∣6.5.2  创建实体类  /113
∣6.5.3  编写接口  /113
6.5.4  编写增、删、改、查数据的API  /113
∣
+++++++++进 阶 篇
第7章  Spring Boot进阶  /118
7.1  面向切面编程  /118
∣7.1.1  认识Spring AOP  /118
∣7.1.2  【实例13】用AOP方式管理日志  /119
7.2  认识IoC容器和Servlet容器  /121
∣7.2.1  认识容器  /121
∣7.2.2  【实例14】用IoC管理Bean  /123
∣7.2.3  【实例15】用Servlet处理请求  /125
7.3  过滤器与监听器  /126
∣7.3.1  认识过滤器  /126
∣7.3.2  【实例16】实现过滤器  /128
∣7.3.3  认识监听器  /128
∣7.3.4  【实例17】实现监听器  /129
7.4  自动配置  /130
∣7.4.1  自定义入口类  /130
∣7.4.2  自动配置的原理  /131
∣7.4.3  【实例18】自定义Starter  /133
7.5  元注解  /136
∣7.5.1  了解元注解  /136
∣7.5.2  【实例19】自定义注解  /137
7.6  异常处理  /138
∣7.6.1  认识异常处理  /138
∣7.6.2  使用控制器通知  /141
∣7.6.3  【实例20】自定义错误处理控制器  /142
∣7.6.4  【实例21】自定义业务异常类  /143
7.7  单元测试  /145
∣7.7.1  了解单元测试  /145
∣7.7.2  Spring Boot 的测试库  /145
∣7.7.3  快速创建测试单元  /149
∣7.7.4  【实例22】Controller层的单元测试  /150
∣7.7.5  【实例23】Service层的单元测试  /153
∣7.7.6  【实例24】Repository层的单元测试  /154
第8章  用ORM操作SQL数据库  /156
8.1  认识Java的数据库连接模板JDBCTemplate  /156
∣8.1.1  认识JDBCTemplate  /156
∣8.1.2  【实例25】用JDBCTemplate实现数据的增、删、改、查  /157
∣8.1.3  认识ORM  /161
8.2  JPA——Java持久层API  /161
∣8.2.1  认识Spring Data  /161
∣8.2.2  认识JPA  /162
∣8.2.3  使用JPA  /164
∣8.2.4  了解JPA注解和属性  /165
∣8.2.5  【实例26】用JPA构建实体数据表  /167
8.3  认识JPA的接口  /169
∣8.3.1  JPA接口JpaRepository  /169
∣8.3.2  分页排序接口PagingAndSortingRepository  /169
∣8.3.3  数据操作接口CrudRepository  /170
∣8.3.4  分页接口Pageable和Page  /170
∣8.3.5  排序类Sort  /171
8.4  JPA的查询方式  /171
∣8.4.1  使用约定方法名  /171
∣8.4.2  用JPQL进行查询  /173
∣8.4.3  用原生SQL进行查询  /174
∣8.4.4  用Specifications进行查询  /175
∣8.4.5  用ExampleMatcher进行查询  /177
∣8.4.6  用谓语QueryDSL进行查询  /177
∣8.4.7  用NamedQuery进行查询  /177
8.5  【实例27】用JPA开发文章管理模块  /178
∣8.5.1  实现文章实体  /178
∣8.5.2  实现数据持久层  /179
∣8.5.3  实现服务接口和服务接口的实现类  /179
∣8.5.4  实现增、删、改、查的控制层API功能  /180
∣8.5.5  实现增、删、改、查功能的视图层  /182
8.6  实现自动填充字段  /185
8.7  掌握关系映射开发  /187
∣8.7.1  认识实体间关系映射  /187
∣8.7.2  【实例28】实现“一对一”映射  /188
∣8.7.3  【实例29】实现“一对多”映射  /192
∣8.7.4  【实例30】实现“多对多”映射  /195
8.8  认识MyBatis——Java数据持久层框架  /197
∣8.8.1  CRUD注解  /198
∣8.8.2  映射注解  /198
∣8.8.3  高级注解  /199
8.9  【实例31】用MyBatis实现数据的增加、删除、修改、查询和分页  /200
∣8.9.1  创建Spring Boot项目并引入依赖  /201
∣8.9.2  实现数据表的自动初始化  /201
∣8.9.3  实现实体对象建模  /202
∣8.9.4  实现实体和数据表的映射关系  /202
∣8.9.5  实现增、删、改、查功能  /203
∣8.9.6  配置分页功能  /204
∣8.9.7  实现分页控制器  /205
∣8.9.8  创建分页视图  /206
8.10  比较JPA与MyBatis  /207
第9章  接口架构风格——RESTful  /209
9.1  REST——前后台间的通信方式  /209
∣9.1.1  认识REST  /209
∣9.1.2  认识HTTP方法与CRUD动作映射  /210
∣9.1.3  实现RESTful风格的数据增、删、改、查  /210
9.2  设计统一的RESTful风格的数据接口  /212
∣9.2.1  版本控制  /212
∣9.2.2  过滤信息  /213
∣9.2.3  确定HTTP的方法  /213
∣9.2.4  确定HTTP的返回状态  /213
∣9.2.5  定义统一返回的格式  /214
9.3  【实例32】为手机APP、PC、H5网页提供统一风格的API  /214
∣9.3.1  实现响应的枚举类  /214
∣9.3.2  实现返回的对象实体  /215
∣9.3.3  封装返回结果  /215
∣9.3.4  统一处理异常  /215
∣9.3.5  编写测试控制器  /219
∣9.3.6  实现数据的增、删、改、查控制器  /220
∣9.3.7  测试数据  /221
9.4  【实例33】用Swagger实现接口文档  /222
∣9.4.1  配置Swagger  /222
∣9.4.2  编写接口文档  /224
9.5  用RestTemplate发起请求  /224
∣9.5.1  认识RestTemplate  /224
∣9.5.2  【实例34】用RestTemplate发送GET请求  /225
∣9.5.3  【实例35】用RestTemplate发送POST请求  /228
∣9.5.4  用RestTemplate发送PUT和DELETE请求  /231
第10章  集成安全框架，实现安全认证和授权  /233
10.1  Spring Security——Spring的安全框架  /233
∣10.1.1  认识Spring Security  /233
∣10.1.2  核心类  /235
10.2  配置Spring Security  /240
∣10.2.1  继承WebSecurityConfigurer Adapter  /240
∣10.2.2  配置自定义策略  /240
∣10.2.3  配置加密方式  /242
∣10.2.4  自定义加密规则  /242
∣10.2.5  配置多用户系统  /242
∣10.2.6  获取当前登录用户信息的几种方式  /244
10.3  【实例36】用Spring Security实现后台登录及权限认证功能  /246
∣10.3.1  引入依赖  /246
∣10.3.2  创建权限开放的页面  /246
∣10.3.3  创建需要权限验证的页面  /247
∣10.3.4  配置Spring Security  /247
∣10.3.5  创建登录页面  /248
∣10.3.6  测试权限  /249
10.4  权限控制方式  /249
∣10.4.1  Spring EL权限表达式  /249
∣10.4.2  通过表达式控制URL权限  /250
∣10.4.3  通过表达式控制方法权限  /252
∣10.4.4  【实例37】使用JSR∣250注解  /254
∣10.4.5  【实例38】实现RBAC权限模型  /256
10.5  认识JWT  /258
10.6  【实例39】用JWT技术为Spring Boot的API增加认证和授权保护  /260
∣10.6.1  配置安全类  /260
∣10.6.2  处理注册  /261
∣10.6.3  处理登录  /262
∣10.6.4  测试多方式注册和登录  /264
∣10.6.5  测试token方式登录和授权  /265
10.7  Shiro——Apache通用安全框架  /266
∣10.7.1  认识Shiro安全框架  /266
∣10.7.2  认识Shiro的核心组件  /267
10.8  【实例40】用Shiro实现管理后台的动态权限功能  /267
∣10.8.1  创建实体  /267
∣10.8.2  实现视图模板  /270
∣10.8.3  进行权限配置  /271
∣10.8.4  实现认证身份功能  /271
∣10.8.5  测试权限  /272
10.9   对比Spring Security与Shiro  /273
第11章  集成Redis，实现高并发  /275
11.1  认识Spring Cache  /275
∣11.1.1  声明式缓存注解  /276
∣11.1.2  【实例41】用Spring Cache进行缓存管理  /278
∣11.1.3  整合Ehcache  /281
∣11.1.4  整合Caffeine  /281
11.2  认识Redis  /282
∣11.2.1  对比Redis与Memcached  /282
∣11.2.2  Redis的适用场景  /285
11.3  Redis的数据类型  /285
11.4  用RedisTemplate操作Redis的5种数据类型  /287
∣11.4.1  认识opsFor方法  /287
∣11.4.2  【实例42】操作字符串  /287
∣11.4.3  【实例43】操作散列  /290
∣11.4.4  【实例44】操作列表  /294
∣11.4.5  【实例45】操作集合  /298
∣11.4.6  【实例46】操作有序集合  /301
∣11.4.7  比较RedisTemplate和StringRedisTemplate  /306
11.5  【实例47】用Redis和MyBatis完成缓存数据的增加、删除、修改、查询功能  /306
∣11.5.1  在Spring Boot中集成Redis  /306
∣11.5.2  配置Redis类  /307
∣11.5.3  创建测试实体类  /308
∣11.5.4  实现实体和数据表的映射关系  /309
∣11.5.5  创建Redis缓存服务层  /309
∣11.5.6  完成增、删、改、查测试API  /310
11.6  【实例48】用Redis和JPA实现缓存文章和点击量  /311
∣11.6.1  实现缓存文章  /311
∣11.6.2  实现统计点击量  /312
∣11.6.3  实现定时同步  /312
11.7  【实例49】实现分布式Session  /313
∣11.7.1  用Redis实现Session共享  /313
∣11.7.2  配置Nginx实现负载均衡  /314
第12章  集成RabbitMQ，实现系统间的数据交换  /316
12.1  认识RabbitMQ  /316
∣12.1.1  介绍RabbitMQ  /316
∣12.1.2  使用场景  /317
∣12.1.3  特性  /318
12.2  RabbitMQ的基本概念  /318
∣12.2.1  生产者、消费者和代理  /318
∣12.2.2  消息队列  /319
∣12.2.3  交换机  /319
∣12.2.4  绑定  /320
∣12.2.5  通道  /321
∣12.2.6  消息确认  /321
12.3  RabbitMQ的6种工作模式  /321
∣12.3.1  简单模式  /321
∣12.3.2  工作队列模式  /321
∣12.3.3  交换机模式  /322
∣12.3.4  Routing转发模式  /322
∣12.3.5  主题转发模式  /322
∣12.3.6  RPC模式  /323
12.4  认识AmqpTemplate接口  /323
∣12.4.1  发送消息  /324
∣12.4.2  接收消息  /324
∣12.4.3  异步接收消息  /325
12.5  在Spring Boot中集成RabbitMQ  /325
∣12.5.1  安装RabbitMQ  /325
∣12.5.2  界面化管理RabbitMQ  /326
∣12.5.3  在Spring Boot中配置RabbitMQ  /327
12.6  在Spring Boot中实现RabbitMQ的4种发送/接收模式  /328
∣12.6.1  【实例50】实现发送和接收队列  /328
∣12.6.2  【实例51】实现发送和接收对象  /330
∣12.6.3  【实例52】实现用接收器接收多个主题  /331
∣12.6.4  【实例53】实现广播模式  /334
12.7  【实例54】实现消息队列延迟功能  /336
第13章  集成NoSQL数据库，实现搜索引擎  /339
13.1  Elasticsearch——搜索应用服务器  /339
∣13.1.1  什么是搜索引擎  /339
∣13.1.2  用数据库实现搜索功能  /339
∣13.1.3  认识Elasticsearch  /343
∣13.1.4  Elasticsearch应用案例  /343
∣13.1.5  对比Elasticsearch与MySQL  /343
∣13.1.6  认识ElasticSearchRepository  /344
∣13.1.7  认识ElasticsearchTemplate  /345
∣13.1.8  认识注解@Document  /345
∣13.1.9  管理索引  /347
13.2  【实例55】用ELK管理Spring Boot应用程序的日志  /348
∣13.2.1  安装Elasticsearch  /348
∣13.2.2  安装Logstash  /349
∣13.2.3  安装Kibana  /350
∣13.2.4  配置Spring Boot项目  /350
∣13.2.5  创建日志计划任务  /351
∣13.2.6  用Kibana查看管理日志  /352
13.3  【实例56】在Spring Boot中集成Elasticsearch，实现增、删、改、查功能  /353
∣13.3.1  集成Elasticsearch  /353
∣13.3.2  创建实体  /353
∣13.3.3  实现增、删、改、查文档的功能  /355
13.4  Elasticsearch查询  /356
∣13.4.1  自定义方法  /356
∣13.4.2  精准查询  /357
∣13.4.3  模糊查询  /359
∣13.4.4  范围查询  /362
∣13.4.5  组合查询  /362
∣13.4.6  分页查询  /363
∣13.4.7  聚合查询  /364
13.5  【实例57】实现产品搜索引擎  /365
13.6  Solr——搜索应用服务器  /367
∣13.6.1  了解Solr  /367
∣13.6.2  安装配置Solr  /367
∣13.6.3  整合Spring Boot和Solr  /368
13.7  【实例58】在Sping Boot中集成Solr，实现数据的增、删、改和查  /369
∣13.7.1  创建User类  /369
∣13.7.2  测试增、删、改、查功能  /369
13.8  对比Elasticsearch和Solr  /372
∣
+++++++++项目实战篇
第14章  开发企业级通用的后台系统  /376
14.1  用JPA实现实体间的映射关系  /376
∣14.1.1  创建用户实体  /376
∣14.1.2  创建角色实体  /377
∣14.1.3  创建权限实体  /378
14.2  用Spring Security实现动态授权（RBAC）功能  /380
∣14.2.1  实现管理（增、删、改、查）管理员角色功能  /380
∣14.2.2  实现管理权限功能  /381
∣14.2.3  实现管理管理员功能  /383
∣14.2.4  配置安全类  /384
∣14.2.5  实现基于RBAC权限控制功能  /386
14.3  监控Spring Boot应用  /387
∣14.3.1  在Spring Boot中集成Actuator  /387
∣14.3.2  在Spring Boot中集成Spring Boot Admin应用监控  /390
∣14.3.3  在Spring Boot中集成Druid 连接池监控  /392
第15章  实现一个类似“京东”的电子商务商城  /394
15.1  用Spring Security实现会员系统  /394
∣15.1.1  实现会员实体  /394
∣15.1.2  实现会员接口  /395
∣15.1.3  实现用户名、邮箱、手机号多方式注册功能  /396
∣15.1.4  实现用RabbitMQ发送会员注册验证邮件  /398
∣15.1.5  实现用户名、邮箱、手机号多方式登录功能  /399
15.2  整合会员系统（Web、APP多端、多方式注册登录）和后台系统  /400
∣15.3  实现购物系统  /401
∣15.3.1  设计数据表  /401
∣15.3.2  实现商品展示功能  /402
∣15.3.3  实现购物车功能  /403
∣15.3.4  用Redis实现购物车数据持久化  /404
15.4  用Redis实现分布式秒杀系统  /406
∣15.4.1  实现抢购功能，解决并发超卖问题  /406
∣15.4.2  缓存页面和限流  /409
15.5  用RabbitMQ实现订单过期取消功能  /409
15.6  实现结算和支付功能  /411
∣15.6.1  实现结算生成订单功能  /411
∣15.6.2  集成支付  /412
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot实战派
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入实践Boost
译者序
前言
第1章 开始编写应用程序 1
秘笈1 获取配置选项 1
秘笈2 在容器/变量中存储任意值 5
秘笈3 在变量/容器中存储多个选择类型 7
秘笈4 使用更安全的方式处理存储多个选择类型的容器 8
秘笈5 返回一个值或在没有值的地方返回一个标志 12
秘笈6 从函数返回数组 14
秘笈7 将多个值结合成一个值 16
秘笈8 重新排列函数的参数 18
秘笈9 绑定一个值作为函数参数 21
秘笈10 使用C++11移动仿真 23
秘笈11 制作一个不可复制的类 26
秘笈12 制作一个不可复制但可移动的类 28
第2章 数据转换 32
秘笈13 将字符串转换为数值 32
秘笈14 将数值转换为字符串 34
秘笈15 将数值转换为数值 36
秘笈16 用户定义类型与字符串的相互转换 39
秘笈17 强制转换多态对象 41
秘笈18 解析简单的输入 43
秘笈19 解析输入 46
第3章 资源管理 51
秘笈20 管理作用域内的类指针 51
秘笈21 跨方法使用的类指针的引用计数 53
秘笈22 管理作用域内的数组指针 55
秘笈23 跨方法使用的数组指针的引用计数 56
秘笈24 在变量中存储任意函数化对象 59
秘笈25 在变量中传递函数指针 61
秘笈26 在变量中传递C++11中的lambda函数 62
秘笈27 指针的容器 63
秘笈28 在退出作用域时做一些事 66
秘笈29 用派生类的成员初始化基类 67
第4章 编译时技巧 71
秘笈30 在编译时检查大小 71
秘笈31 在整数类型中启用模板函数 75
秘笈32 在实数类型中禁用模板函数 77
秘笈33 从数值创建一个类型 80
秘笈34 实现类型特征 82
秘笈35 为模板参数选择最佳操作符 83
秘笈36 在C++03中获取一个表达式的类型 86
第5章 多线程 89
秘笈37 创建一个执行线程 89
秘笈38 对公共资源的同步访问 92
秘笈39 利用原子性快速访问公共资源 96
秘笈40 创建work_queue类 98
秘笈41 多读者单写者锁 102
秘笈42 创建对每个线程都是独占的变量 104
秘笈43 中断线程 106
秘笈44 操纵一组线程 108
第6章 处理任务 109
秘笈45 注册任务用于处理任意数据类型 109
秘笈46 制作定时器并把定时器事件作为任务处理 113
秘笈47 将网络通信作为一个任务 116
秘笈48 接受传入的连接 121
秘笈49 并行执行不同的任务 125
秘笈50 输送任务处理 127
秘笈51 制作一个非阻塞障碍 131
秘笈52 存储一个异常并用它制作任务 135
秘笈53 作为任务获取和处理系统信号 138
第7章 处理字符串 142
秘笈54 改变大小写及不区分大小写的比较 142
秘笈55 使用正则表达式匹配字符串 144
秘笈56 使用正则表达式查找和替换字符串 147
秘笈57 使用安全的类似printf的函数格式化字符串 150
秘笈58 替换和删除字符串 152
秘笈59 用两个迭代器表示字符串 153
秘笈60 使用string类型的引用 156
第8章 元编程 160
秘笈61 使用“类型向量”类型 160
秘笈62 操作类型向量 164
秘笈63 在编译时获取一个函数的结果类型 168
秘笈64 制作高阶元函数 170
秘笈65 懒惰地对元函数求值 172
秘笈66 将所有元组元素转换为字符串 175
秘笈67 拆分元组 178
第9章 容器 182
秘笈68 以超快速的方式比较字符串 182
秘笈69 使用无序集合和映射 186
秘笈70 制作值也是一个键的映射 189
秘笈71 使用多索引容器 192
秘笈72 从单链表和内存池获得好处 197
秘笈73 使用平面关联式容器 200
第10章 收集平台和编译器信息 204
秘笈74 检测int128支持 204
秘笈75 检测RTTI支持 206
秘笈76 使用C++11外部模板加快编译速度 208
秘笈77 使用更简单的方法编写元函数 209
秘笈78 在C++11中减少代码量和提高用户定义类型的性能 211
秘笈79 导入和导出函数和类的可移植方式 213
秘笈80 检测Boost版本和最新的功能 215
第11章 与系统打交道 218
秘笈81 列出目录中的文件 218
秘笈82 创建及删除文件和目录 220
秘笈83 将数据从一个进程快速传递到另一个进程 222
秘笈84 同步进程间通信 225
秘笈85 在共享内存中使用指针 228
秘笈86 读取文件的最快方式 229
秘笈87 协程——保存状态并推迟执行 232
第12章 揭开冰山一角 235
秘笈88 使用图形 235
秘笈89 可视化图形 239
秘笈90 使用真随机数发生器 241
秘笈91 使用可移植的数学函数 243
秘笈92 编写测试用例 244
秘笈93 将多个测试用例结合到一个测试模块 246
秘笈94 处理图像 248
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入实践Boost
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot编程思想（核心篇）
第1部分  总览Spring Boot
第1章  初览Spring Boot  2
1.1  Spring Framework时代  2
1.2  Spring Boot简介  3
1.3  Spring Boot的特性  5
1.4  准备运行环境  5
1.4.1  装配JDK 8  5
1.4.2  装配Maven  6
1.4.3  装配IDE（集成开发环境）  8
第2章  理解独立的Spring应用  9
2.1  创建Spring Boot应用  10
2.1.1  命令行方式创建Spring Boot应用  11
2.1.2  图形化界面创建Spring Boot应用  21
2.1.3  创建Spring Boot应用可执行JAR  29
2.2  运行Spring Boot应用  31
2.2.1  执行Spring Boot应用可执行JAR  32
2.2.2  Spring Boot应用可执行JAR资源结构  32
2.2.3  FAT JAR和WAR执行模块——spring-boot-loader  36
2.2.4  JarLauncher的实现原理  40
第3章  理解固化的Maven依赖  58
3.1  spring-boot-starter-parent与spring-boot-dependencies简介  58
3.2  理解spring-boot-starter-parent与spring-boot- dependencies  61
第4章  理解嵌入式Web容器  70
4.1  嵌入式Servlet Web容器  71
4.1.1  Tomcat作为嵌入式Servlet Web容器  72
4.1.2  Jetty作为嵌入式Servlet Web容器  77
4.1.3  Undertow作为嵌入式Servlet Web容器  80
4.2  嵌入式Reactive Web容器  82
4.2.1  UndertowServletWebServer作为嵌入式Reactive Web容器  82
4.2.2  UndertowWebServer作为嵌入式Reactive Web容器  84
4.2.3  WebServerInitializedEvent  91
4.2.4  Jetty作为嵌入式Reactive Web容器  93
4.2.5  Tomcat作为嵌入式Reactive Web容器  94
第5章  理解自动装配  96
5.1  理解@SpringBootApplication注解语义  97
5.2  @SpringBootApplication属性别名  103
5.3  @SpringBootApplication标注非引导类  107
5.4  @EnableAutoConfiguration激活自动装配  108
5.5  @SpringBootApplication“继承”@Configuration CGLIB提升特性  110
5.6  理解自动配置机制  112
5.7  创建自动配置类  116
第6章  理解Production- Ready特性  119
6.1  理解Production-Ready一般性定义  120
6.2  理解Spring Boot Actuator  123
6.3  Spring Boot Actuator Endpoints  124
6.4  理解“外部化配置  129
6.5  理解“规约大于配置”  132
6.6  小马哥有话说  134
6.6.1  Spring Boot作为微服务中间件  134
6.6.2  Spring Boot作为Spring Cloud基础设施  135
6.7  下一站：走向自动装配  135
第2部分  走向自动装配
第7章  走向注解驱动编程（Annotation-Driven）  138
7.1  注解驱动发展史  138
7.1.1  注解驱动启蒙时代：Spring Framework 1.x  138
7.1.2  注解驱动过渡时代：Spring Framework 2.x  139
7.1.3  注解驱动黄金时代：Spring Framework 3.x  142
7.1.4  注解驱动完善时代：Spring Framework 4.x  146
7.1.5  注解驱动当下时代：Spring Framework 5.x  151
7.2  Spring核心注解场景分类  152
7.3  Spring注解编程模型  154
7.3.1  元注解（Meta-Annotations）  154
7.3.2  Spring模式注解（Stereotype Annotations）  155
7.3.3  Spring组合注解（Composed Annotations）  187
7.3.4  Spring注解属性别名和覆盖（Attribute Aliases and Overrides）  195
第8章  Spring注解驱动设计模式  225
8.1  Spring @Enable模块驱动  225
8.1.1  理解@Enable模块驱动  225
8.1.2  自定义@Enable模块驱动  226
8.1.3  @Enable模块驱动原理  236
8.2  Spring Web自动装配  250
8.2.1  理解Web自动装配  250
8.2.2  自定义Web自动装配  254
8.2.3  Web自动装配原理  258
8.3  Spring条件装配  270
8.3.1  理解配置条件装配  271
8.3.2  自定义配置条件装配  274
8.3.3  配置条件装配原理  277
第9章  Spring Boot自动装配  292
9.1  理解Spring Boot自动装配  295
9.1.1  理解@EnableAutoConfiguration  296
9.1.2  优雅地替换自动装配  298
9.1.3  失效自动装配  298
9.2  Spring Boot自动装配原理  299
9.2.1  @EnableAutoConfiguration读取候选装配组件  301
9.2.2  @EnableAutoConfiguration排除自动装配组件  305
9.2.3  @EnableAutoConfiguration过滤自动装配组件  307
9.2.4  @EnableAutoConfiguration自动装配事件  313
9.2.5  @EnableAutoConfiguration自动装配生命周期  317
9.2.6  @EnableAutoConfiguration排序自动装配组件  324
9.2.7  @EnableAutoConfiguration自动装配BasePackages  332
9.3  自定义Spring Boot自动装配  337
9.3.1  自动装配Class命名的潜规则  338
9.3.2  自动装配package命名的潜规则  338
9.3.3  自定义Spring Boot Starter  340
9.4  Spring Boot条件化自动装配  346
9.4.1  Class条件注解  347
9.4.2  Bean条件注解  358
9.4.3  属性条件注解  370
9.4.4  Resource条件注解  376
9.4.5  Web应用条件注解  391
9.4.6  Spring表达式条件注解  397
9.5  小马哥有话说  401
9.6  下一站：理解SpringApplication  402
第3部分  理解SpringApplication
第10章  SpringApplication初始化阶段  405
10.1  SpringApplication构造阶段  405
10.1.1  理解SpringApplication主配置类  406
10.1.2  SpringApplication的构造过程  410
10.1.3  推断Web应用类型  411
10.1.4  加载Spring应用上下文初始化器（ApplicationContextInitializer）  412
10.1.5  加载Spring应用事件监听器（ApplicationListener）  415
10.1.6  推断应用引导类  416
10.2  SpringApplication配置阶段  417
10.2.1  自定义SpringApplication  417
10.2.2  调整SpringApplication设置  417
10.2.3  增加SpringApplication配置源  420
10.2.4  调整Spring Boot外部化配置  423
第11章  SpringApplication运行阶段  425
11.1  SpringApplication准备阶段  425
11.1.1  理解SpringApplicationRunListeners  426
11.1.2  理解SpringApplicationRunListener  428
11.1.3  理解Spring Boot事件  431
11.1.4  理解Spring事件/监听机制  432
11.1.5  理解Spring Boot事件/监听机制  492
11.1.6  装配ApplicationArguments  509
11.1.7  准备ConfigurableEnvironment  512
11.1.8  创建Spring应用上下文（ConfigurableApplicationContext）  512
11.1.9  Spring应用上下文运行前准备  516
11.2  Spring应用上下文启动阶段  537
11.3  Spring应用上下文启动后阶段  539
11.3.1  afterRefresh方法签名的变化  540
11.3.2  afterRefresh方法语义的变化  541
11.3.3  Spring Boot事件ApplicationStartedEvent语义的变化  543
11.3.4  执行CommandLineRunner和ApplicationRunner  548
第12章  SpringApplication结束阶段  550
12.1  SpringApplication正常结束  550
12.2  SpringApplication异常结束  555
12.2.1  Spring Boot异常处理  556
12.2.2  错误分析报告器——FailureAnalysisReporter  562
12.2.3  自定义实现FailureAnalyzer和FailureAnalysisReporter  564
12.2.4  Spring Boot 2.0重构handleRunFailure和reportFailure方法  566
12.2.5  Spring Boot 2.0的SpringBootExceptionReporter接口  567
第13章  Spring Boot应用退出  571
13.1  Spring Boot应用正常退出  572
13.1.1  ExitCodeGenerator Bean生成退出码  572
13.1.2  ExitCodeGenerator Bean退出码使用场景  576
13.2  Spring Boot应用异常退出  580
13.2.1  ExitCodeGenerator异常使用场景  582
13.2.2  ExitCodeExceptionMapper Bean映射异常与退出码  587
13.2.3  退出码用于SpringApplication异常结束  589
13.3  小马哥有话说  594
13.4  下一站：运维篇  596
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot编程思想（核心篇）
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Cloud微服务架构实战派
-------------第1篇 入门
-
第1章 进入微服务世界 2
1.1 系统架构的发展阶段 2
|1.1.1 单体应用阶段 2
|1.1.2 垂直应用阶段 3
|1.1.3 分布式系统阶段 4
|1.1.4 服务治理阶段 5
|1.1.5 微服务阶段 6
|1.1.6 服务网格阶段 6
1.2 主流的微服务框架 8
|1.2.1 主流微服务框架一览表 8
|1.2.2 Dubbo 9
|1.2.3 Spring Cloud 10
1.3 服务网格（Service Mesh）框架Istio 11
1.4 比较Dubbo、Spring Cloud和Istio 12
|1.4.1 对比架构 12
|1.4.2 对比各项数据 15
|1.4.3 总结 15
-
第2章 准备开发环境和工具 17
2.1 搭建环境 17
|2.1.1 安装Java开发环境JDK 17
|2.1.2 配置JDK的环境变量 18
2.2 安装和配置Maven 20
|2.2.1 安装和配置 20
|2.2.2 认识pom.xml文件 22
|2.2.3 了解Maven的运作方式 25
|2.2.4 配置国内仓库 26
2.3 安装及配置开发工具IDEA 27
|2.3.1 安装IDEA 27
|2.3.2 配置IDEA的Maven环境 29
|2.3.3 安装Spring Assistant插件 29
2.4 安装及配置开发工具Eclipse 30
|2.4.1 安装Eclipse 30
|2.4.2 安装Spring Tools 4插件 30
|2.4.3 配置Eclipse的Maven环境 31
|2.4.4 创建Spring Cloud项目 32
2.5 熟悉Spring官方开发工具STS 32
2.6 如何使用本书源码 33
|2.6.1 在IDEA中使用 33
|2.6.2 在Eclipse（STS）中使用 33
-
第3章 实例1：用Spring Cloud实现一个微服务系统 35
3.1 本实例的架构和实现步骤 35
3.2 创建Spring Cloud项目 36
3.3 用Eureka实现“服务中心” 37
|3.3.1 添加配置 37
|3.3.2 实现“服务中心”集群（满足高可用） 38
|3.3.3 打包和部署“服务中心” 40
3.4 用Eureka实现“服务提供者” 42
|3.4.1 实现“服务提供者”的客户端 42
|3.4.2 实现“服务提供者”的接口 44
|3.4.3 检查服务的有效性 44
|3.4.4 实现“服务提供者”集群 44
3.5 用Feign实现“服务消费者” 45
|3.5.1 用Feign实现“服务消费者”的客户端 45
|3.5.2 调用“服务提供者”的接口 46
3.6 测试微服务系统 48
-
-------------第2篇 基础
-
第4章 认识微服务 50
4.1 微服务的优点和缺点 50
|4.1.1 微服务的优点 50
|4.1.2 微服务的缺点 52
4.2 微服务设计的原则 53
4.3 领域驱动设计（DDD） 56
4.4 跨服务的事务管理模式 57
|4.4.1 2PC/3PC算法模式 58
|4.4.2 TCC事务机制模式 60
|4.4.3 消息中间件模式 60
|4.4.4 Saga模式 61
|4.4.5 Paxos算法模式 61
4.5 跨服务的查询模式 62
|4.5.1 API组合器模式 62
|4.5.2 CQRS模式 62
4.6 微服务部署 63
|4.6.1 部署模式 63
|4.6.2 升级模式 64
4.7 微服务架构与云原生的关系 66
|4.7.1 了解云原生 66
|4.7.2 微服务架构和云原生架构的区别 67
-
第5章 Spring Cloud基础 68
5.1 了解Spring Cloud生态 68
|5.1.1 Spring Cloud的总体架构 68
|5.1.2 主要子项目 69
|5.1.3 Netflix家族项目 70
|5.1.4 阿里巴巴家族项目 71
|5.1.5 其他子项目 72
|5.1.6 常用的技术栈 73
5.2 了解Spring Cloud 74
|5.2.1 Spring Cloud与Spring、Spring Boot的关系 74
|5.2.2 Spring Cloud的版本 76
|5.2.3 Spring Cloud项目的结构 77
|5.2.4 Spring Cloud的入口类 78
|5.2.5 Spring Cloud的自动配置 78
|5.2.6 开箱即用 79
5.3 了解注解 80
|5.3.1 什么是注解 80
|5.3.2 Spring Boot的系统注解 80
|5.3.3 Spring Boot的常用注解 81
|5.3.4 Spring Cloud的常用注解 86
5.4 了解Starter 87
|5.4.1 Spring Boot的Starter 87
|5.4.2 Spring Cloud的Starter 88
|5.4.3 如何使用Starter 88
5.5 使用配置文件 88
|5.5.1 配置文件application.properties 89
|5.5.2 实例2：使用配置文件application.properties 91
|5.5.3 配置文件application.yml 93
|5.5.4 实例3：使用配置文件application.yml 94
|5.5.5 实例4：用application.yml和application.properties配置多环境 98
|5.5.6 了解application.yml和application.properties的迁移 100
|5.5.7 比较配置文件bootstrap和application 100
5.6 应用程序分层开发模式——MVC 101
|5.6.1 了解MVC模式 101
|5.6.2 MVC和三层架构的关系 102
5.7 响应式编程——WebFlux 103
|5.7.1 什么是WebFlux 103
|5.7.2 比较MVC和WebFlux 103
|5.7.3 比较Mono和Flux 105
|5.7.4 开发WebFlux的流程 106
5.8 了解Spring Cloud Commons 106
|5.8.1 Spring Cloud的上下文 107
|5.8.2 Spring Cloud的公共抽象类 107
-
-------------第3篇 进阶
-
第6章 用Consul实现服务治理 110
6.1 为什么需要服务治理 110
6.2 主流的“服务中心” 111
|6.2.1 Eureka 111
|6.2.2 Zookeeper 112
|6.2.3 ETCD 113
|6.2.4 Consul 113
|6.2.5 比较Eureka、Consul、ETCD、Zookeeper和Nacos 114
|6.2.6 了解CAP（一致性、可用性、分区容错性） 115
|6.2.7 在容器化时代如何选择“服务中心” 115
6.3 认识“服务发现”接口 116
|6.3.1 如何进行服务的注册和发现 116
|6.3.2 @EnableDiscoveryClient与@EnableEurekaClient的区别 117
6.4 认识Consul 117
|6.4.1 Consul的术语 117
|6.4.2 Consul的工作原理 118
|6.4.3 集群的实现原理 119
|6.4.4 健康检查 120
|6.4.5 安装和实现Consul集群 122
|6.4.6 在Linux中构建Consul集群 124
6.5 实例5：用Consul实现“服务提供者”集群和“服务消费者” 125
|6.5.1 实现“服务提供者”集群 126
|6.5.2 实现“服务消费者” 128
6.6 将“服务中心”从Eureka迁移到Consul 129
-
第7章 用Ribbon和Feign实现客户端负载均衡和服务调用 130
7.1 认识负载均衡 130
|7.1.1 服务器端负载均衡 130
|7.1.2 客户端负载均衡 131
7.2 认识Ribbon 131
|7.2.1 Ribbon的工作原理 131
|7.2.2 Ribbon的主要组件 132
|7.2.3 认识负载均衡器 133
|7.2.4 了解注解@LoadBalanced 135
|7.2.5 Ping机制 136
7.3 认识负载均衡策略 137
|7.3.1 Ribbon支持的9大负载均衡策略 137
|7.3.2 实例6：自定义负载均衡策略 139
7.4 实例7：在没有“服务中心”的情况下，实现自维护的客户端负载均衡 141
|7.4.1 添加依赖和配置，并启用客户端负载均衡 142
|7.4.2 编写负载均衡控制器 143
|7.4.3 测试客户端负载均衡 143
7.5 了解Feign 143
|7.5.1 Feign简介 143
|7.5.2 了解Feign的Bean 144
|7.5.3 压缩请求和响应 145
|7.5.4 了解注解@QueryMap 145
|7.5.5 使用Feign 146
7.6 实例8：覆盖Feign的默认配置 147
|7.6.1 添加依赖和配置，并启用支持 147
|7.6.2 自定义Feign的配置 147
|7.6.3 自定义Feign的接口 148
7.7 实例9：实现在Feign中记录日志 148
|7.7.1 添加配置项 148
|7.7.2 设置记录日志等级 149
|7.7.3 实现接口类 149
|7.7.4 实现调用接口 149
7.8 用Feign构建多参数请求 150
|7.8.1 用GET方式构建多参数请求 150
|7.8.2 用POST方式构建多参数请求 150
7.9 Ribbon和Feign的区别 151
-
第8章 用Hystrix实现容错处理 152
8.1 雪崩效应 152
|8.1.1 什么是雪崩效应 152
|8.1.2 造成服务雪崩的原因 153
8.2 主流的容错项目 155
|8.2.1 流量防卫兵Sentinel 155
|8.2.2 容错框架Resilience4j 156
|8.2.3 容错框架Hystrix 156
|8.2.4 对比Sentinel、Hystrix和Resilience4j 157
8.3 Hystrix处理容错的机制 157
|8.3.1 熔断机制 157
|8.3.2 隔离机制 158
|8.3.3 降级机制 160
|8.3.4 缓存机制 160
8.4 实例10：在Feign中用Hystrix实现服务调用的容错 160
|8.4.1 了解Feign对Hystrix的支持 161
|8.4.2 添加依赖和配置，并启用支持 162
|8.4.3 实现回调类 163
|8.4.4 添加fallback属性 163
|8.4.5 测试fallback状态 163
8.5 实例11：用Hystrix Dashboard实现数据的可视化监控 163
|8.5.1 添加依赖和配置 164
|8.5.2 配置启动类和Servlet 165
|8.5.3 查看监控数据 165
8.6 实例12：用Turbine聚合监控数据 166
|8.6.1 添加依赖并启用支持 166
|8.6.2 创建多个“服务消费者” 167
|8.6.3 配置多监控点 167
|8.6.4 启动并测试聚合监控 168
-
第9章 用Spring Cloud Gateway构建微服务网关 169
9.1 认识微服务网关 169
|9.1.1 什么是微服务网关 169
|9.1.2 为什么要使用微服务网关 169
|9.1.3 认识Spring Cloud Gateway 170
|9.1.4 Spring Cloud Gateway的工作流程 171
|9.1.5 比较Zuul与Spring Cloud Gateway 172
9.2 路由（Route） 173
|9.2.1 认识路由的谓词接口和谓词工厂 173
|9.2.2 认识配置路由规则的方式 173
|9.2.3 实例13：用Java API和配置文件方式构建路由 175
|9.2.4 实例14：应用Spring Cloud Gateway的11种路由规则 176
|9.2.5 实例15：测试多种路由规则匹配优先级 181
|9.2.6 实例16：将网关注册到“服务中心”，实现服务转发 183
9.3 过滤器（Filter） 184
|9.3.1 过滤器的基本知识 184
|9.3.2 网关过滤器（GatewayFilter） 184
|9.3.3 全局过滤器（GlobalFilter） 186
|9.3.4 实例17：用AddRequestHeader过滤器工厂给请求添加Header参数 189
9.4 实例18：实现路由容错 190
|9.4.1 处理未定义的路由 190
|9.4.2 用Hystrix处理路由熔断 191
9.5 限流 193
|9.5.1 为什么要限流 193
|9.5.2 常见的限流措施 193
|9.5.3 限流算法 194
|9.5.4 实例19：用Spring Cloud Gateway内置的限流工厂实现限流 195
9.6 高可用 197
9.7 Spring Cloud Gateway的端点 197
|9.7.1 认识Spring Cloud Gateway的端点 197
|9.7.2 实例20：通过Spring Cloud Gateway的端点添加动态路由 198
-
第10章 用Spring Cloud Sleuth实现微服务链路跟踪 200
10.1 微服务链路跟踪 200
|10.1.1 为什么要实现微服务链路跟踪 200
|10.1.2 微服务链路跟踪的技术要求 201
10.2 一些开源的链路跟踪项目——Skywalking、Pinpoint、Zipkin和CAT 202
10.3 认识Sleuth和Zipkin 203
|10.3.1 Sleuth 203
|10.3.2 Zipkin 203
10.4 实例21：用Sleuth实现日志采样 204
10.5 实例22：在Spring Cloud中使用Zipkin 205
|10.5.1 搭建Zipkin服务器 205
|10.5.2 添加依赖和配置 206
|10.5.3 测试链路数据 207
-
第11章 用Spring Cloud Config配置微服务 209
11.1 了解配置中心 209
|11.1.1 配置信息的管理方式 209
|11.1.2 对比主流配置中心 211
|11.1.3 了解Spring Cloud Config 212
|11.1.4 Spring Cloud Config的常用配置 213
11.2 设置配置中心的安全 214
11.3 加/解密配置文件 215
|11.3.1 实例23：用对称加密方式加/解密配置文件 215
|11.3.2 实例24：用非对称加密方式加/解密配置文件 217
11.4 实例25：用Git配置“配置服务器” 220
|11.4.1 在Git仓库中创建配置文件 220
|11.4.2 添加配置中心的依赖和配置，并启用支持 220
|11.4.3 读取配置信息 221
11.5 实例26：从客户端获取“配置服务器”放置在Git仓库中的配置文件 222
|11.5.1 添加依赖和配置 222
|11.5.2 创建用来获取配置的控制器 223
|11.5.3 测试获取到的数据 223
11.6 实例27：用Spring Cloud Bus自动刷新配置信息 224
|11.6.1 Spring Cloud Bus简介 224
|11.6.2 添加服务器端的依赖和配置，并启用支持 224
|11.6.3 添加客户端的依赖和配置，并启用支持 225
|11.6.4 启动并刷新客户端的配置 227
|11.6.5 实现配置的自动刷新 228
|11.6.6 局部刷新客户端的配置信息 229
|11.6.7 跟踪Bus事件 229
11.7 实例28：实现配置中心和配置客户端的服务化 230
|11.7.1 实现服务器端服务化 230
|11.7.2 实现客户端服务化 231
-
第12章 用Spring Cloud Alibaba组件实现服务治理和流量控制 232
12.1 认识Spring Cloud Alibaba组件 232
|12.1.1 Spring Cloud Alibaba是什么 232
|12.1.2 Spring Cloud Alibaba、Netflix和Spring Cloud的关系 233
|12.1.3 Spring Cloud Alibaba与Spring Boot、Spring Cloud的版本兼容关系 234
12.2 认识Sentinel 235
|12.2.1 Sentinel概述 235
|12.2.2 安装和启动Sentinel 239
|12.2.3 认识流控规则 239
|12.2.4 降级规则 241
|12.2.5 系统规则 241
|12.2.7 Sentinel对RestTemplate和Feign的支持 242
|12.2.8 Sentinel的规则持久化 243
12.3 用Sentinel实现Spring Cloud项目的流控和降级 244
|12.3.1 实例29：实现直接限流 244
|12.3.2 实例30：实现关联限流 246
|12.3.3 实例31：实现链路限流 247
|12.3.4 测试流控模式 249
|12.3.5 测试降级模式 250
12.4 认识Nacos 251
|12.4.1 Nacos概述 251
|12.4.2 下载和使用Nacos 251
12.5 实例32：用Nacos实现“服务提供者”和“服务消费者” 252
|12.5.1 用Nacos实现“服务提供者” 252
|12.5.2 用Nacos实现“服务消费者” 253
|12.5.3 测试服务接口 254
12.6 实例33：用Nacos实现“配置中心” 254
|12.6.1 添加依赖和配置 255
|12.6.2 创建属性承载类 255
|12.6.3 在Nacos控制台中添加配置 255
12.6.4 测试动态刷新 256
12.6.5 测试配置回滚 257
12.7 实例34：用Nacos存储Sentinel的限流规则 257
|12.7.1 添加依赖和配置 257
|12.7.2 自定义埋点 258
|12.7.3 添加Nacos配置 258
|12.7.4 测试配置的持久化 259
12.8 实例35：实现Nacos的数据持久化和集群 260
|12.8.1 实现Nacos的数据持久化 260
|12.8.2 部署集群 261
-
第13章 用Spring Cloud Security实现微服务安全 264
13.1 认识Spring Security与Spring Cloud Security 264
|13.1.1 Spring Security 264
|13.1.2 Spring Cloud Security 266
13.2 认识OAuth 2.0 267
|13.2.1 OAuth 2.0概述 267
|13.2.2 客户端的授权模式 268
13.3 Spring Cloud Security如何实现OAuth 2.0 273
|13.3.1 认识Oauth 2.0服务提供端 273
|13.3.2 配置授权服务器 274
|13.3.3 配置资源服务器 276
13.4 实例36：用Spring Security实现安全认证和授权 276
|13.4.1 添加依赖和配置数据库 276
|13.4.2 创建用户实体类 277
|13.4.3 实现用户注册和密码加密 278
|13.4.4 自定义认证管理器 279
|13.4.5 实现Spring Security配置类 279
|13.4.6 实现登录验证成功处理类 280
|13.4.7 实现登录验证失败处理类 281
|13.4.8 测试注册和登录 281
13.5 实例37：用OAuth 2.0实现认证和授权 282
|13.5.1 添加OAuth 2.0的依赖 282
|13.5.2 配置认证服务器 282
|13.5.3 配置资源服务器 284
|13.5.4 实现用户实体类和角色映射 284
|13.5.5 实现角色实体类 285
|13.5.6 实现测试控制器 286
|13.5.7 测试用密码模式获取Token 286
|13.5.8 测试携带Token访问资源 288
|13.5.9 测试用授权码模式获得Token 288
13.6 实例38：用MySQL实现Token信息的持久化 290
13.7 实例39：用Redis实现Token信息的持久化 292
-
-------------第4篇 项目实战
-
第14章 实例40：用Spring Cloud实现页面日访问量3000万的某平台微服务架构 296
14.1 本实例的整体架构 296
|14.1.1 实施方案 296
|14.1.2 整体架构 297
14.2 实现“配置中心”以提供配置信息 297
|14.2.1 创建配置文件，并将其上传到Git仓库中 297
|14.2.2 编写“配置服务器”的信息 298
14.3 实现“服务提供者”集群、“服务消费者”及客户端自动配置 298
|14.3.1 实现“服务提供者”集群 298
|14.3.2 实现“服务消费者”，并通过“配置中心”实现客户端的自动配置 299
14.4 用OAuth 2.0实现统一的认证和授权 301
|14.4.1 实现认证服务器 301
|14.4.2 配置“服务消费者”的资源安全 301
14.5 在Spring Cloud中用“Redis+MySQL”实现路由服务器 302
|14.5.1 整体思路 302
|14.5.2 设计并实现自定义路由模型 303
|14.5.3 实现路由信息和版本信息实体 303
|14.5.4 实现路由和版本的控制器 304
|14.5.5 实现路由服务器的服务化 306
14.6 用Spring Cloud Gateway实现网关集群 306
|14.6.1 同步路由信息 306
|14.6.2 转换路由对象 308
|14.6.3 开启计划任务和负载均衡 308
|14.6.4 实现网关的服务化 309
14.7 用Nginx实现负载均衡 309
|14.7.1 认识Nginx 309
|14.7.2 实现网关负载均衡 312
|14.7.3 实现Nginx自身负载均衡 313
14.8 用Spring Boot Admin监控Spring Cloud应用程序 314
|14.8.1 集成Actuator 314
|14.8.2 集成Spring Boot admin以监控应用 316
14.9 集成“Prometheus+Grafana”以监控服务 319
|14.9.1 安装和配置Prometheus 319
|14.9.2 在Spring Cloud中集成Prometheus 321
|14.9.3 用Grafana实现可视化监控 322
-
-------------第5篇 开发运维一体化（DevOps）
-
第15章 基于Docker、K8s、Jenkins的DevOps实践 324
15.1 认识DevOps 324
|15.1.1 软件开发的演变过程 324
|15.1.2 认识DevOps 326
|15.1.3 开发模式的关系 327
|15.1.4 为什么要践行DevOps 328
|15.1.5 了解DevOps工具 329
15.2 认识Docker 332
|15.2.1 认识虚拟机和容器 332
|15.2.2 什么是Docker 334
|15.2.3 Docker的特点 335
|15.2.4 Docker的基本概念 335
15.3 使用Docker 337
|15.3.1 在Linux中安装Docker 337
|15.3.2 在Windows中安装Docker 338
|15.3.3 配置国内镜像加速器 338
|15.3.4 Docker的常用操作 340
15.4 用Docker Compose管理容器 342
|15.4.1 了解Docker Compose工具 342
|15.4.2 安装Docker Compose工具 342
|15.4.3 用Docker Compose工具运行容器 344
15.5 管理镜像 344
|15.5.1 用Docker Hub管理镜像 344
|15.5.2 创建私有仓库 345
15.6 认识Docker Swarm、Kubernetes（K8s）和Jenkins 345
|15.6.1 Docker Swarm 345
|15.6.2 Kubernetes（K8s） 347
|15.6.3 Jenkins 349
|15.6.4 比较Docker、Compose、Swarm、K8s和Jenkins 350
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Cloud微服务架构实战派
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Cloud 微服务架构开发实战
内容简介
前言
第1章 微服务概述
1.1 传统软件行业面临的挑战
1.2 常见分布式系统架构
1.3 单块架构如何进化为微服务架构
1.4 微服务架构的设计原则
1.5 如何来设计微服务系统
第2章 微服务的基石——Spring Boot
2.1 Spring Boot 简介
2.2 开启第一个 Spring Boot 项目
2.3 Hello World
2.4 如何搭建开发环境
2.5 Gradle 与 Maven 的抉择
第3章 Spring Boot 的高级主题
3.1 构建 RESTful 服务
3.2 Spring Boot 的配置详解
3.3 内嵌 Servlet 容器
3.4 实现安全机制
3.5 允许跨域访问
3.6 消息通信
3.7 数据持久化
3.8 实现热插拔（hot swapping）
第4章 微服务的测试
4.1 测试概述
4.2 测试的类型和范围
4.3 如何进行微服务的测试
第5章 微服务的协调者——Spring Cloud
5.1 Spring Cloud 简介
5.2 Spring Cloud 入门配置
5.3 Spring Cloud 的子项目介绍
第6章 服务拆分与业务建模
6.1 从一个天气预报系统讲起
6.2 使用Redis提升应用的并发访问能力
6.3 实现天气数据的同步
6.4 给天气预报一个“面子”
6.5 如何进行微服务的拆分
6.6 领域驱动设计与业务建模
第7章 天气预报系统的微服务架构设计与实现
7.1 天气预报系统的架构设计
7.2 天气数据采集微服务的实现
7.3 天气数据API微服务的实现
7.4 天气预报微服务的实现
7.5 城市数据API微服务的实现
第8章 微服务的注册与发现
8.1 服务发现的意义
8.2 如何集成 Eureka Server
8.3 如何集成 Eureka Client
8.4 实现服务的注册与发现
第9章 微服务的消费
9.1 微服务的消费模式
9.2 常见微服务的消费者
9.3 使用 Feign 实现服务的消费者
9.4 实现服务的负载均衡及高可用
第10章 API 网关
10.1 API 网关的意义
10.2 常见 API 网关的实现方式
10.3 如何集成Zuul
10.4 实现 API 网关
第11章 微服务的部署与发布
11.1 部署微服务将面临的挑战
11.2 持续交付与持续部署微服务
11.3 基于容器的部署与发布微服务
11.4 使用 Docker 来构建、运行、发布微服务
第12章 微服务的日志与监控
12.1 微服务日志管理将面临的挑战
12.2 日志集中化的意义
12.3 常见日志集中化的实现方式
12.4 Elastic Stack 实现日志集中化
第13章 微服务的集中化配置
13.1 为什么需要集中化配置
13.2 使用 Config 实现的配置中心
第14章 微服务的高级主题——自动扩展
14.1 什么是自动扩展
14.2 自动扩展的意义
14.3 自动扩展的常见模式
14.4 如何实现微服务的自动扩展
第15章 微服务的高级主题——熔断机制
15.1 什么是服务的熔断机制
15.2 熔断的意义
15.3 熔断与降级的区别
15.4 如何集成 Hystrix
15.5 实现微服务的熔断机制
第16章 微服务的高级主题——分布式消息总线
16.1 什么是消息总线
16.2 Spring Cloud Bus 设计原理
16.3 如何集成 Bus
16.4 实现配置信息的自动更新
附录A：本书所涉及到的技术及相关版本
参考资料
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Cloud 微服务架构开发实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>一步一步学SpringBoot2(微服务项目实战)
第1章第一个Spring Boot项目 1
1.1Spring Boot简单介绍 1
1.2Spring Boot环境准备 2
1.2.1 安装JDK 2
1.2.2 安装IntelliJ IDEA 3
1.2.3 安装Apache Maven 4
1.3一分钟快速搭建Spring Boot项目 5
1.3.1 使用Spring Initializr新建项目 5
1.3.2 测试 8
1.4Spring Boot文件目录介绍 8
1.4.1 工程目录 8
1.4.2 入口类 10
1.4.3 测试类 10
1.4.4 pom文件 11
1.5Maven Helper插件的安装和使用 13
1.5.1 Maven Helper插件介绍 13
1.5.2 Maven Helper插件的安装 13
1.5.3 Maven Helper插件的使用 13
第2章集成MySQL数据库 15
2.1MySQL介绍与安装 15
2.1.1 MySQL概述 15
2.1.2 MySQL的安装 16
2.2集成MySQL数据库 17
2.2.1 引入依赖 17
2.2.2 添加数据库配置 17
2.2.3 设计表和实体 18
2.3集成测试 19
2.3.1 测试用例开发 19
2.3.2 测试 20
2.3.3 Navicat for MySQL客户端安装与使用 21
2.3.4 IntelliJ IDEA连接MySQL 22
2.4集成Druid 23
2.4.1 Druid概述 23
2.4.2 引入依赖 23
2.4.3 Druid配置 24
2.4.4 开启监控功能 25
2.4.5 测试 27
第3章集成Spring Data JPA 28
3.1Spring Data JPA介绍 28
3.1.1 Spring Data JPA介绍 28
3.1.2 核心接口Repository 29
3.1.3 接口继承关系图 30
3.2集成Spring Data JPA 31
3.2.1 引入依赖 31
3.2.2 继承JpaRepository 31
3.2.3 服务层类实现 33
3.2.4 增删改查分页简单实现 35
3.2.5 自定义查询方法 36
3.3集成测试 38
3.3.1 测试用例开发 38
3.3.2 测试 40
第4章使用Thymeleaf模板引擎 41
4.1Thymeleaf模板引擎介绍 41
4.2使用Thymeleaf模板引擎 43
4.2.1 引入依赖 43
4.2.2 控制层开发 44
4.2.3 Thymeleaf模板页面开发 45
4.3集成测试 46
4.3.1 测试 46
4.3.2 Rest Client工具介绍 46
4.3.3 使用Rest Client测试 47
第5章Spring Boot事务支持 48
5.1Spring事务 48
5.1.1 Spring事务介绍 48
5.1.2 Spring声名式事务 49
5.1.3 Spring注解事务行为 50
5.2Spring Boot事务的使用 51
5.2.1 Spring Boot事务介绍 51
5.2.2 类级别事务 52
5.2.3 方法级别事务 52
5.2.4 测试 53
第6章使用过滤器和监听器 55
6.1Spring Boot使用过滤器Filter 55
6.1.1 过滤器Filter介绍 55
6.1.2 过滤器Filter的使用 57
6.1.3 测试 59
6.2Spring Boot使用监听器Listener 59
6.2.1 监听器Listener介绍 59
6.2.2 监听器Listener的使用 60
6.2.3 测试 61
第7章集成Redis缓存 62
7.1Redis缓存介绍 62
7.1.1 Redis概述 62
7.1.2 Redis服务器的安装 63
7.1.3 Redis缓存测试 65
7.2Spring Boot集成Redis缓存 71
7.2.1 Spring Boot缓存支持 71
7.2.2 引入依赖 71
7.2.3 添加缓存配置 71
7.2.4 测试用例开发 72
7.2.5 测试 73
7.3Redis缓存在Spring Boot中使用 74
7.3.1 监听器Listener的开发 74
7.3.2 项目启动缓存数据 76
7.3.3 更新缓存数据 76
7.3.4 测试 78
第8章集成Log4j日志 80
8.1Log4j介绍 80
8.2集成Log4j2 82
8.2.1 引入依赖 82
8.2.2 添加Log4j配置 83
8.2.3 创建log4j2.xml文件 84
8.3使用Log4j记录日志 84
8.3.1 打印到控制台 84
8.3.2 记录到文件 86
8.3.3 测试 88
第9章Quartz定时器和发送Email 90
9.1使用Quartz定时器 90
9.1.1 Quartz概述 90
9.1.2 引入依赖 92
9.1.3 定时器配置文件 93
9.1.4 创建定时器类 95
9.1.5 Spring Boot扫描配置文件 97
9.1.6 测试 97
9.2Spring Boot发送Email 98
9.2.1 Email介绍 98
9.2.2 引入依赖 98
9.2.3 添加Email配置 99
9.2.4 在定时器中发送邮件 99
9.2.5 测试 102
第10章集成MyBatis 103
10.1MyBatis介绍 103
10.2集成MyBatis 104
10.2.1 引入依赖 104
10.2.2 添加MyBatis配置 104
10.2.3 Dao层和Mapper文件开发 104
10.2.4 测试 107
第11章异步消息与异步调用 108
11.1JMS消息介绍 108
11.2Spring Boot集成ActiveMQ 110
11.2.1 ActiveMQ概述 110
11.2.2 ActiveMQ的安装 110
11.2.3 引入依赖 112
11.2.4 添加ActiveMQ配置 112
11.3使用ActiveMQ 112
11.3.1 创建生产者 112
11.3.2 创建消费者 116
11.3.3 测试 117
11.4Spring Boot异步调用 121
11.4.1 异步调用介绍 121
11.4.2 @Async的使用 121
11.4.3 测试 122
第12章全局异常处理与Retry重试 126
12.1全局异常介绍 126
12.2Spring Boot全局异常使用 127
12.2.1 自定义错误页面 127
12.2.2 测试 129
12.2.3 全局异常类开发 129
12.2.4 测试 132
12.3Retry重试机制 132
12.3.1 Retry重试介绍 132
12.3.2 Retry重试机制的使用 133
12.3.3 测试 135
第13章集成MongoDB数据库 136
13.1MongoDB数据库介绍 136
13.1.1 MongoDB概述 136
13.1.2 MongoDB的安装 137
13.1.3 NoSQL Manager for MongoDB客户端介绍 138
13.1.4 NoSQL Manager for MongoDB客户端的使用 138
13.2集成MongoDB 140
13.2.1 引入依赖 140
13.2.2 添加MongoDB配置 140
13.2.3 连接MongoDB 140
13.2.4 测试 142
第14章集成Spring Security 144
14.1Spring Security介绍 144
14.2集成Spring Security 146
14.2.1 引入依赖 146
14.2.2 配置Spring Security 146
14.2.3 测试 147
14.2.4 数据库用户授权登录 148
14.2.5 测试 155
第15章Spring Boot应用监控 156
15.1应用监控介绍 156
15.2使用应用监控 157
15.2.1 引入依赖 157
15.2.2 添加配置 157
15.2.3 测试 158
15.2.4 定制端点 160
15.3自定义端点 161
15.3.1 自定义端点EndPoint 161
15.3.2 测试 164
15.3.3 自定义HealthIndicator 164
15.3.4 测试 166
15.4保护Actuator端点 166
第16章集成Dubbo和Zookeeper 169
16.1Zookeeper介绍与安装 169
16.1.1 Zookeeper概述 169
16.1.2 Zookeeper的安装与启动 171
16.2Spring Boot集成Dubbo 172
16.2.1 Dubbo概述 172
16.2.2 服务与接口拆分思路 174
16.2.3 服务与接口拆分实践 174
16.2.4 正式版发布 178
16.2.5 Service服务端开发 179
16.2.6 Service服务注册 181
16.2.7 Client客户端开发 181
第17章多环境配置与部署 183
17.1多环境配置介绍 183
17.2多环境配置使用 184
17.2.1 添加多个配置文件 184
17.2.2 配置激活选项 185
17.2.3 测试 185
17.3部署 187
17.3.1 Spring Boot内置Tomcat 187
17.3.2 IntelliJ IDEA配置Tomcat 188
17.3.3 war包部署 190
17.3.4 测试 191
第18章Spring Boot原理解析 192
18.1回顾入口类 192
18.1.1 MySpringBootApplication入口类 192
18.1.2 @SpringBootApplication的原理 193
18.1.3 SpringApplication的run方法 195
18.1.4 SpringApplicationRunListeners监听器 196
18.1.5 ApplicationContextInitializer接口 197
18.1.6 ApplicationRunner与CommandLineRunner 199
18.2SpringApplication执行流程 199
18.3spring-boot-starter原理 201
参考文献 204
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>一步一步学SpringBoot2(微服务项目实战)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2精髓
第1章　Java EE简介
1.1　Java EE
1.1.1　Java EE架构
1.1.2　Java EE的缺点
1.2　Spring
1.2.1　Spring IoC容器和AOP
1.2.2　Spring的缺点
1.3　Spring Boot
1.4　Hello，Spring Boot
1.4.1　创建一个Maven工程
1.4.2　增加Web支持
1.4.3　Hello Spring Boot示例
1.4.4　使用热部署
1.4.5　添加REST支持
第2章　Spring Boot基础
2.1　检查Java环境与安装Java
2.2　安装和配置Maven
2.2.1　Maven介绍
2.2.2　安装Maven
2.2.3　设置Maven
2.2.4　使用IDE设置Maven
2.2.5　Maven的常用命令
2.3　Spring核心技术
2.3.1　Spring的历史
2.3.2　Spring容器介绍
2.3.3　Spring AOP介绍
第3章　MVC框架
3.1　集成MVC框架
3.1.1　引入依赖
3.1.2　Web应用目录结构
3.1.3　Java包名结构
3.2　使用Controller
3.3　URL映射到方法
3.3.1　@RequestMapping
3.3.2　URL路径匹配
3.3.3　HTTP method匹配
3.3.4　consumes和produces
3.3.5　params和header匹配
3.4　方法参数
3.4.1　PathVariable
3.4.2　Model&ModelAndView
3.4.3　JavaBean接受HTTP参数
3.4.4　@RequsetBody接受JSON
3.4.5　MultipartFile
3.4.6　@ModelAttribute
3.4.7　@InitBinder
3.5　验证框架
3.5.1　JSR-303
3.5.2　MVC中使用@Validated
3.5.3　自定义校验
3.6　WebMvcConfigurer
3.6.1　拦截器
3.6.2　跨域访问
3.6.3　格式化
3.6.4　注册Controller
3.7　视图技术
3.7.1　使用Freemarker
3.7.2　使用Beetl
3.7.3　使用Jackson
3.7.4　Redirect和Forward
3.8　通用错误处理
3.9　@Service和@Transactional
3.9.1　声明一个Service类
3.9.2　事务管理
3.10　curl命令
第4章　视图技术
4.1　Beetl模板引擎
4.1.1　安装Beetl
4.1.2　设置定界符号和占位符
4.1.3　配置Beetl
4.1.4　groupTemplate
4.2　使用变量
4.2.1　全局变量
4.2.2　局部变量
4.2.3　共享变量
4.2.4　模板变量
4.3　表达式
4.3.1　计算表达式
4.3.2　逻辑表达式
4.4　控制语句
4.4.1　循环语句
4.4.2　条件语句
4.4.3　try catch
4.5　函数调用
4.6　格式化函数
4.7　直接调用Java
4.8　标签函数
4.9　HTML标签
4.10　安全输出
4.11　高级功能
4.11.1　配置Beetl
4.11.2　自定义函数
4.11.3　自定义格式化函数
4.11.4　自定义标签函数
4.11.5　自定义HTML标签
4.11.6　布局
4.11.7　AJAX局部渲染
4.12　脚本引擎
4.13　JSON技术
4.13.1　在Spring Boot中使用Jackson
4.13.2　自定义ObjectMapper
4.13.3　Jackson的三种使用方式
4.13.4　Jackson树遍历
4.13.5　对象绑定
4.13.6　流式操作
4.13.7　Jackson注解
4.13.8　集合的反序列化
4.14　MVC分离开发
4.14.1　集成WebSimulate
4.14.2　模拟JSON响应
4.14.3　模拟模板渲染
第5章　数据库访问
5.1　配置数据源
5.2　Spring JDBC Template
5.2.1　查询
5.2.2　修改
5.2.3　JdbcTemplate增强
5.3　BeetlSQL介绍
5.3.1　BeetlSQL功能概览
5.3.2　添加Maven依赖
5.3.3　配置BeetlSQL
5.3.4　SQLManager
5.3.5　使用SQL文件
5.3.6　Mapper
5.3.7　使用实体
5.4　SQLManager内置CRUD
5.4.1　内置的插入API
5.4.2　内置的更新（删除）API
5.4.3　内置的查询API
5.4.4　代码生成方法
5.5　使用sqlId
5.5.1　md文件命名
5.5.2　md文件构成
5.5.3　调用sqlId
5.5.4　翻页查询
5.5.5　TailBean
5.5.6　ORM查询
5.5.7　其他API
5.5.8　Mapper详解
5.6　BeetlSQL的其他功能
5.6.1　常用函数和标签
5.6.2　主键设置
5.6.3　BeetlSQL注解
5.6.4　NameConversion
5.6.5　锁
第6章　Spring Data JPA
6.1　集成Spring Data JPA
6.1.1　集成数据源
6.1.2　配置JPA支持
6.1.3　创建Entity
6.1.4　简化Entity
6.2　Repository
6.2.1　CrudRepository
6.2.2　PagingAndSortingRepository
6.2.3　JpaRepository
6.2.4　持久化Entity
6.2.5　Sort
6.2.6　Pageable和Page
6.2.7　基于方法名字查询
6.2.8　@Query查询
6.2.9　使用JPA Query
6.2.10　Example查询
第7章　Spring Boot配置
7.1　配置Spring Boot
7.1.1　服务器配置
7.1.2　使用其他Web服务器
7.1.3　配置启动信息
7.1.4　配置浏览器显示ico
7.2　日志配置
7.3　读取应用配置
7.3.1　Environment
7.3.2　@Value
7.3.3　@ConfigurationProperties
7.4　Spring Boot自动装配
7.4.1　@Configuration和@Bean
7.4.2　Bean条件装配
7.4.3　Class条件装配
7.4.4　Environment装配
7.4.5　其他条件装配
7.4.6　联合多个条件
7.4.7　Condition接口
7.4.8　制作Starter
第8章　部署Spring Boot应用
8.1　以jar文件运行
8.2　以war方式部署
8.3　多环境部署
8.4　@Profile注解
第9章　Testing单元测试
9.1　JUnit介绍
9.1.1　JUnit的相关概念
9.1.2　JUnit测试
9.1.3　Assert
9.1.4　Suite
9.2　Spring Boot单元测试
9.2.1　测试范围依赖
9.2.2　Spring Boot测试脚手架
9.2.3　测试Service
9.2.4　测试MVC
9.2.5　完成MVC请求模拟
9.2.6　比较MVC的返回结果
9.2.7　JSON比较
9.3　Mockito
9.3.1　模拟对象
9.3.2　模拟方法参数
9.3.3　模拟方法返回值
9.4　面向数据库应用的单元测试
9.4.1　@Sql
9.4.2　XLSUnit
9.4.3　XLSUnit的基本用法
第10章　REST
10.1　REST简介
10.1.1　REST风格的架构
10.1.2　使用“api”作为上下文
10.1.3　增加一个版本标识
10.1.4　标识资源
10.1.5　确定HTTP Method
10.1.6　确定HTTP Status
10.1.7　REST VS. WebService
10.2　Spring Boot集成REST
10.2.1　集成REST
10.2.2　@RestController
10.2.3　REST Client
10.3　Swagger UI
10.3.1　集成Swagger
10.3.2　Swagger规范
10.3.3　接口描述
10.3.4　查询参数描述
10.3.5　URI中的参数
10.3.6　HTTP头参数
10.3.7　表单参数
10.3.8　文件上传参数
10.3.9　整个请求体作为参数
10.4　模拟REST服务
第11章　MongoDB
11.1　安装MongoDB
11.2　使用shell
11.2.1　指定数据库
11.2.2　插入文档
11.2.3　查询文档
11.2.4　更新操作
11.2.5　删除操作
11.3　Spring Boot集成MongoDB
11.4　增删改查
11.4.1　增加API
11.4.2　根据主键查询API
11.4.3　查询API
11.4.4　修改API
11.4.5　删除API
11.4.6　使用MongoDatabase
11.4.7　打印日志
第12章　Redis
12.1　安装Redis
12.2　使用redis-cli
12.2.1　安全设置
12.2.2　基本操作
12.2.3　keys
12.2.4　Redis List
12.2.5　Redis Hash
12.2.6　Set
12.2.7　Pub/Sub
12.3　Spring Boot集成Redis
12.4　使用StringRedisTemplate
12.4.1　opsFor
12.4.2　绑定Key的操作
12.4.3　RedisConnection
12.4.4　Pub/Sub
12.5　序列化策略
12.5.1　默认序列化策略
12.5.2　自定义序列化策略
第13章　Elasticsearch
13.1　Elasticsearch介绍
13.1.1　安装Elasticsearch
13.1.2　Elasticsearch的基本概念
13.2　使用REST访问Elasticsearch
13.2.1　添加文档
13.2.2　根据主键查询
13.2.3　根据主键更新
13.2.4　根据主键删除
13.2.5　搜索文档
13.2.6　联合多个索引搜索
13.3　使用RestTemplate访问ES
13.3.1　创建Book
13.3.2　使用RestTemplate获取搜索结果
13.4　Spring Data Elastic
13.4.1　安装Spring Data
13.4.2　编写Entity
13.4.3　编写Dao
13.4.4　编写Controller
第14章　Cache
14.1　关于Cache
14.1.1　Cache的组件和概念
14.1.2　Cache的单体应用
14.1.3　使用专有的Cache服务器
14.1.4　使用一二级缓存服务器
14.2　Spring Boot Cache
14.3　注释驱动缓存
14.3.1　@Cacheable
14.3.2　Key生成器
14.3.3　@CachePut
14.3.4　@CacheEvict
14.3.5　@Caching
14.3.6　@CacheConfig
14.4　使用Redis Cache
14.4.1　集成Redis缓存
14.4.2　禁止缓存
14.4.3　定制缓存
14.5　Redis缓存原理
14.6　实现Redis两级缓存
14.6.1　实现TwoLevelCacheManager
14.6.2　创建RedisAndLocalCache
14.6.3　缓存同步说明
14.6.4　将代码组合在一起
第15章　Spring Session
15.1　水平扩展实现
15.2　Nginx的安装和配置
15.2.1　安装Nginx
15.2.2　配置Nginx
15.3　Spring Session
15.3.1　Spring Session介绍
15.3.2　使用Redis
15.3.3　Nginx+Redis
第16章　Spring Boot和ZooKeeper
16.1　ZooKeeper
16.1.1　ZooKeeper的数据结构
16.1.2　安装ZooKeeper
16.1.3　ZooKeeper的基本命令
16.1.4　领导选取演示
16.1.5　分布式锁演示
16.1.6　服务注册演示
16.2　Spring Boot集成ZooKeeper
16.2.1　集成Curator
16.2.2　Curator API
16.3　实现分布式锁
16.4　服务注册
16.4.1　通过ServiceDiscovery注册服务
16.4.2　获取服务
16.5　领导选取
第17章　监控Spring Boot应用
17.1　安装Acutator
17.2　HTTP跟踪
17.3　日志查看
17.4　线程栈信息
17.5　内存信息
17.6　查看URL映射
17.7　查看Spring容器管理的Bean
17.8　其他监控
17.9　编写自己的监控信息
17.9.1　编写HealthIndicator
17.9.2　自定义监控
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2精髓
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot微服务实战
目录
第1 章 介绍 1
1.1 设置场景 1
1.2 读者对象 2
1.3 本书与其他图书和指南有何区别 2
1.3.1 工具背后的论证 2
1.3.2 学习：渐进的过程 3
1.3.3 这是一本指南还是一本图书 3
1.4 本书内容 3
1.4.1 从基础知识到高级话题 3
1.4.2 搭建Spring Boot骨架的专业方式 4
1.4.3 测试驱动开发 4
1.4.4 连接微服务 4
1.4.5 事件驱动的系统 5
1.4.6 端到端测试 5
1.5 本章小结 5
第2 章 一个基本的Spring Boot应用 7
2.1 业务需求 7
2.2 骨架应用 8
2.2.1 轻薄应用与真实应用 8
2.2.2 创建应用骨架 8
2.3 热身：一些TDD的实战 10
2.4 本章小结 16
第3 章 一个真实的三层Spring Boot 应用 17
3.1 简介 17
3.2 完成基本功能 18
3.3 领域设计 24
3.4 业务逻辑层 28
3.5 展示层(REST API) 30
3.5.1 Multiplication Controller 31
3.5.2 Results控制器 35
3.6 前端(Web客户端) 38
3.7 试玩(第1部分) 42
3.8 数据持久化的新需求 43
3.9 重构代码 45
3.10 数据层 50
3.10.1 数据模型 51
3.10.2 资源库 56
3.11 完成第二个用户故事：串联所有层 63
3.12 畅玩应用(第2部分) 69
3.13 本章小结 71
第4 章 初识微服务 73
4.1 小单体之路 73
4.1.1 单体分析 75
4.1.2 继续前进 76
4.2 游戏化基础 77
4.2.1 分数、徽章和排行榜 77
4.2.2 应用游戏化技术 78
4.3 转向微服务架构 78
4.3.1 职责分离和松耦合 78
4.3.2 独立变更 79
4.3.3 伸缩性 79
4.4 连接不同的微服务 80
4.5 事件驱动架构 81
4.5.1 相关技术 81
4.5.2 事件驱动架构的优缺点 82
4.5.3 深入阅读 84
4.5.4 应用事件驱动架构 84
4.6 使用RabbitMQ和Spring AMQP实现事件驱动 85
4.6.1 在系统中使用RabbitMQ 86
4.6.2 Spring AMQP 86
4.7 从乘法微服务发送事件 87
4.7.1 RabbitMQ配置 87
4.7.2 对事件建模 89
4.7.3 发送事件：分发器模式 91
4.7.4 深入新游戏化微服务 95
4.8 使用RabbitMQ接收事件 111
4.8.1 订阅者 111
4.8.2 RabbitMQ配置 111
4.8.3 事件处理程序 114
4.9 在微服务之间请求数据 115
4.9.1 结合反应式模式和REST 115
4.9.2 保持领域隔离 117
4.9.3 实现REST客户端 119
4.9.4 更新游戏化业务逻辑 123
4.10 使用微服务 126
4.11 本章小结 128
第5 章 使用工具的微服务架构 131
5.1 介绍 131
5.2 抽取UI部分，并连接游戏化服务 132
5.2.1 移动静态内容 133
5.2.2 连接UI和游戏化服务 134
5.2.3 改变现有服务 136
5.2.4 全新的、更好的UI，而且(几乎)不需要额外的代价 139
5.3 当前架构 146
5.4 服务发现和负载均衡 147
5.4.1 服务发现 147
5.4.2 负载均衡 149
5.4.3 多语言系统、Eureka以及 Ribbon 151
5.5 通过API网关路由 153
5.5.1 API网关模式 153
5.5.2 让Zuul、Eureka和Ribbon一起工作 156
5.6 动手准则 158
5.6.1 使用Zuul实现API网关 158
5.6.2 使用服务发现 172
5.6.3 微服务准备好扩展了吗 174
5.6.4 通过Ribbon实现负载均衡 176
5.7 断路器和REST客户端 183
5.7.1 Hystrix断路器 183
5.7.2 Hystrix和Zuul 183
5.7.3 来自REST客户端的Hystrix 186
5.7.4 使用Feign的REST消费者 189
5.8 微服务模式和PaaS 189
5.9 本章小结 190
第6 章 测试分布式系统 193
6.1 介绍 193
6.2 设置场景 194
6.3 Cucumber的工作方式 195
6.4 动手准则 197
6.4.1 创建一个空项目并选择工具 197
6.4.2 让系统可测试 200
6.4.3 编写第一个Cucumber测试 207
6.4.4 把功能测试连接到Java代码 210
6.4.5 支持类 218
6.4.6 在feature之间重用步骤 223
6.4.7 运行测试并检查报告 225
6.5 本章小结 226
附录A 升级到Spring Boot 2.0 229
A.1 介绍 229
A.2 升级依赖项 229
A.3 修复已破坏的变化 232
A.3.1 CrudRepository接口不包含findOne()方法 232
A.3.2 actuator端点被移动 233
A.4 应用可选的更新 234
A.5 使用Spring Boot 2.0 234
后记 235
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot微服务实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 开发实战
前　言
第Ⅰ部分　Spring Boot框架基础
第1章　Spring Boot简介 2
1.1　从Spring到Spring Boot 2
1.1.1　从EJB到Spring 3
1.1.2　Spring框架发展简史 4
1.1.3　Spring框架的核心模块 5
1.2　Spring Boot简介 7
1.2.1　Spring Boot是什么 7
1.2.2　Spring Boot核心模块 10
1.3　约定优于配置极简化理念 11
1.4　本章小结 12
第2章　快速开始HelloWorld 13
2.1　创建Spring Boot项目 13
2.2　Spring Boot项目的入口类 16
2.3　添加HelloWorldController 18
2.4　Spring Boot应用注解@Spring BootApplication 19
2.4.1　Spring Boot配置类注解 20
2.4.2　启用自动配置注解 21
2.4.3　组件扫描注解 21
2.5　XML配置与注解配置 22
2.6　本章小结 22
第3章　深入理解Spring Boot自动配置 23
3.1　传统的SSM开发过程 23
3.2　Spring Boot自动配置原理 26
3.2.1　Java配置 26
3.2.2　条件化Bean 27
3.2.3　组合注解 32
3.3　Spring Boot自动配置过程 33
3.3.1　@EnableAutoConfiguration注解 33
3.3.2　spring.factories文件 34
3.3.3　获取候选配置类 35
3.4　FreeMarkerAutoConfiguration实例分析 35
3.4.1　spring-boot-starter-freemarker工程 35
3.4.2　spring-boot-autoconfigure工程 37
3.5　本章小结 39
第Ⅱ部分　Spring Boot项目综合实战
第4章　Spring Boot集成MyBatis数据库层开发 42
4.1　Java EE分层架构 42
4.2　MyBatis简介 43
4.2.1　概述 43
4.2.2　MyBatis框架组成 44
4.2.3　MyBatis基础设施 46
4.3　项目实战 54
4.3.1　使用Spring Boot CLI创建工程 54
4.3.2　Spring Boot命令行CLI简介 54
4.3.3　配置application.properties 58
4.3.4　使用IDEA中自带的连接数据库客户端 59
4.3.5　使用MyBatis Generator生成dao层代码 60
4.3.6　设置MyBatis同时使用Mapper.xml和注解 62
4.3.7　使用@Select注解 62
4.3.8　使用MyBatis分页插件pagehelper 63
4.3.9　MyBatis插件机制 64
4.3.10　实现分页接口 64
4.3.11　PageHelper工作原理 67
4.3.12　多表关联查询级联 74
4.4　本章小结 78
第5章　Spring Boot集成JPA数据库层开发 79
5.1　JPA简介 79
5.1.1　JPA生态 81
5.1.2　JPA技术栈 82
5.2　ORM框架概述 83
5.3　Hibernate简介 83
5.4　Spring Data JPA简介 88
5.5　项目实战 90
5.5.1　Spring Data JPA提供的接口 90
5.5.2　创建项目 91
5.5.3　配置数据库连接 91
5.5.4　自动生成Entity实体类代码 91
5.5.5　配置项目数据源信息 95
5.5.6　实现查询接口 96
5.5.7　分页查询 97
5.5.8　多表级联查询 99
5.5.9　级联类型 101
5.5.10　模糊搜索接口 102
5.5.11　JPQL语法基础 103
5.5.12　JPA常用注解 108
5.6　本章小结 109
第6章　Spring Boot Gradle插件应用开发 110
6.1　Gradle简介 110
6.2　用Gradle构建生命周期 112
6.3　Gradle 插件 114
6.4　项目实战 118
6.4.1　创建项目 118
6.4.2　添加依赖 121
6.4.3　配置上传本地Maven仓库 121
6.4.4　实现插件 122
6.4.5　添加插件属性配置 124
6.4.6　运行测试 124
6.4.7　在项目中使用kor插件 126
6.5　本章小结 128
第7章　使用Spring MVC开发Web应用 129
7.1　Spring MVC简介 129
7.1.1　Servlet概述 129
7.1.2　MVC简介 131
7.1.3　Spring、Spring MVC与Spring Boot 2.0 132
7.1.4　Spring MVC框架 133
7.2　Spring MVC常用注解 136
7.3　项目实战：使用FreeMarker模板引擎 137
7.3.1　FreeMarker简介 137
7.3.2　实现一个分页查询页面 138
7.4　实现文件下载 144
7.5　本章小结 145
第8章　Spring Boot自定义Web MVC配置 146
8.1　Web MVC配置简介 146
8.1.1　静态资源配置 147
8.1.2　拦截器配置 148
8.1.3　跨域配置 148
8.1.4　视图控制器配置 149
8.1.5　消息转换器配置 150
8.1.6　数据格式化器配置 150
8.1.7　视图解析器配置 151
8.2　全局异常处理 152
8.2.1　使用@ControllerAdvice和@ExceptionHandler注解 152
8.2.2　实现HandlerExceptionResolver接口 154
8.3　定制Web容器 157
8.4　定制Spring Boot应用程序启动Banner 158
8.5　自定义注册Servlet、Filter和Listener 161
8.5.1　注册Servlet 161
8.5.2　注册Filter 163
8.5.3　注册Listener 168
8.6　本章小结 169
第9章　Spring Boot中的AOP编程 170
9.1　Spring Boot与AOP 170
9.1.1　AOP简介 170
9.1.2　Spring AOP介绍 172
9.1.3　实现一个简单的日志切面 172
9.2　项目实战：使用AOP + Filter实现登录鉴权与权限控制 175
9.2.1　系统整体架构 175
9.2.2　创建工程 176
9.2.3　数据库表结构设计 177
9.2.4　用户登录逻辑 179
9.2.5　登录态鉴权过滤器 181
9.2.6　AOP实现用户权限管理 185
9.2.7　用户注册 187
9.2.8　数据后端校验 188
9.3　本章小结 192
第10章　Spring Boot集成Spring Security安全开发 193
10.1　Spring Security简介 193
10.2　Spring Security核心组件 194
10.3　项目实战 201
10.3.1　初阶Security：默认认证用户名密码 201
10.3.2　中阶Security：内存用户名密码认证 204
10.3.3　角色权限控制 206
10.3.4　进阶Security：基于数据库的用户和角色权限 211
10.4　本章小结 225
第11章　Spring Boot集成React.js开发前后端分离项目 226
11.1　Web前端技术简史 226
11.2　前后端分离架构 228
11.3　项目实战 229
11.3.1　系统功能介绍 229
11.3.2　实现登录后端接口 230
11.3.3　实现登录前端页面 231
11.3.4　实现列表展示后端接口 232
11.3.5　前后端联调测试 233
11.4　本章小结 235
第12章　任务调度与邮件服务开发 236
12.1　定时任务 236
12.1.1　通用实现方法 236
12.1.2　静态定时任务 237
12.1.3　Cron简介 238
12.1.4　动态定时任务 240
12.1.5　多线程执行任务 243
12.2　开发任务调度服务 245
12.2.1　同步与异步 245
12.2.2　同步任务执行 245
12.2.3　异步任务执行 247
12.3　开发邮件服务 250
12.3.1　发送富文本邮件 252
12.3.2　发送带附件的富文本邮件 253
12.4　本章小结 254
第13章　Spring Boot集成WebFlux开发响应式Web应用 255
13.1　响应式宣言及架构 255
13.2　项目实战 256
13.2.1　创建项目 256
13.2.2　代码分析 258
13.3　本章小结 262
第14章　Spring Boot缓存 263
14.1　Spring Cache简介 263
14.2　Cache注解 264
14.3　项目实战 266
14.4　本章小结 272
第15章　使用Spring Session集成Redis实现Session共享 273
15.1　Spring Session简介 273
15.2　Redis简介 275
15.2.1　Redis是什么 275
15.2.2　安装Redis 275
15.2.3　设置Redis密码 276
15.2.4　Redis数据类型 277
15.2.5　Spring Boot集成Redis 279
15.3　项目实战 281
15.4　本章小结 285
第16章　使用Zuul开发API Gateway 286
16.1　API Gateway简介 286
16.2　Zuul简介 287
16.3　项目实战 290
16.4　本章小结 294
第17章　Spring Boot日志 295
17.1　Logback简介 295
17.2　配置logback日志 296
17.3　logback.groovy配置文件 298
17.3.1　显示系统Log级别 298
17.3.2　使用logback.groovy配置 299
17.3.3　配置文件说明 301
17.4　本章小结 306
第Ⅲ部分　Spring Boot系统监控、测试与运维
第18章　Spring Boot应用的监控：Actuator与Admin 308
18.1　Actuator简介 308
18.2　启用Actuator 309
18.3　揭秘端点 311
18.3.1　常用的Actuator端点 311
18.3.2　启用和禁用端点 317
18.4　自定义Actuator端点 318
18.4.1　Endpoint接口 319
18.4.2　实现Endpoint接口 320
18.4.3　继承AbstractEndpoint抽象类 321
18.4.4　实现健康指标接口HealthIndicator 323
18.4.5　实现度量指标接口PublicMetrics 324
18.4.6　统计方法执行数据 328
18.5　使用Admin 331
18.5.1　Admin简介 331
18.5.2　创建Admin Server项目 334
18.5.3　在客户端使用Admin Server 335
18.6　本章小结 339
第19章　Spring Boot应用的测试 340
19.1　准备工作 340
19.2　分层测试 340
19.2.1　dao层测试 341
19.2.2　service层测试 342
19.2.3　使用Mockito测试service层代码 342
19.2.4　controller层测试 344
19.2.5　JSON接口测试 346
19.3　本章小结 347
第20章　Spring Boot应用Docker化 348
20.1　Spring Boot应用打包 348
20.2　Spring Boot应用运维 352
20.2.1　查看JVM参数的值 352
20.2.2　应用重启 353
20.3　使用Docker构建部署运行Spring Boot应用 353
20.3.1　Docker简介 354
20.3.2　环境搭建 355
20.4　项目实战 356
20.4.1　添加Docker构建插件 356
20.4.2　配置Dockerfile文件创建自定义的镜像 357
20.4.3　Dockerfile配置说明 358
20.4.4　构建镜像 362
20.4.5　运行测试 363
20.5　本章小结 364
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 开发实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2实战之旅
目录
第1章 Spring Boot概述  1
1.1 Spring Boot简介  1
1.2 Spring Boot的特点  2
1.2.1 快速构建项目  2
1.2.2 嵌入式Web容器  3
1.2.3 易于构建任何应用  3
1.2.4 自动化配置  3
1.2.5 开发者工具  4
1.2.6 强大的应用监控  4
1.2.7 默认提供测试框架  4
1.2.8 可执行Jar部署  4
1.2.9 IDE多样性  4
1.3 为什么要学习Spring Boot  5
1.3.1 简化工作  5
1.3.2 微服务时代  5
1.3.3 社区背景强大  6
1.3.4 市场需求  6
1.4 Spring Boot的发展历史  7
1.4.1 发布里程碑（2013.8.6）  7
1.4.2 Spring Boot 1.0（2014.4）  7
1.4.3 Spring Boot 1.1（2014.6）  8
1.4.4 Spring Boot 1.2（2015.3）  8
1.4.5 Spring Boot 1.3（2016.12）  8
1.4.6 Spring Boot 1.4（2017.1）  8
1.4.7 Spring Boot 1.5（2017.2）  9
1.4.8 Spring Boot 2.0（2018.3）  9
1.5 小结  10
第2章 走进Spring Boot  11
2.1 环境搭建  11
2.1.1 JDK安装  11
2.1.2 IntelliJ IDEA的安装  12
2.1.3 Maven的安装  12
2.1.4 IntelliJ IDEA内配置JDK和Maven  15
2.2 新建Spring Boot项目  16
2.2.1 开始创建项目  16
2.2.2 配置JDK版本和Initializr Service URL  17
2.2.3 配置Project Metadata信息  17
2.2.4 配置Spring Boot版本及默认引入组件  18
2.2.5 配置项目名称和项目位置  18
2.3 项目工程介绍  19
2.3.1 Java类文件  20
2.3.2 资源文件  20
2.3.3 测试类文件  20
2.3.4 pom文件  21
2.4 运行项目  22
2.5 小结  22
第3章 Spring Boot的Web之旅  23
3.1 Spring Boot的第一个Web项目  23
3.1.1 加入Web依赖  23
3.1.2 创建Controller  23
3.1.3 测试运行  24
3.2 WebFlux的使用  25
3.2.1 添加WebFlux依赖  25
3.2.2 创建一个处理方法类  26
3.2.3 创建一个Router类  26
3.2.4 测试运行  27
3.3 使用热部署  27
3.4 配置文件  28
3.4.1 配置文件类型  28
3.4.2 自定义属性  28
3.4.3 使用随机数  29
3.4.4 多环境配置  31
3.4.5 自定义配置文件  31
3.5 使用页面模板  32
3.5.1 使用Thymeleaf  32
3.5.2 使用FreeMarker  35
3.5.3 使用传统JSP  37
3.6 使用WebJars  39
3.7 国际化使用  41
3.8 文件的上传和下载  44
3.9 小结  48
第4章 Spring Boot的数据库之旅  49
4.1 使用数据库  49
4.1.1 使用MySQL数据库  49
4.1.2 使用SQL Server数据库  50
4.1.3 使用Oracle数据库  51
4.1.4 使用MongoDB数据库  55
4.1.5 使用Neo4j数据库  56
4.1.6 使用Redis数据库  57
4.1.7 使用Memcached数据库  58
4.2 使用JDBC操作数据库  58
4.2.1 JDBC依赖配置  59
4.2.2 配置数据库信息  59
4.2.3 创建实体类  60
4.2.4 使用Controller进行测试  60
4.3 使用JPA操作数据库  68
4.3.1 JPA介绍  68
4.3.2 JPA依赖配置  68
4.3.3 配置文件  69
4.3.4 创建实体对象  69
4.3.5 创建数据操作层  71
4.3.6 简单测试运行  73
4.3.7 JPA扩展学习  74
4.3.8 基于WebFlux的使用  75
4.4 使用MyBatis操作数据库  80
4.4.1 MyBatis简介  80
4.4.2 MyBatis依赖配置  80
4.4.3 配置文件  80
4.4.4 基于XML的使用  82
4.4.5 基于注解使用  85
4.4.6 测试运行  85
4.4.7 Mybatis-Generator插件学习  87
4.4.8 PageHelper插件  96
4.4.9 Mybatis-Plus插件  97
4.5 配置多数据源  101
4.5.1 多数据源情况分析  102
4.5.2 配置多数据源  102
4.5.3 基于JPA使用多数据源  105
4.5.4 基于MyBatis使用多数据  106
4.6 使用Druid数据库连接池  108
4.6.1 Druid简介  108
4.6.2 配置Druid  109
4.6.3 操作数据库  114
4.6.4 Druid监控页面介绍  115
4.7 小结  121
第5章 Spring Boot的缓存之旅  122
5.1 使用Spring Cache  122
5.1.1 Spring Cache简介  122
5.1.2 配置Spring Cache依赖  124
5.1.3 测试运行  125
5.1.4 验证缓存  126
5.2 使用Redis  127
5.2.1 Redis简介  127
5.2.2 项目配置  127
5.2.3 测试运行  129
5.2.4 使用Redis缓存  130
5.3 使用Memcached  132
5.3.1 Memcached简介  132
5.3.2 配置Memcached依赖  132
5.3.3 使用Memcached缓存  137
5.3.4 Redis与Memcached的区别  138
5.4 小结  138
第6章 Spring Boot的日志之旅  139
6.1 Logback日志  139
6.1.1 Logback简介  139
6.1.2 日志格式  140
6.1.3 控制台输出  140
6.1.4 日志文件输出  141
6.1.5 日志级别  141
6.1.6 日志配置  142
6.1.7 基于XML配置日志  142
6.2 Log4j日志  145
6.2.1 Log4j简介  146
6.2.2 Spring Boot使用Log4j  146
6.2.3 控制台输出  146
6.2.4 日志文件输出  147
6.3 Log4j 2日志  148
6.3.1 Log4j 2简介  148
6.3.2 Spring Boot使用Log4j 2  150
6.3.3 控制台输出  151
6.3.4 日志文件输出  152
6.3.5 异步日志  152
6.4 ELK日志收集  155
6.4.1 ELK日志收集流程介绍  155
6.4.2 ELK安装  155
6.4.3 ELK配置  157
6.4.4 使用Kibana查看日志  159
6.4.5 Spring Boot直接输出到Logstash  162
6.4.6 ELK日志收集优化方案及建议  163
6.5 小结  164
第7章 Spring Boot的安全之旅  165
7.1 使用Shiro安全管理  165
7.1.1 什么是Shiro  165
7.1.2 使用Shiro做权限控制  167
7.2 使用Spring Security  177
7.2.1 Spring Security简介  177
7.2.2 使用Spring Security做权限控制  178
7.3 小结  184
第8章 Spring Boot的监控之旅  185
8.1 使用actuator监控  185
8.1.1 actuator是什么  185
8.1.2 如何使用actuator  185
8.1.3 actuator监控介绍  186
8.1.4 保护HTTP端点  188
8.1.5 健康信息  190
8.1.6 自定义应用程序信息  192
8.1.7 自定义管理端点路径  192
8.2 使用Admin监控  193
8.2.1 什么是Spring Boot Admin  193
8.2.2 设置Spring Boot Admin Server  193
8.2.3 Spring Cloud Eureka  194
8.2.4 Spring Boot Admin Client的使用  197
8.2.5 安全验证  202
8.2.6 JMX-bean管理  203
8.2.7 通知  203
8.3 Prometheus Grafana监控  207
8.3.1 Prometheus的安装  207
8.3.2 Grafana的安装  208
8.3.3 Spring Boot项目使用Prometheus  208
8.3.4 Prometheus配置  210
8.3.5 启动Grafana  211
8.4 小结  213
第9章 Spring Boot的消息之旅  214
9.1 RabbitMQ消息队列  214
9.1.1 RabbitMQ介绍  214
9.1.2 RabbitMQ的几种角色  215
9.1.3 RabbitMQ的几种模式  216
9.1.4 Spring Boot使用RabbitMQ  218
9.2 Kafka消息队列  226
9.2.1 Kafka介绍  226
9.2.2 Spring Boot使用Kafka  228
9.3 RocketMQ消息队列  230
9.3.1 RocketMQ介绍  230
9.3.2 Spring Boot使用RocketMQ  231
9.4 消息队列对比  236
9.5 小结  238
第10章 Spring Boot的搜索之旅  239
10.1 使用Solr  239
10.1.1 Solr简介  239
10.1.2 Spring Boot使用Solr  240
10.2 使用Elasticsearch  246
10.2.1 Elasticsearch简介  246
10.2.2 Spring Boot使用Elasticsearch  246
10.2.3 使用Elasticsearch Repository进行操作  247
10.2.4 使用Elasticsearch Template进行操作  248
10.2.5 非聚合查询  249
10.2.6 聚合查询  251
10.2.7 复杂查询练习  252
10.3 搜索引擎对比  256
10.3.1 技术背景  256
10.3.2 热度比较  258
10.3.3 集群部署  259
10.3.4 数据格式  259
10.3.5 效率  259
10.4 小结  259
第11章 Spring Boot的小彩蛋  260
11.1 修改启动Banner  260
11.1.1 启动Banner介绍  260
11.1.2 启动Banner修改  263
11.2 使用LomBok让编程更简单  264
11.2.1 什么是LomBok  264
11.2.2 IntelliJ IDEA安装Lombok插件  264
11.2.3 如何使用LomBok  265
11.3 邮件发送  266
11.3.1 在Spring Boot中使用邮件发送  266
11.3.2 基础配置信息  267
11.3.3 文本邮件发送  268
11.3.4 网页邮件发送  269
11.3.5 附件邮件发送  270
11.3.6 嵌入静态资源邮件发送  271
11.4 三“器”的使用  272
11.4.1 过滤器  272
11.4.2 拦截器  274
11.4.3 监听器  275
11.4.4 Spring Boot引用三“器”  276
11.4.5 测试  277
11.5 事务使用  278
11.5.1 事务介绍  278
11.5.2 在项目中使用事务  279
11.5.3 Spring事务拓展介绍  280
11.6 统一处理异常  282
11.6.1 异常介绍  282
11.6.2 Java异常分类  282
11.6.3 Spring Boot中统一处理异常  284
11.7 使用AOP  284
11.7.1 AOP介绍  285
11.7.2 Spring Boot使用AOP  285
11.8 使用validator后台校验  288
11.9 使用Swagger构建接口文档  291
11.9.1 什么是Swagger  291
11.9.2 Swagger 2注解介绍  291
11.9.3 Spring Boot使用Swagger  293
11.10 使用ApiDoc构建接口文档  298
11.10.1 如何使用ApiDoc接口文档  298
11.10.2 ApiDoc常用注解  298
11.10.3 Spring Boot使用ApiDoc  299
11.11 小结  302
第12章 Spring Boot打包部署  303
12.1 使用IDE启动  303
12.1.1 运行Spring Boot应用程序  303
12.1.2 IntelliJ IDEA启动多实例  304
12.2 使用Maven启动  305
12.3 JAR形式启动  305
12.3.1 使用命令将Spring Boot应用程序打成JAR  305
12.3.2 IntelliJ IDEA打JAR包  306
12.4 War形式启动  307
12.4.1 创建项目  307
12.4.2 打War包部署到Tomcat  308
12.5 使用Docker构建Spring Boot项目  308
12.5.1 Docker简介  309
12.5.2 安装Docker  309
12.5.3 Dockerfile  309
12.5.4 运行Docker镜像  310
12.6 使用Jenkins自动化部署SpringBoot应用  311
12.6.1 Jenkins简介  311
12.6.2 Spring Boot应用使用Jenkins  311
12.7 小结  317
第13章 Spring Boot实战之博客系统  318
13.1 博客的制作思路  318
13.1.1 博客布局介绍  318
13.1.2 博客功能介绍  319
13.2 博客模板制作  320
13.3 效果展示  325
13.4 依赖配置  328
13.5 配置文件  329
13.6 后台实体  330
13.6.1 文章表  330
13.6.2 标签表  332
13.6.3 链接表  333
13.6.4 消息表  333
13.6.5 博客访问记录表  334
13.6.6 博客配置表  335
13.7 主功能  336
13.7.1 博客页  336
13.7.2 搜索页  339
13.7.3 文章详情页  341
13.7.4 联系页  343
13.8 辅助功能  344
13.8.1 拦截器  344
13.8.2 定时器  345
13.8.3 初始化  346
13.9 小结  347
第14章 Spring Boot实战之博客后台系统  350
14.1 博客后台的制作思路  350
14.1.1 博客后台布局介绍  350
14.1.2 博客功能介绍  351
14.2 博客后台模板制作  352
14.3 效果展示  352
14.4 依赖配置  356
14.5 配置文件  358
14.6 后台实体  359
14.6.1 用户表  359
14.6.2 角色表  360
14.7 主功能  361
14.7.1 首页  362
14.7.2 文章管理  363
14.8 辅助功能  368
14.8.1 拦截器  368
14.8.2 定时器  369
14.8.3 认证和授权  370
14.8.4 工具类  373
14.8.5 初始化方法  373
14.9 小结  374
参考文献  375
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2实战之旅
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 企业级应用开发实战
第1 章 Spring Boot 概述................................................................1
1.1 传统企业级应用开发之痛与革新 .................................................................................... 2
1.2 Spring Boot 2 总览 ........................................................................................................ 11
1.3 快速开启第一个 Spring Boot 项目 ................................................................................. 16
1.4 如何进行 Spring Boot 项目的开发及测试 ...................................................................... 24
第2 章 Spring 框架核心概念..........................................................32
2.1 Spring 框架总览 ............................................................................................................ 33
2.2 依赖注入与控制反转 .................................................................................................... 37
2.3 AOP 编程 ...................................................................................................................... 46
第3 章 Spring MVC 及常用 MediaType.........................................52
3.1 Spring MVC 简介 .......................................................................................................... 53
3.2 JSON 类型的处理 ......................................................................................................... 56
3.3 XML 类型的处理 ........................................................................................................... 61
3.4 文件上传的处理 ............................................................................................................ 63
第4 章 集成 Thymeleaf................................................................67
4.1 常用 Java 模板引擎 ...................................................................................................... 68
4.2 Thymeleaf 标准方言 ...................................................................................................... 74
4.3 Thymeleaf 设置属性值 ................................................................................................... 84
4.4 Thymeleaf 迭代器与条件语句 ........................................................................................ 88
4.5 Thymeleaf 模板片段 ...................................................................................................... 92
4.6 Thymeleaf 表达式基本对象 ........................................................................................... 95
4.7 Thymeleaf 与 Spring Boot 集成 ...................................................................................... 97
4.8 Thymeleaf 实战 ............................................................................................................. 98
第5 章 数据持久化...................................................................... 107
5.1 JPA 概述 ..................................................................................................................... 108
5.2 Spring Data JPA .......................................................................................................... 127
5.3 Spring Data JPA 与 Hibernate、Spring Boot 集成 ......................................................... 143
5.4 数据持久化实战 .......................................................................................................... 147
第6 章 全文搜索......................................................................... 156
6.1 全文搜索概述 ............................................................................................................. 157
6.2 Elasticsearch 核心概念 ................................................................................................ 159
6.3 Elasticsearch 与 Spring Boot 集成 ................................................................................ 164
6.4 Elasticsearch 实战 ....................................................................................................... 168
第7 章 架构设计与分层................................................................ 175
7.1 为什么需要分层 .......................................................................................................... 176
7.2 系统的架构设计及职责划分 ........................................................................................ 179
第8 章 集成 Bootstrap............................................................... 182
8.1 Bootstrap 简介 ............................................................................................................ 183
8.2 Bootstrap 核心概念 ..................................................................................................... 185
8.3 Bootstrap 及常用前端框架与 Spring Boot 集成 ............................................................ 189
8.4 Bootstrap 实战 ............................................................................................................ 192
第９章 博客系统的需求分析与设计.................................................. 196
9.1 博客系统的需求分析 .................................................................................................. 197
9.2 博客系统的原型设计 .................................................................................................. 201
第10 章 集成 Spring Security..................................................... 206
10.1 基于角色的权限管理 ................................................................................................ 207
10.2 Spring Security 概述 .................................................................................................. 210
10.3 Spring Security 与 Spring Boot 集成 ........................................................................... 218
10.4 Spring Security 实战 .................................................................................................. 219
第11 章 博客系统的整体框架实现................................................... 227
11.1 如何设计 API............................................................................................................. 228
11.2 实现后台整体控制层 ................................................................................................ 233
11.3 实现前台整体布局 .................................................................................................... 237
第12 章 用户管理实现................................................................. 242
12.1 用户管理的需求回顾 ................................................................................................ 243
12.2 用户管理的后台实现 ................................................................................................ 245
12.3 用户管理的前台实现 ................................................................................................ 254
第13 章 角色管理实现................................................................. 264
13.1 角色管理的需求回顾 ................................................................................................ 265
13.2 角色管理的后台实现 ................................................................................................ 266
13.3 角色管理的前台实现 ................................................................................................ 272
第14 章 权限管理实现................................................................. 276
14.1 权限管理的需求回顾 ................................................................................................ 277
14.2 权限管理的后台实现 ................................................................................................ 278
14.3 CSRF 防护处理 ........................................................................................................ 281
14.4 权限管理的前台实现 ................................................................................................ 282
第15 章 文件服务器实现.............................................................. 285
15.1 文件服务器的需求分析 ............................................................................................. 286
15.2 MongoDB 简介 ......................................................................................................... 286
15.3 MongoDB 与 Spring Boot 集成 .................................................................................. 291
15.4 文件服务器的实现 .................................................................................................... 293
第16 章 博客管理实现................................................................. 303
16.1 博客管理的需求回顾 ................................................................................................ 304
16.2 实现个人设置和头像变更 ......................................................................................... 306
16.3 博客管理的后台实现 ................................................................................................ 316
16.4 博客管理的前台实现 ................................................................................................ 325
第17 章 评论管理实现................................................................. 337
17.1 评论管理的需求回顾 ................................................................................................ 338
17.2 评论管理的后台实现 ................................................................................................ 338
17.3 评论管理的前台实现 ................................................................................................ 346
第18 章 点赞管理实现................................................................. 350
18.1 点赞管理的需求回顾 ................................................................................................ 351
18.2 点赞管理的后台实现 ................................................................................................ 351
18.3 点赞管理的前台实现 ................................................................................................ 358
第19 章 分类管理实现................................................................. 362
19.1 分类管理的需求回顾 ................................................................................................ 363
19.2 分类管理的后台实现 ................................................................................................ 364
19.3 分类管理的前台实现 ................................................................................................ 372
第20 章 标签管理实现................................................................. 380
20.1 标签管理的需求回顾 ................................................................................................ 381
20.2 标签管理的后台实现 ................................................................................................ 381
20.3 标签管理的前台实现 ................................................................................................ 383
第21 章 首页搜索实现................................................................. 385
21.1 首页搜索的需求回顾 ................................................................................................ 386
21.2 首页搜索的后台实现 ................................................................................................ 387
21.3 首页搜索的前台实现 ................................................................................................ 399
21.4 使用中文分词 ........................................................................................................... 405
第22 章 总结与展望.................................................................... 408
22.1 Spring Boot 企业级应用开发的总结 .......................................................................... 409
22.2 博客系统的展望 ........................................................................................................ 412
附录A　开发环境的搭建............................................................................................................. 414
附录B　Thymeleaf 属性 .............................................................................................................. 418
附录C　Thymeleaf 表达式工具对象 ............................................................................................ 420
附录D　Bean Validation 内置约束 ............................................................................................... 438
附录E　本书所涉及的技术及相关版本 ....................................................................................... 440
参考文献 ..................................................................................................................................... 442
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 企业级应用开发实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2企业应用实战
第1章  Spring Boot入门  1
1.1  Spring简介  2
1.1.1  Spring概述  2
1.1.2  Spring的生态圈  3
1.1.3  Spring 5的变化  4
1.1.4  Spring的配置简化  4
1.2  Spring Boot简介  4
1.2.1  Spring Boot概述  4
1.2.2  Spring Boot解决的问题  5
1.2.3  Spring Boot的主要特性  5
1.2.4  Spring Boot 2.0的重要改变  5
1.3  “开箱即用”的依赖模块  5
1.3.1  日志依赖模块spring-boot-starter-logging  6
1.3.2  Web开发依赖模块spring-boot-starter-web  7
1.4  开发第一个Spring Boot应用  8
1.4.1  下载和安装Maven  8
1.4.2  Eclipse集成Maven  9
1.4.3  示例：第一个Spring Boot应用  10
1.5  本章小结  18
第2章  Spring Boot核心  19
2.1  Spring Boot的启动类与核心注解@SpringBootApplication  20
2.2  Spring Boot基本配置介绍  21
2.2.1  关闭某个自动配置  21
2.2.2  定制启动banner  22
2.2.3  应用的全局配置文件  23
2.2.4  Spring Boot的依赖模块  24
2.3  Spring Boot自动配置原理  25
2.3.1  源码分析  25
2.3.2  spring.factories分析  27
2.3.3  Spring Boot Web开发的自动配置  29
2.4  本章小结  30
第3章  Spring Boot的Web开发  31
3.1  Spring Boot的Web开发支持  32
3.2  Thymeleaf模板引擎  32
3.2.1  Thymeleaf概述  33
3.2.2  Thymeleaf基础语法  33
3.3  Spring和Thymeleaf的整合  36
3.4  Spring Boot的Thymeleaf支持  37
3.5  Spring Boot的Web开发实例  38
示例：第一个Spring Boot的Web应用  38
示例：Thymeleaf常用功能  45
3.6  Spring Boot对JSP的支持  52
示例：Spring Boot添加JSP支持  53
3.7  Spring Boot处理JSON数据  57
示例：Spring Boot处理JSON  57
3.8  Spring Boot文件上传下载  63
示例：Spring Boot文件上传  63
示例：使用对象方式接收上传文件  66
示例：文件下载  69
3.9  Spring Boot的异常处理  71
示例：ExceptionHandler处理异常  71
示例：父类Controller处理异常  73
示例：Advice处理异常返回JSON  76
3.10  本章小结  78
第4章  Spring Boot的数据访问  79
4.1  Hibernate/JPA/Spring Data JPA的概念  80
4.1.1  对象/关系数据库映射（ORM）  80
4.1.2  基本映射方式  81
4.1.3  流行的ORM框架简介  82
4.2  Spring Data JPA  83
4.2.1  Spring Data核心数据访问接口  83
示例：CrudRepository接口访问数据  84
示例：PagingAndSortingRepository接口访问数据  91
4.2.2  Spring Data JPA开发  99
示例：简单条件查询  100
示例：关联查询和@Query查询  105
示例：@NamedQuery查询  114
示例：Specification查询  118
4.3  Spring Boot使用JdbcTemplate  128
示例：JdbcTemplate访问数据  128
4.4  Spring Boot整合MyBatis  135
示例：Spring Boot整合MyBatis开发  135
4.5  本章小结  141
第5章  Spring Boot的热部署与单元测试  142
5.1  使用spring-boot-devtools进行热部署  143
示例：使用spring-boot-devtools实现热部署  143
5.2  Spring Boot的单元测试  147
示例：使用Spring Boot的单元测试  147
5.3  本章小结  155
第6章  Spring Boot的Security安全控制  156
6.1  Spring Security是什么  157
6.2  Spring Security入门  157
6.2.1  Security适配器  157
6.2.2  用户认证  158
6.2.3  用户授权  158
6.2.4  Spring Security核心类  160
6.2.5  Spring Security的验证机制  161
6.2.6  Spring Boot的支持  161
示例：简单Spring Boot Security应用  162
6.3  企业项目中的Spring Security操作  173
示例：基于JPA的Spring Boot Security操作  173
示例：基于MyBatis的Spring Boot
Security操作  180
示例：基于JDBC的Spring Boot Security操作  183
6.4  本章小结  185
第7章  实战项目：信息管理系统  186
7.1  项目简介及系统架构  187
7.1.1  系统功能介绍  187
7.1.2  相关技术介绍  187
7.1.3  系统结构  188
7.1.4  系统的功能模块  188
7.2  配置文件  189
7.3  持久化类  191
7.3.1  设计持久化实体  191
7.3.2  创建持久化实体类  192
7.3.3  导入初始数据  197
7.4  定义Repository接口实现Repository持久层  198
7.5  实现Service持久层  200
7.5.1  业务逻辑组件的设计  201
7.5.2  实现业务逻辑组件  201
7.5.3  事务管理  224
7.6  实现Web层  224
7.6.1  控制器  224
7.6.2  系统登录  225
7.6.3  菜单管理  233
7.6.4  角色管理  235
7.6.5  用户管理  240
7.6.6  功能扩展  245
7.7  本章小结  249
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2企业应用实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2+Thymeleaf企业应用实战
第1章  概述  1
1.1  Java EE开发技术  2
1.1.1  Java EE的三层架构  2
1.1.2  MVC框架  2
1.1.3  数据访问层框架  3
1.1.4  视图技术  3
1.2  JDK的下载与安装  3
1.3  安装与配置Maven  4
1.3.1  关于Maven  4
1.3.2  下载与安装Maven  4
1.3.3  配置远程仓库  5
1.4  安装Eclipse  5
1.4.1  Eclipse版本  5
1.4.2  在Eclipse中配置Maven  5
1.4.3  获取本书代码  6
1.5  本章小结  6
第2章  初试Spring Boot  7
2.1  Spring Boot介绍  8
2.1.1  Spring Boot简介  8
2.1.2  starter模块  8
2.2  构建第一个Spring Boot程序  9
2.2.1  新建Maven项目  9
2.2.2  编写启动类  10
2.2.3  编写控制器  11
2.2.4  开发环境的热部署  12
2.3  运行单元测试  12
2.3.1 测试Web服务  12
2.3.2  模拟Web测试  13
2.3.3  测试业务组件  13
2.3.4  模拟业务组件  14
2.4  发布与调用REST服务  15
2.4.1  REST  15
2.4.2  发布REST服务  15
2.4.3  使用RestTemplate调用服务  16
2.4.4  使用Feign调用服务  18
2.5  本章小结  19
第3章  Spring Boot配置  20
3.1  配置文件  21
3.1.1  默认配置文件  21
3.1.2  指定配置文件  22
3.1.3  yml文件  22
3.1.4  使用profile指定配置  23
3.2  Web配置  24
3.2.1  Servlet配置  24
3.2.2  Listener配置  25
3.2.3  Filter配置  26
3.2.4  构建可部署的war包  26
3.2.5  JSP配置  28
3.3  其他配置  30
3.3.1  服务器常用配置  30
3.3.2  响应压缩  30
3.3.3  SSL配置  32
3.3.4  使用其他服务器  32
3.3.5  服务器访问日志  33
3.3.6  banner配置  34
3.4  自定义配置  35
3.4.1  @Value注解  35
3.4.2  定义属性映射对象  36
3.4.3  使用配置  37
3.4.4  属性自动识别  38
3.5  本章小结  39
第4章  Spring Boot的注解  40
4.1  Spring的常用注解  41
4.1.1  bean定义  41
4.1.2  依赖注入  42
4.1.3  使用Primary注解  44
4.1.4  Scope注解  45
4.1.5  方法注入  46
4.1.6  AOP注解  47
4.1.7  ComponentScan注解  49
4.2  高级Spring注解  50
4.2.1  限定注解  50
4.2.2  自定义限定注解  51
4.2.3  自定义bean的生命周期  52
4.3  Spring MVC的常用注解  54
4.3.1  Controller注解  54
4.3.2  RequestMapping注解  55
4.3.3  PathVariable注解  56
4.3.4  MatrixVariable注解  56
4.3.5  RequestParam注解  57
4.3.6  文件上传  58
4.3.7  RestController注解  58
4.4  Spring Boot的条件注解  59
4.4.1  类条件注解  59
4.4.2  项目依赖问题  60
4.4.3  其他条件注解  61
4.4.4  自定义条件注解  61
4.4.5  Spring Boot的自动配置  62
4.5  本章小结  63
第5章  初试Thymeleaf  64
5.1  Thymeleaf  65
5.1.1  什么是Thymeleaf  65
5.1.2  支持的模板类型  65
5.1.3  HTML模板  65
5.1.4  XML模板  66
5.2  初试Thymeleaf API  66
5.2.1  处理HTML  66
5.2.2  更换模板解析器  67
5.2.3  处理资源文件  67
5.2.4  变量处理  68
5.2.5  遍历集合  69
5.2.6  设置前缀与后缀  69
5.3  在Servlet应用中整合Thymeleaf  70
5.3.1  建立项目  70
5.3.2  配置模板引擎  71
5.3.3  在Servlet中使用Thymeleaf  72
5.3.4  编写模板文件  73
5.4  在Struts2中整合Thymeleaf  74
5.4.1  建立与配置Struts2项目  74
5.4.2  配置Struts Action  75
5.4.3  整合Themeleaf  76
5.5  在Spring Boot中整合Thymeleaf  77
5.5.1  建立与配置项目  77
5.5.2  编写控制器与模板  78
5.5.3  静态资源  79
5.6  本章小结  79
第6章  Thymeleaf对象的使用  80
6.1  文本处理  81
6.1.1  外部文本输出  81
6.1.2  文本国际化  82
6.1.3  处理转义文本  83
6.1.4  读取变量  83
6.1.5  在文本信息中使用变量  84
6.1.6  其他读取变量的方式  84
6.1.7  链接表达式  85
6.2  基本对象  86
6.2.1  基本对象概述  86
6.2.2  #ctx对象  87
6.2.3  Web对象  87
6.2.4  内置变量  88
6.2.5  使用基本对象的注意事项  88
6.3  数字对象  89
6.3.1  整数格式化  89
6.3.2  小数格式化  90
6.3.3  货币格式化  91
6.3.4  百分比格式化  92
6.3.5  使用sequence方法  92
6.4  字符串对象  92
6.4.1  toString与length方法  93
6.4.2  非空判断与默认值处理  93
6.4.3  包含判断  94
6.4.4  截取与替换  94
6.4.5  追加与拼接  95
6.4.6  分割与连接  96
6.4.7  大小写转换  96
6.4.8  字符串编码与解码  97
6.4.9  其他处理  98
6.5  日期对象  98
6.5.1  格式化日期  98
6.5.2  获取日期字段  99
6.5.3  创建日期  100
6.6  数组与集合对象  101
6.6.1  数组  101
6.6.2  List与Set  101
6.6.3  Map  101
6.7  其他内置对象  102
6.7.1  messages对象  102
6.7.2  uris对象  102
6.7.3  aggregates对象  103
6.8  本章小结  103
第7章  Thymeleaf常用语法  104
7.1  表达式语法之运算符  105
7.1.1  表达式常量  105
7.1.2  字符串拼接  106
7.1.3  算术运算符  106
7.1.4  关系运算符  107
7.1.5  条件运算符  108
7.1.6  无操作符  108
7.2  表达式语法进阶  108
7.2.1  数据转换  108
7.2.2  自定义数据转换类  109
7.2.3  Spring Boot数据转换  110
7.2.4  表达式预处理  112
7.2.5  表达式调用工具方法  113
7.3  属性设置  114
7.3.1  使用th:attr  114
7.3.2  设置HTML节点属性  114
7.3.3  属性值拼接  115
7.3.4  HTML5属性支持  115
7.4  条件判断与数据迭代  116
7.4.1  条件判断  116
7.4.2  switch case语法  117
7.4.3  使用th:each属性  117
7.4.4  常见迭代类型  118
7.4.5  迭代状态对象  118
7.4.6  数据延迟加载  120
7.4.7  在Spring Boot中使用延迟加载  121
7.4.8  星号表达式  121
7.5  本章小结  122
第8章  深入Thymeleaf模板  123
8.1  模板片断  124
8.1.1  定义与引用模板片断  124
8.1.2  片断引用语法  125
8.1.3  选择器的基础语法  126
8.1.4  选择器的其他语法  128
8.1.5  insert、replace与include的区别  128
8.1.6  含有变量的片断引用  129
8.1.7  片断块引用  130
8.1.8  无操作符的使用  131
8.1.9  删除模板  132
8.1.10  基本表达式总结  134
8.2  模板与逻辑分离  134
8.2.1  逻辑分离例子  134
8.2.2  逻辑分离配置  136
8.2.3  关联节点的选择  137
8.3  模板注释  137
8.3.1  解析层注释  138
8.3.2  原型注释  139
8.4  内联语法  139
8.4.1  使用内联语法显示文本  139
8.4.2  在JavaScript中使用内联语法  140
8.4.3  在CSS中使用内联语法  140
8.4.4  内联语法注释  141
8.4.5  内联语法序列化  142
8.5  模板缓存  143
8.5.1  开启与配置缓存  143
8.5.2  缓存有效时间  145
8.6  本章小结  146
第9章  Thymeleaf原理与扩展  147
9.1  概念与接口介绍  148
9.1.1  方言  148
9.1.2  处理器  149
9.1.3  模板处理者  150
9.1.4  模板解析事件  150
9.1.5  节点与标签  151
9.2  深入Thymeleaf模板处理  151
9.2.1  策略模式  151
9.2.2  责任链模式  153
9.2.3  合并使用策略模式与责任链模式  156
9.2.4  模板处理过程  159
9.2.5  模板事件  161
9.3  处理器  161
9.3.1  预处理器  161
9.3.2  后处理器  163
9.3.3  一般处理器  164
9.3.4  处理器优先级  165
9.3.5  标签处理器  167
9.3.6  模型处理器  168
9.3.7  边界处理器  170
9.3.8  其他处理器  170
9.4  Thymeleaf扩展  171
9.4.1  自定义标签  171
9.4.2  自定义模板属性  173
9.4.3  自定义内置对象  175
9.4.4  自定义执行属性  176
9.5  本章小结  177
第10章  Spring Boot与Thymeleaf整合  178
10.1  在Spring Boot中配置Thymeleaf  179
10.1.1  模板引擎配置  179
10.1.2  Spring MVC视图解析器  181
10.1.3  Thymeleaf视图解析器  184
10.1.4  数据转换配置  186
10.1.5  模板国际化  186
10.2  表单处理  188
10.2.1  表单提交  188
10.2.2  使用th:field属性  189
10.2.3  HTML节点的id生成  190
10.2.4  实现label节点  192
10.2.5  在模板中处理checkbox与radio  193
10.2.6  表单提交处理checkbox与radio  195
10.3  表单验证  195
10.3.1  表单验证  195
10.3.2  修改信息文件  197
10.3.3  输出错误信息  197
10.4  片断的使用  198
10.4.1  引用片断  198
10.4.2  使用bean选择片断  199
10.4.3  在控制器中引用片断  201
10.5  自定义标签  201
10.5.1  方言与处理器  201
10.5.2  配置方言  203
10.6  本章小结  204
第11章  使用JavaScript库  205
11.1  使用jQuery  206
11.1.1  概述  206
11.1.2  选择器  206
11.1.3  事件  207
11.1.4  数据列表  208
11.1.5  AJAX调用GET方法  209
11.1.6  AJAX调用POST方法  210
11.1.7  表单验证  211
11.2  Bootstrap  213
11.2.1  概述  213
11.2.2  数据列表  214
11.2.3  分页  215
11.2.4  表单  218
11.2.5  警告框的使用  219
11.3  Vue.js  221
11.3.1  概述  221
11.3.2  组件  222
11.3.3  指令  224
11.3.4  循环指令  225
11.3.5  表单验证  226
11.4  本章小结  227
第12章  数据库实战  228
12.1  概述  229
12.1.1  关于Spring Data  229
12.1.2  Spring Data的功能  229
12.1.3  Spring Data模块  230
12.2  Spring Data与JPA  230
12.2.1  构建项目  230
12.2.2  数据访问层与业务层  231
12.2.3  自定义数据存储逻辑  233
12.2.4  方法名查询  233
12.2.5  使用@Query注解  234
12.3  Spring Data与MongoDB  235
12.3.1  安装MongoDB  235
12.3.2  配置权限  236
12.3.3  MongoDB的相关概念  236
12.3.4  构建项目  236
12.3.5  数据访问层与业务层  237
12.3.6  自定义数据存储逻辑  238
12.3.7  方法名查询  239
12.3.8  使用@Query注解  240
12.4  Spring Data与Redis  241
12.4.1  Redis的安装与配置  241
12.4.2  Redis的数据类型  242
12.4.3  使用Jedis  242
12.4.4  构建Spring Data项目  243
12.4.5  数据访问层与业务层  244
12.4.6  自定义数据存储逻辑  246
12.4.7  方法名查询  247
12.5  本章小结  247
第13章  开发微服务  248
13.1  微服务与Spring Cloud  249
13.1.1  微服务简介  249
13.1.2  Netflix与Spring Cloud  249
13.1.3  Spring Cloud模块介绍  250
13.2  Eureka服务治理  250
13.2.1  Eureka架构  250
13.2.2  构建服务器  251
13.2.3  服务提供者  253
13.2.4  服务调用者  255
13.2.5  程序结构  257
13.3  Ribbon负载均衡  257
13.3.1  Ribbon介绍  258
13.3.2  第一个Ribbon程序  258
13.3.3  在Spring Cloud中测试使用  Ribbon  259
13.4  客户端Feign  260
13.4.1  Feign介绍  260
13.4.2  第一个Feign程序  260
13.4.3  使用Feign调用微服务  262
13.5  容错框架Hystrix  263
13.5.1  Hystrix介绍  263
13.5.2  第一个Hystrix程序  265
13.5.3  在Spring Cloud中整合Hystrix  266
13.6  本章小结  268
第14章  实战案例  269
14.1  系统功能及界面  270
14.1.1  登录与首页  270
14.1.2  图书管理模块  271
14.1.3  入库模块  272
14.1.4  销售模块  273
14.1.5  导航组件与分页组件  274
14.1.6  运行本章案例  275
14.2  数据库设计  275
14.2.1  用户表  275
14.2.2  图书表与库存表  275
14.2.3  入库单数据表  276
14.2.4  销售单数据表  276
14.3  搭建项目框架  277
14.3.1  项目依赖与项目结构  277
14.3.2  项目配置  278
14.3.3  实体设计  279
14.3.4  用户登录  281
14.3.5  片断定义  282
14.4  图书管理  283
14.4.1  数据列表  283
14.4.2  通用的分页组件  285
14.4.3  图片上传  286
14.4.4  新建图书  288
14.4.5  查看与修改图书  289
14.4.6  删除图书  290
14.5  销售单模块  291
14.5.1  列表与分页功能  291
14.5.2  选择图书  293
14.5.3  删除已选图书与修改数量  295
14.5.4  新建销售单  297
14.5.5  操作库存  299
14.6  首页数据查询与排序  300
14.6.1  库存查询  300
14.6.2  图书查询与轮播  301
14.6.3  数据排序  303
14.7  本章小结  304
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2+Thymeleaf企业应用实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot+Spring Cloud微服务开发实战
第1篇 Web基础知识
第1章 认识微服务03
1．1　什么是微服务框架　03
1．2　互联网框架的演变　04
1．2．1　ORM框架　05
1．2．2　MVC框架　06
1．2．3　RPC框架　07
1．2．4　SOA框架　09
1．3　模块的拆分　09
1．3．1　拆分中的问题　10
1．3．2　拆分原则　10
1．4　当前主流微服务框架　12
1．4．1　Dubbo简介　12
1．4．2　Spring Cloud简介　13
1．4．3　HTTP与RPC简介　14
1．4．4　Spring Boot与Spring Cloud的关系　15
第2章 快速搭建一个微服务框架16
2．1　Spring Boot框架搭建　16
2．1．1　使用STS搭建开发环境　16
2．1．2　使用IntelliJ IDEA搭建开发环境　19
2．2　实现安全登录的微服务框架　21
2．2．1　功能描述与最终目标　22
2．2．2　功能结构　22
2．3　微服务框架搭建　23
2．3．1　搭建模块　23
2．3．2　启动Demo　31
2．3．3　打包发布　34
第3章　Restful风格的编程　36
3．1　Restful 简介　36
3．2　查询用户以及用户详情　37
3．2．1　编写测试类程序　37
3．2．2　常用注解　40
3．2．3　查询用户详情　47
3．3　处理创建请求　50
3．3．1　@RequestBody注解　51
3．3．2　日期类型的处理　52
3．3．3　@Valid注解　54
3．3．4　BindingResult验证参数合法性　55
3．4　用户信息修改与删除　56
3．4．1　用户信息修改　56
3．4．2　用户信息删除　58
第2篇 Spring Boot
第4章　Spring Boot中的IOC　61
4．1　IOC原理简介　61
4．1．1　IOC小案例　61
4．1．2　IOC简介　64
4．2　装配Bean　67
4．2．1　@ComponentScan简介　67
4．2．2　@ComponentScan使用实例　69
4．3　依赖注入ID　75
4．3．1　常用注解　75
4．3．2　@Autowired 注解　76
4．4　Bean 的生命周期　82
4．4．1　Bean 的初始化过程　82
4．4．2　Bean 的延迟初始化　85
4．4．3　Bean 的生命周期　86
4．5　配置文件90
4．5．1　配置文件的使用方式　90
4．5．2　Yml 配置文件的使用　95
第5章　Spring Boot 中的AOP　97
5．1　AOP 简介　97
5．1．1　AOP 小案例　97
5．1．2　AOP 术语　101
5．2　AOP 开发详解　102
5．2．1　连接点与两种代理　102
5．2．2　切面　106
5．2．3　切点　107
5．2．4　多切面与@Order　111
5．3　AOP 原理　114
5．3．1　AOP 代理原理讲解　114
5．3．2　ProxyCreatorSupport 核心代理类　116
5．3．3　通知和通知器　118
5．4　AOP 后置处理器　120
5．4．1　AnnotationAwareAspectJAutoProxyCreator 方式　120
5．4．2　后置处理器的注册　122
5．4．3　后置处理器处理@Aspect 的Bean　123
第6章　Spring Boot 中的数据源　125
6．1　配置数据源　125
6．1．1　默认数据源　125
6．1．2　自定义数据源　126
6．2　JdbcTemplate 的使用　131
6．2．1　JdbcTemplate 实例　131
6．2．2　JdbcTemplate 原理说明　134
6．3　JPA 的使用　135
6．3．1　JPA 概述　135
6．3．2　JPA 使用实例135
6．4　Spring Boot 与MyBatis 集成　140
6．4．1　MyBatis 原理　140
6．4．2　Spring Boot 与MyBatis 集成　141
第7章　Spring Boot 中的事务　148
7．1　隔离级别148
7．1．1　数据库的隔离级别　148
7．1．2　Spring Boot 中的隔离级别　151
7．2　声明式事务　152
7．2．1　@Transaction 注解　152
7．2．2　事务管理器　153
7．3　JPA 下的事务　155
7．3．1　普通的数据库访问　155
7．3．2　事务　159
7．4　JDBC 下的事务　161
7．5　事务传播行为　164
第8章　Spring Boot 中的Redis　167
8．1　Redis 的简单使用　167
8．1．1　Spring-boot-starter-data-redis 介绍　167
8．1．2　Redis 的使用　168
8．1．3　使用配置类建立Redis 工厂　170
8．2　对Redis 数据类型的操作　172
8．2．1　StringRedisTemplate 的使用　172
8．2．2　模板template　175
8．2．3　数据类型的操作　177
8．3　序列化　181
8．3．1　序列化实例　181
8．3．2　序列化讲解　185
8．4　缓存　186
8．4．1　缓存的使用　186
8．4．2　缓存的注解　191
第9章　Spring Boot 中的Security　200
9．1　基本原理200
9．1．1　默认安全登录　201
9．1．2　Security 原理说明　202
9．2　自定义用户认证逻辑　204
9．2．1　处理用户获取逻辑　204
9．2．2　处理用户校验逻辑　206
9．2．3　密码加密与解密　208
9．3　自定义用户认证流程　210
9．3．1　自定义登录页面　210
9．3．2　优化自定义登录页面　213
9．3．3　登录成功之后的处理　218
9．3．4　登录失败之后的处理　220
第3篇　Spring Cloud
第10章 服务治理Spring Cloud Eureka　225
10．1　Eureka 快速入门　225
10．1．1　服务治理　225
10．1．2　Eureka 的服务治理　227
10．1．3　Eureka 的服务注册中心搭建　228
10．1．4　Eureka 的服务提供者　232
10．1．5　Eureka Server 的高可用　235
10．2　Eureka 的消费　237
10．2．1　RestTemplate 直接调用　237
10．2．2　LoadBalancerClient 调用　239
10．2．3　@LoadBalanced 注解　240
10．3　Eureka 原理详解　241
10．3．1　基础框架　241
10．3．2　机制　242
10．4　进阶配置项说明　244
10．4．1　服务注册类的配置　244
10．4．2　服务实例类的配置　246
10．4．3　服务注册中心配置　248
10．4．4　服务注册中心仪表盘配置　249
10．5　Eureka 源码分析　249
10．5．1　DiscoveryClient 实例　250
10．5．2　服务发现　251
第11章 负载均衡Spring Cloud Ribbon　254
11．1　Ribbon 使用　254
11．1．1　客户端负载均衡　254
11．1．2　Ribbon 实例　255
11．1．3　Ribbon 用法总结　258
11．2　RestTemplate 的详细使用方法　259
11．2．1　RestTemplate 功能　259
11．2．2　GET 请求API　261
11．2．3　POST 请求API　265
11．2．4　PUT 请求API　271
11．2．5　DELETE 请求API　271
11．3　Ribbon 的负载均衡入口　272
11．4　Ribbon 的负载均衡器　274
11．4．1　AbstractLoadBalancer 类　274
11．4．2　BaseLoadBalancer 类　275
11．4．3　DynamicServerListLoadBalancer 类　277
11．4．4　服务注册　282
第12章 声明式服务调用Spring Cloud Feign　285
12．1　Feign 的使用实例　285
12．1．1　Feign 演示实例　285
12．1．2　Feign 与Spring MVC　290
12．2　Feign 中Ribbon 的配置　294
12．2．1　全局配置与指定服务的配置　294
12．2．2　重试机制　295
12．3　Feign 的配置　296
12．3．1　日志配置　296
12．3．2　其他配置　298
12．3．3　自定义配置　299
第13章 服务容错保护Spring Cloud Hystrix　303
13．1　Hystrix 的使用　303
13．1．1　服务降级　303
13．1．2　超时设置　308
13．1．3　服务熔断　313
13．2　Hystrix 的原理　314
13．2．1　Hystrix 产生背景　315
13．2．2　Hystrix 实现原理　316
13．3　Hystrix 的应用　318
13．3．1　Hystrix 工作流程　318
13．3．2　自定义使用Hystrix　320
13．4　Hystrix 的配置　322
13．4．1　属性配置说明　322
13．4．2　属性配置　323
13．4．3　Command 属性　325
第14章 配置中心Spring Cloud Config　328
14．1　Config 的原理　328
14．2　Config 的服务端使用　329
14．2．1　搭建配置中心　329
14．2．2　配置中心测试　333
14．2．3　本地Git　336
14．3　Config 的客户端使用　337
14．3．1　配置客户端　337
14．3．2　客户端测试　338
14．3．3　Config 的高可用性　340
14．4　Config 的知识点　341
14．4．1　Config 的Git 介绍　341
14．4．2　动态刷新配置　342
第15章 网关Spring Cloud Zuul　343
15．1　Zuul 路由　343
15．1．1　基本的网关功能　343
15．1．2　自定义路由　348
15．1．3　Cookie 头信息控制　349
15．2　Zuul 请求过滤　351
15．2．1　应用场景　351
15．2．2　鉴权　352
15．2．3　限流　355
15．3　Zuul 其他知识点　356
15．3．1　过滤器　356
15．3．2　高可用　356
第４篇　微服务开发实战
第16章 点餐管理系统实战359
16．1　点餐管理系统框架说明　359
16．1．1　系统使用的技术　359
16．1．2　系统功能模块　361
16．1．3　系统搭建　361
16．2　点餐管理系统框架设计　372
16．2．1　具体需求分析　372
16．2．2　数据库设计　372
16．2．3　对外接口设计　373
16．3　商品模块开发　374
16．3．1　基本的准备工作　374
16．3．2　接口开发　376
16．3．3　封装Restful 接口　379
16．3．4　Restful 接口测试　380
16．4　订单模块开发　382
16．4．1　基本的准备工作　382
16．4．2　接口开发　384
16．4．3　封装Restful 接口　386
16．4．4　Restful 接口测试　386
第17章 图书管理系统实战387
17．1　图书管理系统框架说明　387
17．1．1　需求分析　387
17．1．2　技术说明　388
17．2　图书管理系统框架设计　388
17．2．1　数据库设计　388
17．2．2　接口设计　389
17．2．3　环境搭建　390
17．3　借阅模块开发　393
17．3．1　实体类　394
17．3．2　Repository 接口　394
17．3．3　Service 层　395
17．3．4　Controller 层　395
17．3．5　接口测试　395
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot+Spring Cloud微服务开发实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2攻略
第1章 介绍Spring Boot  1
1.1 使用Maven创建Spring Boot应用程序  2
1.1.1 问题  2
1.1.2 解决方案  2
1.1.3 工作原理  2
1.2 使用Gradle创建Spring Boot应用程序  5
1.2.1 问题  5
1.2.2 解决方案  5
1.2.3 工作原理  6
1.3 使用Spring Initializr创建Spring Boot应用程序  8
1.3.1 问题  8
1.3.2 解决方案  9
1.3.3 工作原理  9
1.4 小结  12
第2章 Spring Boot基础特性  13
2.1 配置bean  13
2.1.1 问题  13
2.1.2 解决方案  13
2.1.3 工作原理  13
2.2 属性外置  19
2.2.1 问题  19
2.2.2 解决方案  19
2.2.3 工作原理  19
2.3 测试  23
2.3.1 问题  23
2.3.2 解决方案  23
2.3.3 工作原理  23
2.4 配置日志  28
2.4.1 问题  28
2.4.2 解决方案  28
2.4.3 工作原理  28
2.5 重用现有配置  29
2.5.1 问题  29
2.5.2 解决方案  30
2.5.3 工作原理  30
第3章 Spring MVC基础特性  31
3.1 开始使用Spring MVC  31
3.1.1 问题  31
3.1.2 解决方案  31
3.1.3 工作原理  31
3.2 使用Spring MVC公开REST资源  35
3.2.1 问题  35
3.2.2 解决方案  35
3.2.3 工作原理  36
3.3 在Spring Boot中使用Thymeleaf模板  45
3.3.1 问题  45
3.3.2 解决方案  45
3.3.3 工作原理  45
3.4 处理异常  51
3.4.1 问题  51
3.4.2 解决方案  51
3.4.3 工作原理  51
3.5 应用程序国际化  56
3.5.1 问题  56
3.5.2 解决方案  56
3.5.3 工作原理  56
3.6 解析用户区域设置  59
3.6.1 问题  59
3.6.2 解决方案  59
3.6.3 工作原理  59
3.7 选择和配置内嵌的服务器  63
3.7.1 问题  63
3.7.2 解决方案  63
3.7.3 工作原理  63
3.8 为Servlet容器配置SSL  68
3.8.1 问题  68
3.8.2 解决方案  68
3.8.3 工作原理  68
第4章 Spring MVC 异步特性  73
4.1 使用控制器和TaskExecutor处理异步请求  74
4.1.1 问题  74
4.1.2 解决方案  74
4.1.3 工作原理  74
4.2 响应回写函数  78
4.2.1 问题  78
4.2.2 解决方案  78
4.2.3 工作原理  78
4.3 WebSocket  86
4.3.1 问题  86
4.3.2 解决方案  86
4.3.3 工作原理  86
4.4 在WebSocket上使用STOMP  96
4.4.1 问题  96
4.4.2 解决方案  96
4.4.3 工作原理  96
第5章 Spring WebFlux特性  105
5.1 使用Spring WebFlux开发反应式应用  105
5.1.1 问题  105
5.1.2 解决方案  105
5.1.3 工作原理  107
5.2 发布和使用反应式Rest服务  111
5.2.1 问题  111
5.2.2 解决方案  111
5.2.3 工作原理  111
5.3 使用Thymeleaf作为模板引擎  120
5.3.1 问题  120
5.3.2 解决方案  120
5.3.3 工作原理  120
5.4 WebFlux和WebSocket  125
5.4.1 问题  125
5.4.2 解决方案  125
5.4.3 工作原理  125
第6章 Spring Security介绍  135
6.1 在Spring Boot应用程序中启用安全特性  135
6.1.1 问题  135
6.1.2 解决方案  135
6.1.3 工作原理  135
6.2 登录Web应用  142
6.2.1 问题  142
6.2.2 解决方案  142
6.2.3 工作原理  142
6.3 用户认证  150
6.3.1 问题  150
6.3.2 解决方案  151
6.3.3 工作原理  151
6.4 制定访问控制决策  156
6.4.1 问题  156
6.4.2 解决方案  156
6.4.3 工作原理  156
6.5 向WebFlux应用程序添加安全特性  160
6.5.1 问题  160
6.5.2 解决方案  161
6.5.3 工作原理  161
6.6 小结  166
第7章 数据访问  167
7.1 配置数据源  167
7.1.1 问题  167
7.1.2 解决方案  167
7.1.3 工作原理  167
7.2 使用JdbcTemplate  176
7.2.1 问题  176
7.2.2 解决方案  176
7.2.3 工作原理  176
7.3 使用JPA  184
7.3.1 问题  184
7.3.2 解决方案  184
7.3.3 工作原理  184
7.4 直接使用Hibernate  192
7.4.1 问题  192
7.4.2 解决方案  192
7.4.3 工作原理  192
7.5 Spring Data MongoDB  195
7.5.1 问题  195
7.5.2 解决方案  195
7.5.3 工作原理  195
第8章 Java企业服务  209
8.1 Spring异步处理机制  209
8.1.1 问题  209
8.1.2 解决方案  209
8.1.3 工作原理  209
8.2 Spring任务调度  213
8.2.1 问题  213
8.2.2 解决方案  213
8.2.3 工作原理  213
8.3 发送E-mail  215
8.3.1 问题  215
8.3.2 解决方案  215
8.3.3 工作原理  215
8.4 注册JMX MBean  220
8.4.1 问题  220
8.4.2 解决方案  220
8.4.3 工作原理  220
第9章 消息传递  225
9.1 配置JMS  225
9.1.1 问题  225
9.1.2 解决方案  225
9.1.3 工作原理  225
9.2 使用JMS发送消息  231
9.2.1 问题  231
9.2.2 解决方案  231
9.2.3 工作原理  231
9.3 使用JMS接收消息  238
9.3.1 问题  238
9.3.2 解决方案  238
9.3.3 工作原理  238
9.4 配置RabbitMQ  242
9.4.1 问题  242
9.4.2 解决方案  242
9.4.3 工作原理  243
9.5 使用RabbitMQ发送消息  243
9.5.1 问题  243
9.5.2 解决方案  244
9.5.3 工作原理  244
9.6 使用RabbitMQ接收消息  251
9.6.1 问题  251
9.6.2 解决方案  251
9.6.3 工作原理  251
第10章 Spring Boot Actuator  255
10.1 启用和配置Spring Boot Actuator  255
10.1.1 问题  255
10.1.2 解决方案  255
10.1.3 工作原理  255
10.2 创建自定义的健康状况检查和性能指标  261
10.2.1 问题  261
10.2.2 解决方案  262
10.2.3 工作原理  262
10.3 导出性能指标  264
10.3.1 问题  264
10.3.2 解决方案  264
10.3.3 工作原理  265
第11章 打包  267
11.1 创建可执行文件  267
11.1.1 问题  267
11.1.2 解决方案  267
11.1.3 工作原理  267
11.2 为部署创建WAR文件  270
11.2.1 问题  270
11.2.2 解决方案  270
11.2.3 工作原理  270
11.3 通过Thin Launcher减少归档文件大小  273
11.3.1 问题  273
11.3.2 解决方案  273
11.3.3 工作原理  273
11.4 使用Docker  274
11.4.1 问题  275
11.4.2 解决方案  275
11.4.3 工作原理  275
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Spring Boot 2攻略
